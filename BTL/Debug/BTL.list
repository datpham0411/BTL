
BTL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004428  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08004534  08004534  00014534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004638  08004638  000200c4  2**0
                  CONTENTS
  4 .ARM          00000000  08004638  08004638  000200c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004638  08004638  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004638  08004638  00014638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800463c  0800463c  0001463c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08004640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200000c4  08004704  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  08004704  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015645  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d8d  00000000  00000000  00035732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  000384c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef0  00000000  00000000  000394d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b89  00000000  00000000  0003a3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015235  00000000  00000000  00053f49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dddc  00000000  00000000  0006917e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f6f5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045c4  00000000  00000000  000f6fb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c4 	.word	0x200000c4
 8000128:	00000000 	.word	0x00000000
 800012c:	0800451c 	.word	0x0800451c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c8 	.word	0x200000c8
 8000148:	0800451c 	.word	0x0800451c

0800014c <isButton1Pressed>:
int button3_flag = 0;

int TimerForKeyPressButton4 = 200;
int button4_flag = 0;

int isButton1Pressed() {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1) {
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	200000e0 	.word	0x200000e0

08000170 <subKeyProcessButton1>:

void subKeyProcessButton1(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	button1_flag = 1;
 8000174:	4b03      	ldr	r3, [pc, #12]	; (8000184 <subKeyProcessButton1+0x14>)
 8000176:	2201      	movs	r2, #1
 8000178:	601a      	str	r2, [r3, #0]
}
 800017a:	bf00      	nop
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	200000e0 	.word	0x200000e0

08000188 <getKeyInputButton1>:

void getKeyInputButton1() {
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
	KeyReg0Button1 = KeyReg1Button1;
 800018c:	4b20      	ldr	r3, [pc, #128]	; (8000210 <getKeyInputButton1+0x88>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a20      	ldr	r2, [pc, #128]	; (8000214 <getKeyInputButton1+0x8c>)
 8000192:	6013      	str	r3, [r2, #0]
	KeyReg1Button1 = KeyReg2Button1;
 8000194:	4b20      	ldr	r3, [pc, #128]	; (8000218 <getKeyInputButton1+0x90>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4a1d      	ldr	r2, [pc, #116]	; (8000210 <getKeyInputButton1+0x88>)
 800019a:	6013      	str	r3, [r2, #0]
	KeyReg2Button1 = HAL_GPIO_ReadPin(BUTTON_TRAFFIC_1_GPIO_Port, BUTTON_TRAFFIC_1_Pin);
 800019c:	2102      	movs	r1, #2
 800019e:	481f      	ldr	r0, [pc, #124]	; (800021c <getKeyInputButton1+0x94>)
 80001a0:	f001 ff74 	bl	800208c <HAL_GPIO_ReadPin>
 80001a4:	4603      	mov	r3, r0
 80001a6:	461a      	mov	r2, r3
 80001a8:	4b1b      	ldr	r3, [pc, #108]	; (8000218 <getKeyInputButton1+0x90>)
 80001aa:	601a      	str	r2, [r3, #0]

	if ((KeyReg0Button1 == KeyReg1Button1) && (KeyReg1Button1 == KeyReg2Button1)) {
 80001ac:	4b19      	ldr	r3, [pc, #100]	; (8000214 <getKeyInputButton1+0x8c>)
 80001ae:	681a      	ldr	r2, [r3, #0]
 80001b0:	4b17      	ldr	r3, [pc, #92]	; (8000210 <getKeyInputButton1+0x88>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	429a      	cmp	r2, r3
 80001b6:	d129      	bne.n	800020c <getKeyInputButton1+0x84>
 80001b8:	4b15      	ldr	r3, [pc, #84]	; (8000210 <getKeyInputButton1+0x88>)
 80001ba:	681a      	ldr	r2, [r3, #0]
 80001bc:	4b16      	ldr	r3, [pc, #88]	; (8000218 <getKeyInputButton1+0x90>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	429a      	cmp	r2, r3
 80001c2:	d123      	bne.n	800020c <getKeyInputButton1+0x84>
		if (KeyReg3Button1 != KeyReg2Button1) {
 80001c4:	4b16      	ldr	r3, [pc, #88]	; (8000220 <getKeyInputButton1+0x98>)
 80001c6:	681a      	ldr	r2, [r3, #0]
 80001c8:	4b13      	ldr	r3, [pc, #76]	; (8000218 <getKeyInputButton1+0x90>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	429a      	cmp	r2, r3
 80001ce:	d00d      	beq.n	80001ec <getKeyInputButton1+0x64>
			KeyReg3Button1 = KeyReg2Button1;
 80001d0:	4b11      	ldr	r3, [pc, #68]	; (8000218 <getKeyInputButton1+0x90>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a12      	ldr	r2, [pc, #72]	; (8000220 <getKeyInputButton1+0x98>)
 80001d6:	6013      	str	r3, [r2, #0]
			if (KeyReg2Button1 == PRESSED_STATE) {
 80001d8:	4b0f      	ldr	r3, [pc, #60]	; (8000218 <getKeyInputButton1+0x90>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d115      	bne.n	800020c <getKeyInputButton1+0x84>
				// TODO
				subKeyProcessButton1();
 80001e0:	f7ff ffc6 	bl	8000170 <subKeyProcessButton1>
				TimerForKeyPressButton1 = 200;
 80001e4:	4b0f      	ldr	r3, [pc, #60]	; (8000224 <getKeyInputButton1+0x9c>)
 80001e6:	22c8      	movs	r2, #200	; 0xc8
 80001e8:	601a      	str	r2, [r3, #0]
					KeyReg3Button1 = NORMAL_STATE;
				}
			}
		}
	}
}
 80001ea:	e00f      	b.n	800020c <getKeyInputButton1+0x84>
			--TimerForKeyPressButton1;
 80001ec:	4b0d      	ldr	r3, [pc, #52]	; (8000224 <getKeyInputButton1+0x9c>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	3b01      	subs	r3, #1
 80001f2:	4a0c      	ldr	r2, [pc, #48]	; (8000224 <getKeyInputButton1+0x9c>)
 80001f4:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPressButton1 == 0) {
 80001f6:	4b0b      	ldr	r3, [pc, #44]	; (8000224 <getKeyInputButton1+0x9c>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d106      	bne.n	800020c <getKeyInputButton1+0x84>
				if (KeyReg2Button1 == PRESSED_STATE) {
 80001fe:	4b06      	ldr	r3, [pc, #24]	; (8000218 <getKeyInputButton1+0x90>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d102      	bne.n	800020c <getKeyInputButton1+0x84>
					KeyReg3Button1 = NORMAL_STATE;
 8000206:	4b06      	ldr	r3, [pc, #24]	; (8000220 <getKeyInputButton1+0x98>)
 8000208:	2201      	movs	r2, #1
 800020a:	601a      	str	r2, [r3, #0]
}
 800020c:	bf00      	nop
 800020e:	bd80      	pop	{r7, pc}
 8000210:	20000004 	.word	0x20000004
 8000214:	20000000 	.word	0x20000000
 8000218:	20000008 	.word	0x20000008
 800021c:	40010800 	.word	0x40010800
 8000220:	2000000c 	.word	0x2000000c
 8000224:	20000030 	.word	0x20000030

08000228 <isButton2Pressed>:

int isButton2Pressed() {
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	if(button2_flag == 1) {
 800022c:	4b06      	ldr	r3, [pc, #24]	; (8000248 <isButton2Pressed+0x20>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	2b01      	cmp	r3, #1
 8000232:	d104      	bne.n	800023e <isButton2Pressed+0x16>
		button2_flag = 0;
 8000234:	4b04      	ldr	r3, [pc, #16]	; (8000248 <isButton2Pressed+0x20>)
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
		return 1;
 800023a:	2301      	movs	r3, #1
 800023c:	e000      	b.n	8000240 <isButton2Pressed+0x18>
	}
	return 0;
 800023e:	2300      	movs	r3, #0
}
 8000240:	4618      	mov	r0, r3
 8000242:	46bd      	mov	sp, r7
 8000244:	bc80      	pop	{r7}
 8000246:	4770      	bx	lr
 8000248:	200000e4 	.word	0x200000e4

0800024c <subKeyProcessButton2>:

void subKeyProcessButton2(){
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
	button2_flag = 1;
 8000250:	4b03      	ldr	r3, [pc, #12]	; (8000260 <subKeyProcessButton2+0x14>)
 8000252:	2201      	movs	r2, #1
 8000254:	601a      	str	r2, [r3, #0]
}
 8000256:	bf00      	nop
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	200000e4 	.word	0x200000e4

08000264 <getKeyInputButton2>:

void getKeyInputButton2() {
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	KeyReg0Button2 = KeyReg1Button2;
 8000268:	4b20      	ldr	r3, [pc, #128]	; (80002ec <getKeyInputButton2+0x88>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a20      	ldr	r2, [pc, #128]	; (80002f0 <getKeyInputButton2+0x8c>)
 800026e:	6013      	str	r3, [r2, #0]
	KeyReg1Button2 = KeyReg2Button2;
 8000270:	4b20      	ldr	r3, [pc, #128]	; (80002f4 <getKeyInputButton2+0x90>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a1d      	ldr	r2, [pc, #116]	; (80002ec <getKeyInputButton2+0x88>)
 8000276:	6013      	str	r3, [r2, #0]
	KeyReg2Button2 = HAL_GPIO_ReadPin(BUTTON_TRAFFIC_2_GPIO_Port, BUTTON_TRAFFIC_2_Pin);
 8000278:	2110      	movs	r1, #16
 800027a:	481f      	ldr	r0, [pc, #124]	; (80002f8 <getKeyInputButton2+0x94>)
 800027c:	f001 ff06 	bl	800208c <HAL_GPIO_ReadPin>
 8000280:	4603      	mov	r3, r0
 8000282:	461a      	mov	r2, r3
 8000284:	4b1b      	ldr	r3, [pc, #108]	; (80002f4 <getKeyInputButton2+0x90>)
 8000286:	601a      	str	r2, [r3, #0]

	if ((KeyReg0Button2 == KeyReg1Button2) && (KeyReg1Button2 == KeyReg2Button2)) {
 8000288:	4b19      	ldr	r3, [pc, #100]	; (80002f0 <getKeyInputButton2+0x8c>)
 800028a:	681a      	ldr	r2, [r3, #0]
 800028c:	4b17      	ldr	r3, [pc, #92]	; (80002ec <getKeyInputButton2+0x88>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	429a      	cmp	r2, r3
 8000292:	d129      	bne.n	80002e8 <getKeyInputButton2+0x84>
 8000294:	4b15      	ldr	r3, [pc, #84]	; (80002ec <getKeyInputButton2+0x88>)
 8000296:	681a      	ldr	r2, [r3, #0]
 8000298:	4b16      	ldr	r3, [pc, #88]	; (80002f4 <getKeyInputButton2+0x90>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	429a      	cmp	r2, r3
 800029e:	d123      	bne.n	80002e8 <getKeyInputButton2+0x84>
		if (KeyReg3Button2 != KeyReg2Button2) {
 80002a0:	4b16      	ldr	r3, [pc, #88]	; (80002fc <getKeyInputButton2+0x98>)
 80002a2:	681a      	ldr	r2, [r3, #0]
 80002a4:	4b13      	ldr	r3, [pc, #76]	; (80002f4 <getKeyInputButton2+0x90>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d00d      	beq.n	80002c8 <getKeyInputButton2+0x64>
			KeyReg3Button2 = KeyReg2Button2;
 80002ac:	4b11      	ldr	r3, [pc, #68]	; (80002f4 <getKeyInputButton2+0x90>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a12      	ldr	r2, [pc, #72]	; (80002fc <getKeyInputButton2+0x98>)
 80002b2:	6013      	str	r3, [r2, #0]
			if (KeyReg2Button2 == PRESSED_STATE) {
 80002b4:	4b0f      	ldr	r3, [pc, #60]	; (80002f4 <getKeyInputButton2+0x90>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d115      	bne.n	80002e8 <getKeyInputButton2+0x84>
				// TODO
				subKeyProcessButton2();
 80002bc:	f7ff ffc6 	bl	800024c <subKeyProcessButton2>
				TimerForKeyPressButton2 = 200;
 80002c0:	4b0f      	ldr	r3, [pc, #60]	; (8000300 <getKeyInputButton2+0x9c>)
 80002c2:	22c8      	movs	r2, #200	; 0xc8
 80002c4:	601a      	str	r2, [r3, #0]
					KeyReg3Button2 = NORMAL_STATE;
				}
			}
		}
	}
}
 80002c6:	e00f      	b.n	80002e8 <getKeyInputButton2+0x84>
			--TimerForKeyPressButton2;
 80002c8:	4b0d      	ldr	r3, [pc, #52]	; (8000300 <getKeyInputButton2+0x9c>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	3b01      	subs	r3, #1
 80002ce:	4a0c      	ldr	r2, [pc, #48]	; (8000300 <getKeyInputButton2+0x9c>)
 80002d0:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPressButton2 == 0) {
 80002d2:	4b0b      	ldr	r3, [pc, #44]	; (8000300 <getKeyInputButton2+0x9c>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d106      	bne.n	80002e8 <getKeyInputButton2+0x84>
				if (KeyReg2Button2 == PRESSED_STATE) {
 80002da:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <getKeyInputButton2+0x90>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d102      	bne.n	80002e8 <getKeyInputButton2+0x84>
					KeyReg3Button2 = NORMAL_STATE;
 80002e2:	4b06      	ldr	r3, [pc, #24]	; (80002fc <getKeyInputButton2+0x98>)
 80002e4:	2201      	movs	r2, #1
 80002e6:	601a      	str	r2, [r3, #0]
}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	20000014 	.word	0x20000014
 80002f0:	20000010 	.word	0x20000010
 80002f4:	20000018 	.word	0x20000018
 80002f8:	40010800 	.word	0x40010800
 80002fc:	2000001c 	.word	0x2000001c
 8000300:	20000034 	.word	0x20000034

08000304 <isButton3Pressed>:

int isButton3Pressed() {
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
	if(button3_flag == 1) {
 8000308:	4b06      	ldr	r3, [pc, #24]	; (8000324 <isButton3Pressed+0x20>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	2b01      	cmp	r3, #1
 800030e:	d104      	bne.n	800031a <isButton3Pressed+0x16>
		button3_flag = 0;
 8000310:	4b04      	ldr	r3, [pc, #16]	; (8000324 <isButton3Pressed+0x20>)
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
		return 1;
 8000316:	2301      	movs	r3, #1
 8000318:	e000      	b.n	800031c <isButton3Pressed+0x18>
	}
	return 0;
 800031a:	2300      	movs	r3, #0
}
 800031c:	4618      	mov	r0, r3
 800031e:	46bd      	mov	sp, r7
 8000320:	bc80      	pop	{r7}
 8000322:	4770      	bx	lr
 8000324:	200000e8 	.word	0x200000e8

08000328 <subKeyProcessButton3>:

void subKeyProcessButton3(){
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
	button3_flag = 1;
 800032c:	4b03      	ldr	r3, [pc, #12]	; (800033c <subKeyProcessButton3+0x14>)
 800032e:	2201      	movs	r2, #1
 8000330:	601a      	str	r2, [r3, #0]
}
 8000332:	bf00      	nop
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	200000e8 	.word	0x200000e8

08000340 <getKeyInputButton3>:

void getKeyInputButton3() {
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	KeyReg0Button3 = KeyReg1Button3;
 8000344:	4b20      	ldr	r3, [pc, #128]	; (80003c8 <getKeyInputButton3+0x88>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a20      	ldr	r2, [pc, #128]	; (80003cc <getKeyInputButton3+0x8c>)
 800034a:	6013      	str	r3, [r2, #0]
	KeyReg1Button3 = KeyReg2Button3;
 800034c:	4b20      	ldr	r3, [pc, #128]	; (80003d0 <getKeyInputButton3+0x90>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a1d      	ldr	r2, [pc, #116]	; (80003c8 <getKeyInputButton3+0x88>)
 8000352:	6013      	str	r3, [r2, #0]
	KeyReg2Button3 = HAL_GPIO_ReadPin(BUTTON_TRAFFIC_3_GPIO_Port, BUTTON_TRAFFIC_3_Pin);
 8000354:	2101      	movs	r1, #1
 8000356:	481f      	ldr	r0, [pc, #124]	; (80003d4 <getKeyInputButton3+0x94>)
 8000358:	f001 fe98 	bl	800208c <HAL_GPIO_ReadPin>
 800035c:	4603      	mov	r3, r0
 800035e:	461a      	mov	r2, r3
 8000360:	4b1b      	ldr	r3, [pc, #108]	; (80003d0 <getKeyInputButton3+0x90>)
 8000362:	601a      	str	r2, [r3, #0]

	if ((KeyReg0Button3 == KeyReg1Button3) && (KeyReg1Button3 == KeyReg2Button3)) {
 8000364:	4b19      	ldr	r3, [pc, #100]	; (80003cc <getKeyInputButton3+0x8c>)
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <getKeyInputButton3+0x88>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	429a      	cmp	r2, r3
 800036e:	d129      	bne.n	80003c4 <getKeyInputButton3+0x84>
 8000370:	4b15      	ldr	r3, [pc, #84]	; (80003c8 <getKeyInputButton3+0x88>)
 8000372:	681a      	ldr	r2, [r3, #0]
 8000374:	4b16      	ldr	r3, [pc, #88]	; (80003d0 <getKeyInputButton3+0x90>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	429a      	cmp	r2, r3
 800037a:	d123      	bne.n	80003c4 <getKeyInputButton3+0x84>
		if (KeyReg3Button3 != KeyReg2Button3) {
 800037c:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <getKeyInputButton3+0x98>)
 800037e:	681a      	ldr	r2, [r3, #0]
 8000380:	4b13      	ldr	r3, [pc, #76]	; (80003d0 <getKeyInputButton3+0x90>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	429a      	cmp	r2, r3
 8000386:	d00d      	beq.n	80003a4 <getKeyInputButton3+0x64>
			KeyReg3Button3 = KeyReg2Button3;
 8000388:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <getKeyInputButton3+0x90>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a12      	ldr	r2, [pc, #72]	; (80003d8 <getKeyInputButton3+0x98>)
 800038e:	6013      	str	r3, [r2, #0]
			if (KeyReg2Button3 == PRESSED_STATE) {
 8000390:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <getKeyInputButton3+0x90>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d115      	bne.n	80003c4 <getKeyInputButton3+0x84>
				// TODO
				subKeyProcessButton3();
 8000398:	f7ff ffc6 	bl	8000328 <subKeyProcessButton3>
				TimerForKeyPressButton3 = 200;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <getKeyInputButton3+0x9c>)
 800039e:	22c8      	movs	r2, #200	; 0xc8
 80003a0:	601a      	str	r2, [r3, #0]
					KeyReg3Button3 = NORMAL_STATE;
				}
			}
		}
	}
}
 80003a2:	e00f      	b.n	80003c4 <getKeyInputButton3+0x84>
			--TimerForKeyPressButton3;
 80003a4:	4b0d      	ldr	r3, [pc, #52]	; (80003dc <getKeyInputButton3+0x9c>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	3b01      	subs	r3, #1
 80003aa:	4a0c      	ldr	r2, [pc, #48]	; (80003dc <getKeyInputButton3+0x9c>)
 80003ac:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPressButton3 == 0) {
 80003ae:	4b0b      	ldr	r3, [pc, #44]	; (80003dc <getKeyInputButton3+0x9c>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d106      	bne.n	80003c4 <getKeyInputButton3+0x84>
				if (KeyReg2Button3 == PRESSED_STATE) {
 80003b6:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <getKeyInputButton3+0x90>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d102      	bne.n	80003c4 <getKeyInputButton3+0x84>
					KeyReg3Button3 = NORMAL_STATE;
 80003be:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <getKeyInputButton3+0x98>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	601a      	str	r2, [r3, #0]
}
 80003c4:	bf00      	nop
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	20000024 	.word	0x20000024
 80003cc:	20000020 	.word	0x20000020
 80003d0:	20000028 	.word	0x20000028
 80003d4:	40010c00 	.word	0x40010c00
 80003d8:	2000002c 	.word	0x2000002c
 80003dc:	20000038 	.word	0x20000038

080003e0 <fsm_automatic_run>:
 */
#include <fsm_automatic.h>

int color = INIT;

void fsm_automatic_run() {
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af02      	add	r7, sp, #8
	switch (color) {
 80003e6:	4bb4      	ldr	r3, [pc, #720]	; (80006b8 <fsm_automatic_run+0x2d8>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	3b01      	subs	r3, #1
 80003ec:	2b03      	cmp	r3, #3
 80003ee:	f200 8159 	bhi.w	80006a4 <fsm_automatic_run+0x2c4>
 80003f2:	a201      	add	r2, pc, #4	; (adr r2, 80003f8 <fsm_automatic_run+0x18>)
 80003f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f8:	08000409 	.word	0x08000409
 80003fc:	08000471 	.word	0x08000471
 8000400:	08000573 	.word	0x08000573
 8000404:	08000603 	.word	0x08000603
		case INIT:
			setColor(GPIOC, GPIOB, LED_TRAFFIC_VERTICAL_1A_Pin, LED_TRAFFIC_VERTICAL_1B_Pin, OFF, OFF);
 8000408:	2300      	movs	r3, #0
 800040a:	9301      	str	r3, [sp, #4]
 800040c:	2300      	movs	r3, #0
 800040e:	9300      	str	r3, [sp, #0]
 8000410:	2340      	movs	r3, #64	; 0x40
 8000412:	2280      	movs	r2, #128	; 0x80
 8000414:	49a9      	ldr	r1, [pc, #676]	; (80006bc <fsm_automatic_run+0x2dc>)
 8000416:	48aa      	ldr	r0, [pc, #680]	; (80006c0 <fsm_automatic_run+0x2e0>)
 8000418:	f001 fa8a 	bl	8001930 <setColor>
			setColor(GPIOA, GPIOA, LED_TRAFFIC_VERTICAL_2A_Pin, LED_TRAFFIC_VERTICAL_2B_Pin, OFF, OFF);
 800041c:	2300      	movs	r3, #0
 800041e:	9301      	str	r3, [sp, #4]
 8000420:	2300      	movs	r3, #0
 8000422:	9300      	str	r3, [sp, #0]
 8000424:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000428:	f44f 7280 	mov.w	r2, #256	; 0x100
 800042c:	49a5      	ldr	r1, [pc, #660]	; (80006c4 <fsm_automatic_run+0x2e4>)
 800042e:	48a5      	ldr	r0, [pc, #660]	; (80006c4 <fsm_automatic_run+0x2e4>)
 8000430:	f001 fa7e 	bl	8001930 <setColor>
			setColor(GPIOB, GPIOB, LED_TRAFFIC_HORIZONTAL_1A_Pin, LED_TRAFFIC_HORIZONTAL_1B_Pin, OFF, OFF);
 8000434:	2300      	movs	r3, #0
 8000436:	9301      	str	r3, [sp, #4]
 8000438:	2300      	movs	r3, #0
 800043a:	9300      	str	r3, [sp, #0]
 800043c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000440:	2210      	movs	r2, #16
 8000442:	499e      	ldr	r1, [pc, #632]	; (80006bc <fsm_automatic_run+0x2dc>)
 8000444:	489d      	ldr	r0, [pc, #628]	; (80006bc <fsm_automatic_run+0x2dc>)
 8000446:	f001 fa73 	bl	8001930 <setColor>
			setColor(GPIOB, GPIOB, LED_TRAFFIC_HORIZONTAL_2A_Pin, LED_TRAFFIC_HORIZONTAL_2B_Pin, OFF, OFF);
 800044a:	2300      	movs	r3, #0
 800044c:	9301      	str	r3, [sp, #4]
 800044e:	2300      	movs	r3, #0
 8000450:	9300      	str	r3, [sp, #0]
 8000452:	2320      	movs	r3, #32
 8000454:	2208      	movs	r2, #8
 8000456:	4999      	ldr	r1, [pc, #612]	; (80006bc <fsm_automatic_run+0x2dc>)
 8000458:	4898      	ldr	r0, [pc, #608]	; (80006bc <fsm_automatic_run+0x2dc>)
 800045a:	f001 fa69 	bl	8001930 <setColor>

			color = RED;
 800045e:	4b96      	ldr	r3, [pc, #600]	; (80006b8 <fsm_automatic_run+0x2d8>)
 8000460:	2202      	movs	r2, #2
 8000462:	601a      	str	r2, [r3, #0]
			setTimer1(red_duration);
 8000464:	4b98      	ldr	r3, [pc, #608]	; (80006c8 <fsm_automatic_run+0x2e8>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4618      	mov	r0, r3
 800046a:	f001 f837 	bl	80014dc <setTimer1>
			break;
 800046e:	e120      	b.n	80006b2 <fsm_automatic_run+0x2d2>
		case RED:
			display_time();
 8000470:	f000 fd70 	bl	8000f54 <display_time>
			setColor(GPIOC, GPIOB, LED_TRAFFIC_VERTICAL_1A_Pin, LED_TRAFFIC_VERTICAL_1B_Pin, ON, ON);
 8000474:	2301      	movs	r3, #1
 8000476:	9301      	str	r3, [sp, #4]
 8000478:	2301      	movs	r3, #1
 800047a:	9300      	str	r3, [sp, #0]
 800047c:	2340      	movs	r3, #64	; 0x40
 800047e:	2280      	movs	r2, #128	; 0x80
 8000480:	498e      	ldr	r1, [pc, #568]	; (80006bc <fsm_automatic_run+0x2dc>)
 8000482:	488f      	ldr	r0, [pc, #572]	; (80006c0 <fsm_automatic_run+0x2e0>)
 8000484:	f001 fa54 	bl	8001930 <setColor>
			setColor(GPIOA, GPIOA, LED_TRAFFIC_VERTICAL_2A_Pin, LED_TRAFFIC_VERTICAL_2B_Pin, ON, ON);
 8000488:	2301      	movs	r3, #1
 800048a:	9301      	str	r3, [sp, #4]
 800048c:	2301      	movs	r3, #1
 800048e:	9300      	str	r3, [sp, #0]
 8000490:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000494:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000498:	498a      	ldr	r1, [pc, #552]	; (80006c4 <fsm_automatic_run+0x2e4>)
 800049a:	488a      	ldr	r0, [pc, #552]	; (80006c4 <fsm_automatic_run+0x2e4>)
 800049c:	f001 fa48 	bl	8001930 <setColor>

			if (isTimer1Paused(red_duration - green_duration)) {
 80004a0:	4b89      	ldr	r3, [pc, #548]	; (80006c8 <fsm_automatic_run+0x2e8>)
 80004a2:	681a      	ldr	r2, [r3, #0]
 80004a4:	4b89      	ldr	r3, [pc, #548]	; (80006cc <fsm_automatic_run+0x2ec>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	1ad3      	subs	r3, r2, r3
 80004aa:	4618      	mov	r0, r3
 80004ac:	f001 f864 	bl	8001578 <isTimer1Paused>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d023      	beq.n	80004fe <fsm_automatic_run+0x11e>
				display_num('B', (timer1_counter + 1000)/1000);
 80004b6:	4b86      	ldr	r3, [pc, #536]	; (80006d0 <fsm_automatic_run+0x2f0>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80004be:	4a85      	ldr	r2, [pc, #532]	; (80006d4 <fsm_automatic_run+0x2f4>)
 80004c0:	fb82 1203 	smull	r1, r2, r2, r3
 80004c4:	1192      	asrs	r2, r2, #6
 80004c6:	17db      	asrs	r3, r3, #31
 80004c8:	1ad3      	subs	r3, r2, r3
 80004ca:	4619      	mov	r1, r3
 80004cc:	2042      	movs	r0, #66	; 0x42
 80004ce:	f000 fced 	bl	8000eac <display_num>
				setColor(GPIOB, GPIOB, LED_TRAFFIC_HORIZONTAL_1A_Pin, LED_TRAFFIC_HORIZONTAL_1B_Pin, OFF, ON);
 80004d2:	2301      	movs	r3, #1
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	2300      	movs	r3, #0
 80004d8:	9300      	str	r3, [sp, #0]
 80004da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004de:	2210      	movs	r2, #16
 80004e0:	4976      	ldr	r1, [pc, #472]	; (80006bc <fsm_automatic_run+0x2dc>)
 80004e2:	4876      	ldr	r0, [pc, #472]	; (80006bc <fsm_automatic_run+0x2dc>)
 80004e4:	f001 fa24 	bl	8001930 <setColor>
				setColor(GPIOB, GPIOB, LED_TRAFFIC_HORIZONTAL_2A_Pin, LED_TRAFFIC_HORIZONTAL_2B_Pin, OFF, ON);
 80004e8:	2301      	movs	r3, #1
 80004ea:	9301      	str	r3, [sp, #4]
 80004ec:	2300      	movs	r3, #0
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	2320      	movs	r3, #32
 80004f2:	2208      	movs	r2, #8
 80004f4:	4971      	ldr	r1, [pc, #452]	; (80006bc <fsm_automatic_run+0x2dc>)
 80004f6:	4871      	ldr	r0, [pc, #452]	; (80006bc <fsm_automatic_run+0x2dc>)
 80004f8:	f001 fa1a 	bl	8001930 <setColor>
 80004fc:	e02b      	b.n	8000556 <fsm_automatic_run+0x176>
			}
			else {
				display_num('B', ((timer1_counter + 1000)/1000 - amber_duration/1000));
 80004fe:	4b74      	ldr	r3, [pc, #464]	; (80006d0 <fsm_automatic_run+0x2f0>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000506:	4a73      	ldr	r2, [pc, #460]	; (80006d4 <fsm_automatic_run+0x2f4>)
 8000508:	fb82 1203 	smull	r1, r2, r2, r3
 800050c:	1192      	asrs	r2, r2, #6
 800050e:	17db      	asrs	r3, r3, #31
 8000510:	1ad2      	subs	r2, r2, r3
 8000512:	4b71      	ldr	r3, [pc, #452]	; (80006d8 <fsm_automatic_run+0x2f8>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	496f      	ldr	r1, [pc, #444]	; (80006d4 <fsm_automatic_run+0x2f4>)
 8000518:	fb81 0103 	smull	r0, r1, r1, r3
 800051c:	1189      	asrs	r1, r1, #6
 800051e:	17db      	asrs	r3, r3, #31
 8000520:	1a5b      	subs	r3, r3, r1
 8000522:	4413      	add	r3, r2
 8000524:	4619      	mov	r1, r3
 8000526:	2042      	movs	r0, #66	; 0x42
 8000528:	f000 fcc0 	bl	8000eac <display_num>
				setColor(GPIOB, GPIOB, LED_TRAFFIC_HORIZONTAL_1A_Pin, LED_TRAFFIC_HORIZONTAL_1B_Pin, ON, OFF);
 800052c:	2300      	movs	r3, #0
 800052e:	9301      	str	r3, [sp, #4]
 8000530:	2301      	movs	r3, #1
 8000532:	9300      	str	r3, [sp, #0]
 8000534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000538:	2210      	movs	r2, #16
 800053a:	4960      	ldr	r1, [pc, #384]	; (80006bc <fsm_automatic_run+0x2dc>)
 800053c:	485f      	ldr	r0, [pc, #380]	; (80006bc <fsm_automatic_run+0x2dc>)
 800053e:	f001 f9f7 	bl	8001930 <setColor>
				setColor(GPIOB, GPIOB, LED_TRAFFIC_HORIZONTAL_2A_Pin, LED_TRAFFIC_HORIZONTAL_2B_Pin, ON, OFF);
 8000542:	2300      	movs	r3, #0
 8000544:	9301      	str	r3, [sp, #4]
 8000546:	2301      	movs	r3, #1
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2320      	movs	r3, #32
 800054c:	2208      	movs	r2, #8
 800054e:	495b      	ldr	r1, [pc, #364]	; (80006bc <fsm_automatic_run+0x2dc>)
 8000550:	485a      	ldr	r0, [pc, #360]	; (80006bc <fsm_automatic_run+0x2dc>)
 8000552:	f001 f9ed 	bl	8001930 <setColor>
			}

			if (timer1_flag == 1) {
 8000556:	4b61      	ldr	r3, [pc, #388]	; (80006dc <fsm_automatic_run+0x2fc>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2b01      	cmp	r3, #1
 800055c:	f040 80a4 	bne.w	80006a8 <fsm_automatic_run+0x2c8>
				color = GREEN;
 8000560:	4b55      	ldr	r3, [pc, #340]	; (80006b8 <fsm_automatic_run+0x2d8>)
 8000562:	2204      	movs	r2, #4
 8000564:	601a      	str	r2, [r3, #0]
				setTimer1(green_duration);
 8000566:	4b59      	ldr	r3, [pc, #356]	; (80006cc <fsm_automatic_run+0x2ec>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4618      	mov	r0, r3
 800056c:	f000 ffb6 	bl	80014dc <setTimer1>
			}
			break;
 8000570:	e09a      	b.n	80006a8 <fsm_automatic_run+0x2c8>
		case AMBER:
			display_time();
 8000572:	f000 fcef 	bl	8000f54 <display_time>
			setColor(GPIOC, GPIOB, LED_TRAFFIC_VERTICAL_1A_Pin, LED_TRAFFIC_VERTICAL_1B_Pin, OFF, ON);
 8000576:	2301      	movs	r3, #1
 8000578:	9301      	str	r3, [sp, #4]
 800057a:	2300      	movs	r3, #0
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	2340      	movs	r3, #64	; 0x40
 8000580:	2280      	movs	r2, #128	; 0x80
 8000582:	494e      	ldr	r1, [pc, #312]	; (80006bc <fsm_automatic_run+0x2dc>)
 8000584:	484e      	ldr	r0, [pc, #312]	; (80006c0 <fsm_automatic_run+0x2e0>)
 8000586:	f001 f9d3 	bl	8001930 <setColor>
			setColor(GPIOA, GPIOA, LED_TRAFFIC_VERTICAL_2A_Pin, LED_TRAFFIC_VERTICAL_2B_Pin, OFF, ON);
 800058a:	2301      	movs	r3, #1
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2300      	movs	r3, #0
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000596:	f44f 7280 	mov.w	r2, #256	; 0x100
 800059a:	494a      	ldr	r1, [pc, #296]	; (80006c4 <fsm_automatic_run+0x2e4>)
 800059c:	4849      	ldr	r0, [pc, #292]	; (80006c4 <fsm_automatic_run+0x2e4>)
 800059e:	f001 f9c7 	bl	8001930 <setColor>
			display_num('B', (timer1_counter + 1000)/1000);
 80005a2:	4b4b      	ldr	r3, [pc, #300]	; (80006d0 <fsm_automatic_run+0x2f0>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80005aa:	4a4a      	ldr	r2, [pc, #296]	; (80006d4 <fsm_automatic_run+0x2f4>)
 80005ac:	fb82 1203 	smull	r1, r2, r2, r3
 80005b0:	1192      	asrs	r2, r2, #6
 80005b2:	17db      	asrs	r3, r3, #31
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	4619      	mov	r1, r3
 80005b8:	2042      	movs	r0, #66	; 0x42
 80005ba:	f000 fc77 	bl	8000eac <display_num>

			setColor(GPIOB, GPIOB, LED_TRAFFIC_HORIZONTAL_1A_Pin, LED_TRAFFIC_HORIZONTAL_1B_Pin, ON, ON);
 80005be:	2301      	movs	r3, #1
 80005c0:	9301      	str	r3, [sp, #4]
 80005c2:	2301      	movs	r3, #1
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ca:	2210      	movs	r2, #16
 80005cc:	493b      	ldr	r1, [pc, #236]	; (80006bc <fsm_automatic_run+0x2dc>)
 80005ce:	483b      	ldr	r0, [pc, #236]	; (80006bc <fsm_automatic_run+0x2dc>)
 80005d0:	f001 f9ae 	bl	8001930 <setColor>
			setColor(GPIOB, GPIOB, LED_TRAFFIC_HORIZONTAL_2A_Pin, LED_TRAFFIC_HORIZONTAL_2B_Pin, ON, ON);
 80005d4:	2301      	movs	r3, #1
 80005d6:	9301      	str	r3, [sp, #4]
 80005d8:	2301      	movs	r3, #1
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2320      	movs	r3, #32
 80005de:	2208      	movs	r2, #8
 80005e0:	4936      	ldr	r1, [pc, #216]	; (80006bc <fsm_automatic_run+0x2dc>)
 80005e2:	4836      	ldr	r0, [pc, #216]	; (80006bc <fsm_automatic_run+0x2dc>)
 80005e4:	f001 f9a4 	bl	8001930 <setColor>

			if (timer1_flag == 1) {
 80005e8:	4b3c      	ldr	r3, [pc, #240]	; (80006dc <fsm_automatic_run+0x2fc>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d15d      	bne.n	80006ac <fsm_automatic_run+0x2cc>
				color = RED;
 80005f0:	4b31      	ldr	r3, [pc, #196]	; (80006b8 <fsm_automatic_run+0x2d8>)
 80005f2:	2202      	movs	r2, #2
 80005f4:	601a      	str	r2, [r3, #0]
				setTimer1(red_duration);
 80005f6:	4b34      	ldr	r3, [pc, #208]	; (80006c8 <fsm_automatic_run+0x2e8>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 ff6e 	bl	80014dc <setTimer1>
			}
			break;
 8000600:	e054      	b.n	80006ac <fsm_automatic_run+0x2cc>
		case GREEN:
			display_time();
 8000602:	f000 fca7 	bl	8000f54 <display_time>
			setColor(GPIOC, GPIOB, LED_TRAFFIC_VERTICAL_1A_Pin, LED_TRAFFIC_VERTICAL_1B_Pin, ON, OFF);
 8000606:	2300      	movs	r3, #0
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	2301      	movs	r3, #1
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2340      	movs	r3, #64	; 0x40
 8000610:	2280      	movs	r2, #128	; 0x80
 8000612:	492a      	ldr	r1, [pc, #168]	; (80006bc <fsm_automatic_run+0x2dc>)
 8000614:	482a      	ldr	r0, [pc, #168]	; (80006c0 <fsm_automatic_run+0x2e0>)
 8000616:	f001 f98b 	bl	8001930 <setColor>
			setColor(GPIOA, GPIOA, LED_TRAFFIC_VERTICAL_2A_Pin, LED_TRAFFIC_VERTICAL_2B_Pin, ON, OFF);
 800061a:	2300      	movs	r3, #0
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	2301      	movs	r3, #1
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000626:	f44f 7280 	mov.w	r2, #256	; 0x100
 800062a:	4926      	ldr	r1, [pc, #152]	; (80006c4 <fsm_automatic_run+0x2e4>)
 800062c:	4825      	ldr	r0, [pc, #148]	; (80006c4 <fsm_automatic_run+0x2e4>)
 800062e:	f001 f97f 	bl	8001930 <setColor>

			display_num('B', ((timer1_counter + 1000)/1000 + amber_duration/1000));
 8000632:	4b27      	ldr	r3, [pc, #156]	; (80006d0 <fsm_automatic_run+0x2f0>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800063a:	4a26      	ldr	r2, [pc, #152]	; (80006d4 <fsm_automatic_run+0x2f4>)
 800063c:	fb82 1203 	smull	r1, r2, r2, r3
 8000640:	1192      	asrs	r2, r2, #6
 8000642:	17db      	asrs	r3, r3, #31
 8000644:	1ad2      	subs	r2, r2, r3
 8000646:	4b24      	ldr	r3, [pc, #144]	; (80006d8 <fsm_automatic_run+0x2f8>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4922      	ldr	r1, [pc, #136]	; (80006d4 <fsm_automatic_run+0x2f4>)
 800064c:	fb81 0103 	smull	r0, r1, r1, r3
 8000650:	1189      	asrs	r1, r1, #6
 8000652:	17db      	asrs	r3, r3, #31
 8000654:	1acb      	subs	r3, r1, r3
 8000656:	4413      	add	r3, r2
 8000658:	4619      	mov	r1, r3
 800065a:	2042      	movs	r0, #66	; 0x42
 800065c:	f000 fc26 	bl	8000eac <display_num>

			setColor(GPIOB, GPIOB, LED_TRAFFIC_HORIZONTAL_1A_Pin, LED_TRAFFIC_HORIZONTAL_1B_Pin, ON, ON);
 8000660:	2301      	movs	r3, #1
 8000662:	9301      	str	r3, [sp, #4]
 8000664:	2301      	movs	r3, #1
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800066c:	2210      	movs	r2, #16
 800066e:	4913      	ldr	r1, [pc, #76]	; (80006bc <fsm_automatic_run+0x2dc>)
 8000670:	4812      	ldr	r0, [pc, #72]	; (80006bc <fsm_automatic_run+0x2dc>)
 8000672:	f001 f95d 	bl	8001930 <setColor>
			setColor(GPIOB, GPIOB, LED_TRAFFIC_HORIZONTAL_2A_Pin, LED_TRAFFIC_HORIZONTAL_2B_Pin, ON, ON);
 8000676:	2301      	movs	r3, #1
 8000678:	9301      	str	r3, [sp, #4]
 800067a:	2301      	movs	r3, #1
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2320      	movs	r3, #32
 8000680:	2208      	movs	r2, #8
 8000682:	490e      	ldr	r1, [pc, #56]	; (80006bc <fsm_automatic_run+0x2dc>)
 8000684:	480d      	ldr	r0, [pc, #52]	; (80006bc <fsm_automatic_run+0x2dc>)
 8000686:	f001 f953 	bl	8001930 <setColor>

			if (timer1_flag == 1) {
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <fsm_automatic_run+0x2fc>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d10e      	bne.n	80006b0 <fsm_automatic_run+0x2d0>
				color = AMBER;
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <fsm_automatic_run+0x2d8>)
 8000694:	2203      	movs	r2, #3
 8000696:	601a      	str	r2, [r3, #0]
				setTimer1(amber_duration);
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <fsm_automatic_run+0x2f8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4618      	mov	r0, r3
 800069e:	f000 ff1d 	bl	80014dc <setTimer1>
			}
			break;
 80006a2:	e005      	b.n	80006b0 <fsm_automatic_run+0x2d0>
		default:
			break;
 80006a4:	bf00      	nop
 80006a6:	e004      	b.n	80006b2 <fsm_automatic_run+0x2d2>
			break;
 80006a8:	bf00      	nop
 80006aa:	e002      	b.n	80006b2 <fsm_automatic_run+0x2d2>
			break;
 80006ac:	bf00      	nop
 80006ae:	e000      	b.n	80006b2 <fsm_automatic_run+0x2d2>
			break;
 80006b0:	bf00      	nop
	}
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	2000003c 	.word	0x2000003c
 80006bc:	40010c00 	.word	0x40010c00
 80006c0:	40011000 	.word	0x40011000
 80006c4:	40010800 	.word	0x40010800
 80006c8:	20000044 	.word	0x20000044
 80006cc:	2000004c 	.word	0x2000004c
 80006d0:	20000100 	.word	0x20000100
 80006d4:	10624dd3 	.word	0x10624dd3
 80006d8:	20000048 	.word	0x20000048
 80006dc:	20000104 	.word	0x20000104

080006e0 <fsm_manual_run>:
int amber_duration_temp = 0;
int green_duration = 3000;
int green_duration_temp = 0;
char str[16];

void fsm_manual_run() {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af02      	add	r7, sp, #8
	switch(status) {
 80006e6:	4b97      	ldr	r3, [pc, #604]	; (8000944 <fsm_manual_run+0x264>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b05      	cmp	r3, #5
 80006ec:	f200 82c1 	bhi.w	8000c72 <fsm_manual_run+0x592>
 80006f0:	a201      	add	r2, pc, #4	; (adr r2, 80006f8 <fsm_manual_run+0x18>)
 80006f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f6:	bf00      	nop
 80006f8:	08000729 	.word	0x08000729
 80006fc:	08000711 	.word	0x08000711
 8000700:	080007b5 	.word	0x080007b5
 8000704:	080008f9 	.word	0x080008f9
 8000708:	08000a83 	.word	0x08000a83
 800070c:	08000bc5 	.word	0x08000bc5
		case NORMAL:
			fsm_automatic_run();
 8000710:	f7ff fe66 	bl	80003e0 <fsm_automatic_run>

			if (isButton1Pressed()) {
 8000714:	f7ff fd1a 	bl	800014c <isButton1Pressed>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	f000 82d6 	beq.w	8000ccc <fsm_manual_run+0x5ec>
				status = INITIAL;
 8000720:	4b88      	ldr	r3, [pc, #544]	; (8000944 <fsm_manual_run+0x264>)
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
			}
			break;
 8000726:	e2d1      	b.n	8000ccc <fsm_manual_run+0x5ec>
		case INITIAL:
			setColor(GPIOC, GPIOB, LED_TRAFFIC_VERTICAL_1A_Pin, LED_TRAFFIC_VERTICAL_1B_Pin, OFF, OFF);
 8000728:	2300      	movs	r3, #0
 800072a:	9301      	str	r3, [sp, #4]
 800072c:	2300      	movs	r3, #0
 800072e:	9300      	str	r3, [sp, #0]
 8000730:	2340      	movs	r3, #64	; 0x40
 8000732:	2280      	movs	r2, #128	; 0x80
 8000734:	4984      	ldr	r1, [pc, #528]	; (8000948 <fsm_manual_run+0x268>)
 8000736:	4885      	ldr	r0, [pc, #532]	; (800094c <fsm_manual_run+0x26c>)
 8000738:	f001 f8fa 	bl	8001930 <setColor>
			setColor(GPIOA, GPIOA, LED_TRAFFIC_VERTICAL_2A_Pin, LED_TRAFFIC_VERTICAL_2B_Pin, OFF, OFF);
 800073c:	2300      	movs	r3, #0
 800073e:	9301      	str	r3, [sp, #4]
 8000740:	2300      	movs	r3, #0
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000748:	f44f 7280 	mov.w	r2, #256	; 0x100
 800074c:	4980      	ldr	r1, [pc, #512]	; (8000950 <fsm_manual_run+0x270>)
 800074e:	4880      	ldr	r0, [pc, #512]	; (8000950 <fsm_manual_run+0x270>)
 8000750:	f001 f8ee 	bl	8001930 <setColor>
			setColor(GPIOB, GPIOB, LED_TRAFFIC_HORIZONTAL_1A_Pin, LED_TRAFFIC_HORIZONTAL_1B_Pin, OFF, OFF);
 8000754:	2300      	movs	r3, #0
 8000756:	9301      	str	r3, [sp, #4]
 8000758:	2300      	movs	r3, #0
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000760:	2210      	movs	r2, #16
 8000762:	4979      	ldr	r1, [pc, #484]	; (8000948 <fsm_manual_run+0x268>)
 8000764:	4878      	ldr	r0, [pc, #480]	; (8000948 <fsm_manual_run+0x268>)
 8000766:	f001 f8e3 	bl	8001930 <setColor>
			setColor(GPIOB, GPIOB, LED_TRAFFIC_HORIZONTAL_2A_Pin, LED_TRAFFIC_HORIZONTAL_2B_Pin, OFF, OFF);
 800076a:	2300      	movs	r3, #0
 800076c:	9301      	str	r3, [sp, #4]
 800076e:	2300      	movs	r3, #0
 8000770:	9300      	str	r3, [sp, #0]
 8000772:	2320      	movs	r3, #32
 8000774:	2208      	movs	r2, #8
 8000776:	4974      	ldr	r1, [pc, #464]	; (8000948 <fsm_manual_run+0x268>)
 8000778:	4873      	ldr	r0, [pc, #460]	; (8000948 <fsm_manual_run+0x268>)
 800077a:	f001 f8d9 	bl	8001930 <setColor>

			red_duration_temp = red_duration;
 800077e:	4b75      	ldr	r3, [pc, #468]	; (8000954 <fsm_manual_run+0x274>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a75      	ldr	r2, [pc, #468]	; (8000958 <fsm_manual_run+0x278>)
 8000784:	6013      	str	r3, [r2, #0]
			green_duration_temp = green_duration;
 8000786:	4b75      	ldr	r3, [pc, #468]	; (800095c <fsm_manual_run+0x27c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a75      	ldr	r2, [pc, #468]	; (8000960 <fsm_manual_run+0x280>)
 800078c:	6013      	str	r3, [r2, #0]
			amber_duration_temp = amber_duration;
 800078e:	4b75      	ldr	r3, [pc, #468]	; (8000964 <fsm_manual_run+0x284>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a75      	ldr	r2, [pc, #468]	; (8000968 <fsm_manual_run+0x288>)
 8000794:	6013      	str	r3, [r2, #0]

			lcd_clear_display();
 8000796:	f000 fb60 	bl	8000e5a <lcd_clear_display>
			status = MODIFY_RED;
 800079a:	4b6a      	ldr	r3, [pc, #424]	; (8000944 <fsm_manual_run+0x264>)
 800079c:	2202      	movs	r2, #2
 800079e:	601a      	str	r2, [r3, #0]
			setTimer3(250);
 80007a0:	20fa      	movs	r0, #250	; 0xfa
 80007a2:	f000 fecf 	bl	8001544 <setTimer3>
			setTimer2(147);
 80007a6:	2093      	movs	r0, #147	; 0x93
 80007a8:	f000 feb2 	bl	8001510 <setTimer2>
			setTimer1(153);
 80007ac:	2099      	movs	r0, #153	; 0x99
 80007ae:	f000 fe95 	bl	80014dc <setTimer1>
			break;
 80007b2:	e294      	b.n	8000cde <fsm_manual_run+0x5fe>
		case MODIFY_RED:
			if (timer1_flag == 1) {
 80007b4:	4b6d      	ldr	r3, [pc, #436]	; (800096c <fsm_manual_run+0x28c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d138      	bne.n	800082e <fsm_manual_run+0x14e>
				setTimer1(153);
 80007bc:	2099      	movs	r0, #153	; 0x99
 80007be:	f000 fe8d 	bl	80014dc <setTimer1>
				lcd_goto_XY(1, 0);
 80007c2:	2100      	movs	r1, #0
 80007c4:	2001      	movs	r0, #1
 80007c6:	f000 fb4f 	bl	8000e68 <lcd_goto_XY>
				lcd_send_string("Mod: MOD RED");
 80007ca:	4869      	ldr	r0, [pc, #420]	; (8000970 <fsm_manual_run+0x290>)
 80007cc:	f000 fb30 	bl	8000e30 <lcd_send_string>
				lcd_goto_XY(2, 0);
 80007d0:	2100      	movs	r1, #0
 80007d2:	2002      	movs	r0, #2
 80007d4:	f000 fb48 	bl	8000e68 <lcd_goto_XY>
				lcd_send_string("Red Dur: ");
 80007d8:	4866      	ldr	r0, [pc, #408]	; (8000974 <fsm_manual_run+0x294>)
 80007da:	f000 fb29 	bl	8000e30 <lcd_send_string>
				lcd_goto_XY(2, 12);
 80007de:	210c      	movs	r1, #12
 80007e0:	2002      	movs	r0, #2
 80007e2:	f000 fb41 	bl	8000e68 <lcd_goto_XY>
				if (red_duration/1000 < 10) sprintf(str, "0%u", red_duration/1000);
 80007e6:	4b5b      	ldr	r3, [pc, #364]	; (8000954 <fsm_manual_run+0x274>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f242 720f 	movw	r2, #9999	; 0x270f
 80007ee:	4293      	cmp	r3, r2
 80007f0:	dc0d      	bgt.n	800080e <fsm_manual_run+0x12e>
 80007f2:	4b58      	ldr	r3, [pc, #352]	; (8000954 <fsm_manual_run+0x274>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a60      	ldr	r2, [pc, #384]	; (8000978 <fsm_manual_run+0x298>)
 80007f8:	fb82 1203 	smull	r1, r2, r2, r3
 80007fc:	1192      	asrs	r2, r2, #6
 80007fe:	17db      	asrs	r3, r3, #31
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	461a      	mov	r2, r3
 8000804:	495d      	ldr	r1, [pc, #372]	; (800097c <fsm_manual_run+0x29c>)
 8000806:	485e      	ldr	r0, [pc, #376]	; (8000980 <fsm_manual_run+0x2a0>)
 8000808:	f003 fb04 	bl	8003e14 <siprintf>
 800080c:	e00c      	b.n	8000828 <fsm_manual_run+0x148>
				else sprintf(str, "%u", red_duration/1000);
 800080e:	4b51      	ldr	r3, [pc, #324]	; (8000954 <fsm_manual_run+0x274>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a59      	ldr	r2, [pc, #356]	; (8000978 <fsm_manual_run+0x298>)
 8000814:	fb82 1203 	smull	r1, r2, r2, r3
 8000818:	1192      	asrs	r2, r2, #6
 800081a:	17db      	asrs	r3, r3, #31
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	461a      	mov	r2, r3
 8000820:	4958      	ldr	r1, [pc, #352]	; (8000984 <fsm_manual_run+0x2a4>)
 8000822:	4857      	ldr	r0, [pc, #348]	; (8000980 <fsm_manual_run+0x2a0>)
 8000824:	f003 faf6 	bl	8003e14 <siprintf>
				lcd_send_string(str);
 8000828:	4855      	ldr	r0, [pc, #340]	; (8000980 <fsm_manual_run+0x2a0>)
 800082a:	f000 fb01 	bl	8000e30 <lcd_send_string>
			}

			if (timer3_flag == 1) {
 800082e:	4b56      	ldr	r3, [pc, #344]	; (8000988 <fsm_manual_run+0x2a8>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d125      	bne.n	8000882 <fsm_manual_run+0x1a2>
				setTimer3(250);
 8000836:	20fa      	movs	r0, #250	; 0xfa
 8000838:	f000 fe84 	bl	8001544 <setTimer3>

				setColorToggle(GPIOC, GPIOB, LED_TRAFFIC_VERTICAL_1A_Pin, LED_TRAFFIC_VERTICAL_1B_Pin, 'R');
 800083c:	2352      	movs	r3, #82	; 0x52
 800083e:	9300      	str	r3, [sp, #0]
 8000840:	2340      	movs	r3, #64	; 0x40
 8000842:	2280      	movs	r2, #128	; 0x80
 8000844:	4940      	ldr	r1, [pc, #256]	; (8000948 <fsm_manual_run+0x268>)
 8000846:	4841      	ldr	r0, [pc, #260]	; (800094c <fsm_manual_run+0x26c>)
 8000848:	f001 f88e 	bl	8001968 <setColorToggle>
				setColorToggle(GPIOA, GPIOA, LED_TRAFFIC_VERTICAL_2A_Pin, LED_TRAFFIC_VERTICAL_2B_Pin, 'R');
 800084c:	2352      	movs	r3, #82	; 0x52
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000854:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000858:	493d      	ldr	r1, [pc, #244]	; (8000950 <fsm_manual_run+0x270>)
 800085a:	483d      	ldr	r0, [pc, #244]	; (8000950 <fsm_manual_run+0x270>)
 800085c:	f001 f884 	bl	8001968 <setColorToggle>
				setColorToggle(GPIOB, GPIOB, LED_TRAFFIC_HORIZONTAL_1A_Pin, LED_TRAFFIC_HORIZONTAL_1B_Pin, 'R');
 8000860:	2352      	movs	r3, #82	; 0x52
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000868:	2210      	movs	r2, #16
 800086a:	4937      	ldr	r1, [pc, #220]	; (8000948 <fsm_manual_run+0x268>)
 800086c:	4836      	ldr	r0, [pc, #216]	; (8000948 <fsm_manual_run+0x268>)
 800086e:	f001 f87b 	bl	8001968 <setColorToggle>
				setColorToggle(GPIOB, GPIOB, LED_TRAFFIC_HORIZONTAL_2A_Pin, LED_TRAFFIC_HORIZONTAL_2B_Pin, 'R');
 8000872:	2352      	movs	r3, #82	; 0x52
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2320      	movs	r3, #32
 8000878:	2208      	movs	r2, #8
 800087a:	4933      	ldr	r1, [pc, #204]	; (8000948 <fsm_manual_run+0x268>)
 800087c:	4832      	ldr	r0, [pc, #200]	; (8000948 <fsm_manual_run+0x268>)
 800087e:	f001 f873 	bl	8001968 <setColorToggle>
			}

			if(isButton3Pressed()) {
 8000882:	f7ff fd3f 	bl	8000304 <isButton3Pressed>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d00c      	beq.n	80008a6 <fsm_manual_run+0x1c6>
				red_duration = red_duration - 1000;
 800088c:	4b31      	ldr	r3, [pc, #196]	; (8000954 <fsm_manual_run+0x274>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000894:	4a2f      	ldr	r2, [pc, #188]	; (8000954 <fsm_manual_run+0x274>)
 8000896:	6013      	str	r3, [r2, #0]
				if (red_duration < 0) red_duration = 0;
 8000898:	4b2e      	ldr	r3, [pc, #184]	; (8000954 <fsm_manual_run+0x274>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	da02      	bge.n	80008a6 <fsm_manual_run+0x1c6>
 80008a0:	4b2c      	ldr	r3, [pc, #176]	; (8000954 <fsm_manual_run+0x274>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
			}

			if(isButton2Pressed()) {
 80008a6:	f7ff fcbf 	bl	8000228 <isButton2Pressed>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d00e      	beq.n	80008ce <fsm_manual_run+0x1ee>
				red_duration = red_duration + 1000;
 80008b0:	4b28      	ldr	r3, [pc, #160]	; (8000954 <fsm_manual_run+0x274>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80008b8:	4a26      	ldr	r2, [pc, #152]	; (8000954 <fsm_manual_run+0x274>)
 80008ba:	6013      	str	r3, [r2, #0]
				if (red_duration > 99000) red_duration = 1000;
 80008bc:	4b25      	ldr	r3, [pc, #148]	; (8000954 <fsm_manual_run+0x274>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a32      	ldr	r2, [pc, #200]	; (800098c <fsm_manual_run+0x2ac>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	dd03      	ble.n	80008ce <fsm_manual_run+0x1ee>
 80008c6:	4b23      	ldr	r3, [pc, #140]	; (8000954 <fsm_manual_run+0x274>)
 80008c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008cc:	601a      	str	r2, [r3, #0]
			}

			if (isButton1Pressed()) {
 80008ce:	f7ff fc3d 	bl	800014c <isButton1Pressed>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	f000 81fb 	beq.w	8000cd0 <fsm_manual_run+0x5f0>
				lcd_clear_display();
 80008da:	f000 fabe 	bl	8000e5a <lcd_clear_display>
				status = MODIFY_AMBER;
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <fsm_manual_run+0x264>)
 80008e0:	2203      	movs	r2, #3
 80008e2:	601a      	str	r2, [r3, #0]
				setTimer3(250);
 80008e4:	20fa      	movs	r0, #250	; 0xfa
 80008e6:	f000 fe2d 	bl	8001544 <setTimer3>
				setTimer2(147);
 80008ea:	2093      	movs	r0, #147	; 0x93
 80008ec:	f000 fe10 	bl	8001510 <setTimer2>
				setTimer1(153);
 80008f0:	2099      	movs	r0, #153	; 0x99
 80008f2:	f000 fdf3 	bl	80014dc <setTimer1>
			}
			break;
 80008f6:	e1eb      	b.n	8000cd0 <fsm_manual_run+0x5f0>
		case MODIFY_AMBER:
			lcd_goto_XY(1, 0);
 80008f8:	2100      	movs	r1, #0
 80008fa:	2001      	movs	r0, #1
 80008fc:	f000 fab4 	bl	8000e68 <lcd_goto_XY>
			lcd_send_string("Mod: MOD AMBER");
 8000900:	4823      	ldr	r0, [pc, #140]	; (8000990 <fsm_manual_run+0x2b0>)
 8000902:	f000 fa95 	bl	8000e30 <lcd_send_string>
			lcd_goto_XY(2, 0);
 8000906:	2100      	movs	r1, #0
 8000908:	2002      	movs	r0, #2
 800090a:	f000 faad 	bl	8000e68 <lcd_goto_XY>
			lcd_send_string("Amber Dur: ");
 800090e:	4821      	ldr	r0, [pc, #132]	; (8000994 <fsm_manual_run+0x2b4>)
 8000910:	f000 fa8e 	bl	8000e30 <lcd_send_string>
			lcd_goto_XY(2, 12);
 8000914:	210c      	movs	r1, #12
 8000916:	2002      	movs	r0, #2
 8000918:	f000 faa6 	bl	8000e68 <lcd_goto_XY>
			if (amber_duration/1000 < 10) sprintf(str, "0%u", amber_duration/1000);
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <fsm_manual_run+0x284>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f242 720f 	movw	r2, #9999	; 0x270f
 8000924:	4293      	cmp	r3, r2
 8000926:	dc37      	bgt.n	8000998 <fsm_manual_run+0x2b8>
 8000928:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <fsm_manual_run+0x284>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a12      	ldr	r2, [pc, #72]	; (8000978 <fsm_manual_run+0x298>)
 800092e:	fb82 1203 	smull	r1, r2, r2, r3
 8000932:	1192      	asrs	r2, r2, #6
 8000934:	17db      	asrs	r3, r3, #31
 8000936:	1ad3      	subs	r3, r2, r3
 8000938:	461a      	mov	r2, r3
 800093a:	4910      	ldr	r1, [pc, #64]	; (800097c <fsm_manual_run+0x29c>)
 800093c:	4810      	ldr	r0, [pc, #64]	; (8000980 <fsm_manual_run+0x2a0>)
 800093e:	f003 fa69 	bl	8003e14 <siprintf>
 8000942:	e036      	b.n	80009b2 <fsm_manual_run+0x2d2>
 8000944:	20000040 	.word	0x20000040
 8000948:	40010c00 	.word	0x40010c00
 800094c:	40011000 	.word	0x40011000
 8000950:	40010800 	.word	0x40010800
 8000954:	20000044 	.word	0x20000044
 8000958:	200000ec 	.word	0x200000ec
 800095c:	2000004c 	.word	0x2000004c
 8000960:	200000f4 	.word	0x200000f4
 8000964:	20000048 	.word	0x20000048
 8000968:	200000f0 	.word	0x200000f0
 800096c:	20000104 	.word	0x20000104
 8000970:	08004534 	.word	0x08004534
 8000974:	08004544 	.word	0x08004544
 8000978:	10624dd3 	.word	0x10624dd3
 800097c:	08004550 	.word	0x08004550
 8000980:	2000012c 	.word	0x2000012c
 8000984:	08004554 	.word	0x08004554
 8000988:	20000114 	.word	0x20000114
 800098c:	000182b8 	.word	0x000182b8
 8000990:	08004558 	.word	0x08004558
 8000994:	08004568 	.word	0x08004568
			else sprintf(str, "%u", amber_duration/1000);
 8000998:	4bb7      	ldr	r3, [pc, #732]	; (8000c78 <fsm_manual_run+0x598>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4ab7      	ldr	r2, [pc, #732]	; (8000c7c <fsm_manual_run+0x59c>)
 800099e:	fb82 1203 	smull	r1, r2, r2, r3
 80009a2:	1192      	asrs	r2, r2, #6
 80009a4:	17db      	asrs	r3, r3, #31
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	461a      	mov	r2, r3
 80009aa:	49b5      	ldr	r1, [pc, #724]	; (8000c80 <fsm_manual_run+0x5a0>)
 80009ac:	48b5      	ldr	r0, [pc, #724]	; (8000c84 <fsm_manual_run+0x5a4>)
 80009ae:	f003 fa31 	bl	8003e14 <siprintf>
			lcd_send_string(str);
 80009b2:	48b4      	ldr	r0, [pc, #720]	; (8000c84 <fsm_manual_run+0x5a4>)
 80009b4:	f000 fa3c 	bl	8000e30 <lcd_send_string>

			if (timer3_flag == 1) {
 80009b8:	4bb3      	ldr	r3, [pc, #716]	; (8000c88 <fsm_manual_run+0x5a8>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d125      	bne.n	8000a0c <fsm_manual_run+0x32c>
				setTimer3(250);
 80009c0:	20fa      	movs	r0, #250	; 0xfa
 80009c2:	f000 fdbf 	bl	8001544 <setTimer3>

				setColorToggle(GPIOC, GPIOB, LED_TRAFFIC_VERTICAL_1A_Pin, LED_TRAFFIC_VERTICAL_1B_Pin, 'Y');
 80009c6:	2359      	movs	r3, #89	; 0x59
 80009c8:	9300      	str	r3, [sp, #0]
 80009ca:	2340      	movs	r3, #64	; 0x40
 80009cc:	2280      	movs	r2, #128	; 0x80
 80009ce:	49af      	ldr	r1, [pc, #700]	; (8000c8c <fsm_manual_run+0x5ac>)
 80009d0:	48af      	ldr	r0, [pc, #700]	; (8000c90 <fsm_manual_run+0x5b0>)
 80009d2:	f000 ffc9 	bl	8001968 <setColorToggle>
				setColorToggle(GPIOA, GPIOA, LED_TRAFFIC_VERTICAL_2A_Pin, LED_TRAFFIC_VERTICAL_2B_Pin, 'Y');
 80009d6:	2359      	movs	r3, #89	; 0x59
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009e2:	49ac      	ldr	r1, [pc, #688]	; (8000c94 <fsm_manual_run+0x5b4>)
 80009e4:	48ab      	ldr	r0, [pc, #684]	; (8000c94 <fsm_manual_run+0x5b4>)
 80009e6:	f000 ffbf 	bl	8001968 <setColorToggle>
				setColorToggle(GPIOB, GPIOB, LED_TRAFFIC_HORIZONTAL_1A_Pin, LED_TRAFFIC_HORIZONTAL_1B_Pin, 'Y');
 80009ea:	2359      	movs	r3, #89	; 0x59
 80009ec:	9300      	str	r3, [sp, #0]
 80009ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f2:	2210      	movs	r2, #16
 80009f4:	49a5      	ldr	r1, [pc, #660]	; (8000c8c <fsm_manual_run+0x5ac>)
 80009f6:	48a5      	ldr	r0, [pc, #660]	; (8000c8c <fsm_manual_run+0x5ac>)
 80009f8:	f000 ffb6 	bl	8001968 <setColorToggle>
				setColorToggle(GPIOB, GPIOB, LED_TRAFFIC_HORIZONTAL_2A_Pin, LED_TRAFFIC_HORIZONTAL_2B_Pin, 'Y');
 80009fc:	2359      	movs	r3, #89	; 0x59
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	2320      	movs	r3, #32
 8000a02:	2208      	movs	r2, #8
 8000a04:	49a1      	ldr	r1, [pc, #644]	; (8000c8c <fsm_manual_run+0x5ac>)
 8000a06:	48a1      	ldr	r0, [pc, #644]	; (8000c8c <fsm_manual_run+0x5ac>)
 8000a08:	f000 ffae 	bl	8001968 <setColorToggle>
			}

			if(isButton3Pressed()) {
 8000a0c:	f7ff fc7a 	bl	8000304 <isButton3Pressed>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d00c      	beq.n	8000a30 <fsm_manual_run+0x350>
				amber_duration = amber_duration - 1000;
 8000a16:	4b98      	ldr	r3, [pc, #608]	; (8000c78 <fsm_manual_run+0x598>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000a1e:	4a96      	ldr	r2, [pc, #600]	; (8000c78 <fsm_manual_run+0x598>)
 8000a20:	6013      	str	r3, [r2, #0]
				if (amber_duration < 0) amber_duration = 0;
 8000a22:	4b95      	ldr	r3, [pc, #596]	; (8000c78 <fsm_manual_run+0x598>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	da02      	bge.n	8000a30 <fsm_manual_run+0x350>
 8000a2a:	4b93      	ldr	r3, [pc, #588]	; (8000c78 <fsm_manual_run+0x598>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
			}

			if(isButton2Pressed()) {
 8000a30:	f7ff fbfa 	bl	8000228 <isButton2Pressed>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d00e      	beq.n	8000a58 <fsm_manual_run+0x378>
				amber_duration = amber_duration + 1000;
 8000a3a:	4b8f      	ldr	r3, [pc, #572]	; (8000c78 <fsm_manual_run+0x598>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000a42:	4a8d      	ldr	r2, [pc, #564]	; (8000c78 <fsm_manual_run+0x598>)
 8000a44:	6013      	str	r3, [r2, #0]
				if (amber_duration > 99000) amber_duration = 1000;
 8000a46:	4b8c      	ldr	r3, [pc, #560]	; (8000c78 <fsm_manual_run+0x598>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a93      	ldr	r2, [pc, #588]	; (8000c98 <fsm_manual_run+0x5b8>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	dd03      	ble.n	8000a58 <fsm_manual_run+0x378>
 8000a50:	4b89      	ldr	r3, [pc, #548]	; (8000c78 <fsm_manual_run+0x598>)
 8000a52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a56:	601a      	str	r2, [r3, #0]
			}

			if (isButton1Pressed()) {
 8000a58:	f7ff fb78 	bl	800014c <isButton1Pressed>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	f000 8138 	beq.w	8000cd4 <fsm_manual_run+0x5f4>
				lcd_clear_display();
 8000a64:	f000 f9f9 	bl	8000e5a <lcd_clear_display>
				status = MODIFY_GREEN;
 8000a68:	4b8c      	ldr	r3, [pc, #560]	; (8000c9c <fsm_manual_run+0x5bc>)
 8000a6a:	2204      	movs	r2, #4
 8000a6c:	601a      	str	r2, [r3, #0]
				setTimer3(250);
 8000a6e:	20fa      	movs	r0, #250	; 0xfa
 8000a70:	f000 fd68 	bl	8001544 <setTimer3>
				setTimer2(147);
 8000a74:	2093      	movs	r0, #147	; 0x93
 8000a76:	f000 fd4b 	bl	8001510 <setTimer2>
				setTimer1(153);
 8000a7a:	2099      	movs	r0, #153	; 0x99
 8000a7c:	f000 fd2e 	bl	80014dc <setTimer1>
			}
			break;
 8000a80:	e128      	b.n	8000cd4 <fsm_manual_run+0x5f4>
		case MODIFY_GREEN:
			lcd_goto_XY(1, 0);
 8000a82:	2100      	movs	r1, #0
 8000a84:	2001      	movs	r0, #1
 8000a86:	f000 f9ef 	bl	8000e68 <lcd_goto_XY>
			lcd_send_string("Mod: MOD GREEN");
 8000a8a:	4885      	ldr	r0, [pc, #532]	; (8000ca0 <fsm_manual_run+0x5c0>)
 8000a8c:	f000 f9d0 	bl	8000e30 <lcd_send_string>
			lcd_goto_XY(2, 0);
 8000a90:	2100      	movs	r1, #0
 8000a92:	2002      	movs	r0, #2
 8000a94:	f000 f9e8 	bl	8000e68 <lcd_goto_XY>
			lcd_send_string("Green Dur: ");
 8000a98:	4882      	ldr	r0, [pc, #520]	; (8000ca4 <fsm_manual_run+0x5c4>)
 8000a9a:	f000 f9c9 	bl	8000e30 <lcd_send_string>
			lcd_goto_XY(2, 12);
 8000a9e:	210c      	movs	r1, #12
 8000aa0:	2002      	movs	r0, #2
 8000aa2:	f000 f9e1 	bl	8000e68 <lcd_goto_XY>
			if (green_duration/1000 < 10) sprintf(str, "0%u", green_duration/1000);
 8000aa6:	4b80      	ldr	r3, [pc, #512]	; (8000ca8 <fsm_manual_run+0x5c8>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f242 720f 	movw	r2, #9999	; 0x270f
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	dc0d      	bgt.n	8000ace <fsm_manual_run+0x3ee>
 8000ab2:	4b7d      	ldr	r3, [pc, #500]	; (8000ca8 <fsm_manual_run+0x5c8>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a71      	ldr	r2, [pc, #452]	; (8000c7c <fsm_manual_run+0x59c>)
 8000ab8:	fb82 1203 	smull	r1, r2, r2, r3
 8000abc:	1192      	asrs	r2, r2, #6
 8000abe:	17db      	asrs	r3, r3, #31
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	4979      	ldr	r1, [pc, #484]	; (8000cac <fsm_manual_run+0x5cc>)
 8000ac6:	486f      	ldr	r0, [pc, #444]	; (8000c84 <fsm_manual_run+0x5a4>)
 8000ac8:	f003 f9a4 	bl	8003e14 <siprintf>
 8000acc:	e00c      	b.n	8000ae8 <fsm_manual_run+0x408>
			else sprintf(str, "%u", green_duration/1000);
 8000ace:	4b76      	ldr	r3, [pc, #472]	; (8000ca8 <fsm_manual_run+0x5c8>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a6a      	ldr	r2, [pc, #424]	; (8000c7c <fsm_manual_run+0x59c>)
 8000ad4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ad8:	1192      	asrs	r2, r2, #6
 8000ada:	17db      	asrs	r3, r3, #31
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4967      	ldr	r1, [pc, #412]	; (8000c80 <fsm_manual_run+0x5a0>)
 8000ae2:	4868      	ldr	r0, [pc, #416]	; (8000c84 <fsm_manual_run+0x5a4>)
 8000ae4:	f003 f996 	bl	8003e14 <siprintf>
			lcd_send_string(str);
 8000ae8:	4866      	ldr	r0, [pc, #408]	; (8000c84 <fsm_manual_run+0x5a4>)
 8000aea:	f000 f9a1 	bl	8000e30 <lcd_send_string>

			if (timer3_flag == 1) {
 8000aee:	4b66      	ldr	r3, [pc, #408]	; (8000c88 <fsm_manual_run+0x5a8>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d125      	bne.n	8000b42 <fsm_manual_run+0x462>
				setTimer3(250);
 8000af6:	20fa      	movs	r0, #250	; 0xfa
 8000af8:	f000 fd24 	bl	8001544 <setTimer3>

				setColorToggle(GPIOC, GPIOB, LED_TRAFFIC_VERTICAL_1A_Pin, LED_TRAFFIC_VERTICAL_1B_Pin, 'G');
 8000afc:	2347      	movs	r3, #71	; 0x47
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	2340      	movs	r3, #64	; 0x40
 8000b02:	2280      	movs	r2, #128	; 0x80
 8000b04:	4961      	ldr	r1, [pc, #388]	; (8000c8c <fsm_manual_run+0x5ac>)
 8000b06:	4862      	ldr	r0, [pc, #392]	; (8000c90 <fsm_manual_run+0x5b0>)
 8000b08:	f000 ff2e 	bl	8001968 <setColorToggle>
				setColorToggle(GPIOA, GPIOA, LED_TRAFFIC_VERTICAL_2A_Pin, LED_TRAFFIC_VERTICAL_2B_Pin, 'G');
 8000b0c:	2347      	movs	r3, #71	; 0x47
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b18:	495e      	ldr	r1, [pc, #376]	; (8000c94 <fsm_manual_run+0x5b4>)
 8000b1a:	485e      	ldr	r0, [pc, #376]	; (8000c94 <fsm_manual_run+0x5b4>)
 8000b1c:	f000 ff24 	bl	8001968 <setColorToggle>
				setColorToggle(GPIOB, GPIOB, LED_TRAFFIC_HORIZONTAL_1A_Pin, LED_TRAFFIC_HORIZONTAL_1B_Pin, 'G');
 8000b20:	2347      	movs	r3, #71	; 0x47
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b28:	2210      	movs	r2, #16
 8000b2a:	4958      	ldr	r1, [pc, #352]	; (8000c8c <fsm_manual_run+0x5ac>)
 8000b2c:	4857      	ldr	r0, [pc, #348]	; (8000c8c <fsm_manual_run+0x5ac>)
 8000b2e:	f000 ff1b 	bl	8001968 <setColorToggle>
				setColorToggle(GPIOB, GPIOB, LED_TRAFFIC_HORIZONTAL_2A_Pin, LED_TRAFFIC_HORIZONTAL_2B_Pin, 'G');
 8000b32:	2347      	movs	r3, #71	; 0x47
 8000b34:	9300      	str	r3, [sp, #0]
 8000b36:	2320      	movs	r3, #32
 8000b38:	2208      	movs	r2, #8
 8000b3a:	4954      	ldr	r1, [pc, #336]	; (8000c8c <fsm_manual_run+0x5ac>)
 8000b3c:	4853      	ldr	r0, [pc, #332]	; (8000c8c <fsm_manual_run+0x5ac>)
 8000b3e:	f000 ff13 	bl	8001968 <setColorToggle>
			}

			if(isButton3Pressed()) {
 8000b42:	f7ff fbdf 	bl	8000304 <isButton3Pressed>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d00c      	beq.n	8000b66 <fsm_manual_run+0x486>
//					setTimer1(153);
//					setTimer2(147);
//					lcd_clear_display();
//					status = FAULT_CONDITION;
//				}
				green_duration = green_duration - 1000;
 8000b4c:	4b56      	ldr	r3, [pc, #344]	; (8000ca8 <fsm_manual_run+0x5c8>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000b54:	4a54      	ldr	r2, [pc, #336]	; (8000ca8 <fsm_manual_run+0x5c8>)
 8000b56:	6013      	str	r3, [r2, #0]
				if (green_duration < 0) green_duration = 0;
 8000b58:	4b53      	ldr	r3, [pc, #332]	; (8000ca8 <fsm_manual_run+0x5c8>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	da02      	bge.n	8000b66 <fsm_manual_run+0x486>
 8000b60:	4b51      	ldr	r3, [pc, #324]	; (8000ca8 <fsm_manual_run+0x5c8>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
			}

			if(isButton2Pressed()) {
 8000b66:	f7ff fb5f 	bl	8000228 <isButton2Pressed>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d00e      	beq.n	8000b8e <fsm_manual_run+0x4ae>
				green_duration = green_duration + 1000;
 8000b70:	4b4d      	ldr	r3, [pc, #308]	; (8000ca8 <fsm_manual_run+0x5c8>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000b78:	4a4b      	ldr	r2, [pc, #300]	; (8000ca8 <fsm_manual_run+0x5c8>)
 8000b7a:	6013      	str	r3, [r2, #0]
				if (green_duration > 99000) green_duration = 1000;
 8000b7c:	4b4a      	ldr	r3, [pc, #296]	; (8000ca8 <fsm_manual_run+0x5c8>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a45      	ldr	r2, [pc, #276]	; (8000c98 <fsm_manual_run+0x5b8>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	dd03      	ble.n	8000b8e <fsm_manual_run+0x4ae>
 8000b86:	4b48      	ldr	r3, [pc, #288]	; (8000ca8 <fsm_manual_run+0x5c8>)
 8000b88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b8c:	601a      	str	r2, [r3, #0]
			}

			if (isButton1Pressed()) {
 8000b8e:	f7ff fadd 	bl	800014c <isButton1Pressed>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	f000 809f 	beq.w	8000cd8 <fsm_manual_run+0x5f8>
				lcd_clear_display();
 8000b9a:	f000 f95e 	bl	8000e5a <lcd_clear_display>
				if(isErrorOccured()) {
 8000b9e:	f000 f8a1 	bl	8000ce4 <isErrorOccured>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d009      	beq.n	8000bbc <fsm_manual_run+0x4dc>
					setTimer1(153);
 8000ba8:	2099      	movs	r0, #153	; 0x99
 8000baa:	f000 fc97 	bl	80014dc <setTimer1>
					setTimer2(147);
 8000bae:	2093      	movs	r0, #147	; 0x93
 8000bb0:	f000 fcae 	bl	8001510 <setTimer2>
					status = FAULT_CONDITION;
 8000bb4:	4b39      	ldr	r3, [pc, #228]	; (8000c9c <fsm_manual_run+0x5bc>)
 8000bb6:	2205      	movs	r2, #5
 8000bb8:	601a      	str	r2, [r3, #0]
				}
				else {
					status = NORMAL;
				}
			}
			break;
 8000bba:	e08d      	b.n	8000cd8 <fsm_manual_run+0x5f8>
					status = NORMAL;
 8000bbc:	4b37      	ldr	r3, [pc, #220]	; (8000c9c <fsm_manual_run+0x5bc>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	601a      	str	r2, [r3, #0]
			break;
 8000bc2:	e089      	b.n	8000cd8 <fsm_manual_run+0x5f8>
		case FAULT_CONDITION:
			setColor(GPIOA, GPIOA, LED_TRAFFIC_VERTICAL_2A_Pin, LED_TRAFFIC_VERTICAL_2B_Pin, OFF, OFF);
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	9301      	str	r3, [sp, #4]
 8000bc8:	2300      	movs	r3, #0
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bd4:	492f      	ldr	r1, [pc, #188]	; (8000c94 <fsm_manual_run+0x5b4>)
 8000bd6:	482f      	ldr	r0, [pc, #188]	; (8000c94 <fsm_manual_run+0x5b4>)
 8000bd8:	f000 feaa 	bl	8001930 <setColor>
			setColor(GPIOB, GPIOB, LED_TRAFFIC_HORIZONTAL_1A_Pin, LED_TRAFFIC_HORIZONTAL_1B_Pin, OFF, OFF);
 8000bdc:	2300      	movs	r3, #0
 8000bde:	9301      	str	r3, [sp, #4]
 8000be0:	2300      	movs	r3, #0
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000be8:	2210      	movs	r2, #16
 8000bea:	4928      	ldr	r1, [pc, #160]	; (8000c8c <fsm_manual_run+0x5ac>)
 8000bec:	4827      	ldr	r0, [pc, #156]	; (8000c8c <fsm_manual_run+0x5ac>)
 8000bee:	f000 fe9f 	bl	8001930 <setColor>
			setColor(GPIOB, GPIOB, LED_TRAFFIC_HORIZONTAL_2A_Pin, LED_TRAFFIC_HORIZONTAL_2B_Pin, OFF, OFF);
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	9301      	str	r3, [sp, #4]
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	9300      	str	r3, [sp, #0]
 8000bfa:	2320      	movs	r3, #32
 8000bfc:	2208      	movs	r2, #8
 8000bfe:	4923      	ldr	r1, [pc, #140]	; (8000c8c <fsm_manual_run+0x5ac>)
 8000c00:	4822      	ldr	r0, [pc, #136]	; (8000c8c <fsm_manual_run+0x5ac>)
 8000c02:	f000 fe95 	bl	8001930 <setColor>
			lcd_goto_XY(1, 0);
 8000c06:	2100      	movs	r1, #0
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f000 f92d 	bl	8000e68 <lcd_goto_XY>
			lcd_send_string("Mod: FAULT CONDI");
 8000c0e:	4828      	ldr	r0, [pc, #160]	; (8000cb0 <fsm_manual_run+0x5d0>)
 8000c10:	f000 f90e 	bl	8000e30 <lcd_send_string>
			lcd_goto_XY(2, 0);
 8000c14:	2100      	movs	r1, #0
 8000c16:	2002      	movs	r0, #2
 8000c18:	f000 f926 	bl	8000e68 <lcd_goto_XY>
			lcd_send_string("YES: 1");
 8000c1c:	4825      	ldr	r0, [pc, #148]	; (8000cb4 <fsm_manual_run+0x5d4>)
 8000c1e:	f000 f907 	bl	8000e30 <lcd_send_string>
			lcd_goto_XY(2, 10);
 8000c22:	210a      	movs	r1, #10
 8000c24:	2002      	movs	r0, #2
 8000c26:	f000 f91f 	bl	8000e68 <lcd_goto_XY>
			lcd_send_string("NO: 3");
 8000c2a:	4823      	ldr	r0, [pc, #140]	; (8000cb8 <fsm_manual_run+0x5d8>)
 8000c2c:	f000 f900 	bl	8000e30 <lcd_send_string>

			red_duration = red_duration_temp;
 8000c30:	4b22      	ldr	r3, [pc, #136]	; (8000cbc <fsm_manual_run+0x5dc>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a22      	ldr	r2, [pc, #136]	; (8000cc0 <fsm_manual_run+0x5e0>)
 8000c36:	6013      	str	r3, [r2, #0]
			amber_duration = amber_duration_temp;
 8000c38:	4b22      	ldr	r3, [pc, #136]	; (8000cc4 <fsm_manual_run+0x5e4>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0e      	ldr	r2, [pc, #56]	; (8000c78 <fsm_manual_run+0x598>)
 8000c3e:	6013      	str	r3, [r2, #0]
			green_duration = green_duration_temp;
 8000c40:	4b21      	ldr	r3, [pc, #132]	; (8000cc8 <fsm_manual_run+0x5e8>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a18      	ldr	r2, [pc, #96]	; (8000ca8 <fsm_manual_run+0x5c8>)
 8000c46:	6013      	str	r3, [r2, #0]

			if (isButton1Pressed()) {
 8000c48:	f7ff fa80 	bl	800014c <isButton1Pressed>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d004      	beq.n	8000c5c <fsm_manual_run+0x57c>
				lcd_clear_display();
 8000c52:	f000 f902 	bl	8000e5a <lcd_clear_display>
				status = MODIFY_RED;
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <fsm_manual_run+0x5bc>)
 8000c58:	2202      	movs	r2, #2
 8000c5a:	601a      	str	r2, [r3, #0]
			}

			if (isButton3Pressed()) {
 8000c5c:	f7ff fb52 	bl	8000304 <isButton3Pressed>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d03a      	beq.n	8000cdc <fsm_manual_run+0x5fc>
				lcd_clear_display();
 8000c66:	f000 f8f8 	bl	8000e5a <lcd_clear_display>
				status = NORMAL;
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <fsm_manual_run+0x5bc>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	601a      	str	r2, [r3, #0]
			}
			break;
 8000c70:	e034      	b.n	8000cdc <fsm_manual_run+0x5fc>
		default:
			break;
 8000c72:	bf00      	nop
 8000c74:	e033      	b.n	8000cde <fsm_manual_run+0x5fe>
 8000c76:	bf00      	nop
 8000c78:	20000048 	.word	0x20000048
 8000c7c:	10624dd3 	.word	0x10624dd3
 8000c80:	08004554 	.word	0x08004554
 8000c84:	2000012c 	.word	0x2000012c
 8000c88:	20000114 	.word	0x20000114
 8000c8c:	40010c00 	.word	0x40010c00
 8000c90:	40011000 	.word	0x40011000
 8000c94:	40010800 	.word	0x40010800
 8000c98:	000182b8 	.word	0x000182b8
 8000c9c:	20000040 	.word	0x20000040
 8000ca0:	08004574 	.word	0x08004574
 8000ca4:	08004584 	.word	0x08004584
 8000ca8:	2000004c 	.word	0x2000004c
 8000cac:	08004550 	.word	0x08004550
 8000cb0:	08004590 	.word	0x08004590
 8000cb4:	080045a4 	.word	0x080045a4
 8000cb8:	080045ac 	.word	0x080045ac
 8000cbc:	200000ec 	.word	0x200000ec
 8000cc0:	20000044 	.word	0x20000044
 8000cc4:	200000f0 	.word	0x200000f0
 8000cc8:	200000f4 	.word	0x200000f4
			break;
 8000ccc:	bf00      	nop
 8000cce:	e006      	b.n	8000cde <fsm_manual_run+0x5fe>
			break;
 8000cd0:	bf00      	nop
 8000cd2:	e004      	b.n	8000cde <fsm_manual_run+0x5fe>
			break;
 8000cd4:	bf00      	nop
 8000cd6:	e002      	b.n	8000cde <fsm_manual_run+0x5fe>
			break;
 8000cd8:	bf00      	nop
 8000cda:	e000      	b.n	8000cde <fsm_manual_run+0x5fe>
			break;
 8000cdc:	bf00      	nop
	}
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <isErrorOccured>:
 *  Created on: Oct 28, 2024
 *      Author: datph
 */
#include "fsm_setting.h"

int isErrorOccured() {
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
	if ((amber_duration + green_duration) != red_duration) return 1;
 8000ce8:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <isErrorOccured+0x24>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <isErrorOccured+0x28>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	441a      	add	r2, r3
 8000cf2:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <isErrorOccured+0x2c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d001      	beq.n	8000cfe <isErrorOccured+0x1a>
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e000      	b.n	8000d00 <isErrorOccured+0x1c>
	return 0;
 8000cfe:	2300      	movs	r3, #0
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr
 8000d08:	20000048 	.word	0x20000048
 8000d0c:	2000004c 	.word	0x2000004c
 8000d10:	20000044 	.word	0x20000044

08000d14 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af02      	add	r7, sp, #8
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	f023 030f 	bic.w	r3, r3, #15
 8000d24:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	011b      	lsls	r3, r3, #4
 8000d2a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
 8000d2e:	f043 030c 	orr.w	r3, r3, #12
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	f043 0308 	orr.w	r3, r3, #8
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000d40:	7bbb      	ldrb	r3, [r7, #14]
 8000d42:	f043 030c 	orr.w	r3, r3, #12
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000d4a:	7bbb      	ldrb	r3, [r7, #14]
 8000d4c:	f043 0308 	orr.w	r3, r3, #8
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000d54:	f107 0208 	add.w	r2, r7, #8
 8000d58:	2364      	movs	r3, #100	; 0x64
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	2142      	movs	r1, #66	; 0x42
 8000d60:	4803      	ldr	r0, [pc, #12]	; (8000d70 <lcd_send_cmd+0x5c>)
 8000d62:	f001 fb29 	bl	80023b8 <HAL_I2C_Master_Transmit>
}
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	2000013c 	.word	0x2000013c

08000d74 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af02      	add	r7, sp, #8
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	f023 030f 	bic.w	r3, r3, #15
 8000d84:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	011b      	lsls	r3, r3, #4
 8000d8a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	f043 030d 	orr.w	r3, r3, #13
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	f043 0309 	orr.w	r3, r3, #9
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000da0:	7bbb      	ldrb	r3, [r7, #14]
 8000da2:	f043 030d 	orr.w	r3, r3, #13
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000daa:	7bbb      	ldrb	r3, [r7, #14]
 8000dac:	f043 0309 	orr.w	r3, r3, #9
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000db4:	f107 0208 	add.w	r2, r7, #8
 8000db8:	2364      	movs	r3, #100	; 0x64
 8000dba:	9300      	str	r3, [sp, #0]
 8000dbc:	2304      	movs	r3, #4
 8000dbe:	2142      	movs	r1, #66	; 0x42
 8000dc0:	4803      	ldr	r0, [pc, #12]	; (8000dd0 <lcd_send_data+0x5c>)
 8000dc2:	f001 faf9 	bl	80023b8 <HAL_I2C_Master_Transmit>
}
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2000013c 	.word	0x2000013c

08000dd4 <lcd_init>:

void lcd_init (void) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000dd8:	2033      	movs	r0, #51	; 0x33
 8000dda:	f7ff ff9b 	bl	8000d14 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000dde:	2032      	movs	r0, #50	; 0x32
 8000de0:	f7ff ff98 	bl	8000d14 <lcd_send_cmd>
	HAL_Delay(50);
 8000de4:	2032      	movs	r0, #50	; 0x32
 8000de6:	f000 fe9b 	bl	8001b20 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000dea:	2028      	movs	r0, #40	; 0x28
 8000dec:	f7ff ff92 	bl	8000d14 <lcd_send_cmd>
	HAL_Delay(50);
 8000df0:	2032      	movs	r0, #50	; 0x32
 8000df2:	f000 fe95 	bl	8001b20 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000df6:	2001      	movs	r0, #1
 8000df8:	f7ff ff8c 	bl	8000d14 <lcd_send_cmd>
	HAL_Delay(50);
 8000dfc:	2032      	movs	r0, #50	; 0x32
 8000dfe:	f000 fe8f 	bl	8001b20 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000e02:	2006      	movs	r0, #6
 8000e04:	f7ff ff86 	bl	8000d14 <lcd_send_cmd>
	HAL_Delay(50);
 8000e08:	2032      	movs	r0, #50	; 0x32
 8000e0a:	f000 fe89 	bl	8001b20 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 8000e0e:	200c      	movs	r0, #12
 8000e10:	f7ff ff80 	bl	8000d14 <lcd_send_cmd>
	HAL_Delay(50);
 8000e14:	2032      	movs	r0, #50	; 0x32
 8000e16:	f000 fe83 	bl	8001b20 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000e1a:	2002      	movs	r0, #2
 8000e1c:	f7ff ff7a 	bl	8000d14 <lcd_send_cmd>
	HAL_Delay(50);
 8000e20:	2032      	movs	r0, #50	; 0x32
 8000e22:	f000 fe7d 	bl	8001b20 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000e26:	2080      	movs	r0, #128	; 0x80
 8000e28:	f7ff ff74 	bl	8000d14 <lcd_send_cmd>
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000e38:	e006      	b.n	8000e48 <lcd_send_string+0x18>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	1c5a      	adds	r2, r3, #1
 8000e3e:	607a      	str	r2, [r7, #4]
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff ff96 	bl	8000d74 <lcd_send_data>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d1f4      	bne.n	8000e3a <lcd_send_string+0xa>
}
 8000e50:	bf00      	nop
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <lcd_clear_display>:

void lcd_clear_display (void)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8000e5e:	2001      	movs	r0, #1
 8000e60:	f7ff ff58 	bl	8000d14 <lcd_send_cmd>
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) 
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d108      	bne.n	8000e8a <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	4413      	add	r3, r2
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	337f      	adds	r3, #127	; 0x7f
 8000e86:	73fb      	strb	r3, [r7, #15]
 8000e88:	e008      	b.n	8000e9c <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	3340      	adds	r3, #64	; 0x40
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	b25b      	sxtb	r3, r3
 8000e94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e98:	b25b      	sxtb	r3, r3
 8000e9a:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff ff38 	bl	8000d14 <lcd_send_cmd>
}
 8000ea4:	bf00      	nop
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <display_num>:
 *      Author: datph
 */
#include "led7_segment.h"
char str[16];

void display_num (char group, int num) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
	if (group == 'A') {
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	2b41      	cmp	r3, #65	; 0x41
 8000ebc:	d11c      	bne.n	8000ef8 <display_num+0x4c>
		lcd_goto_XY(1, 0);
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f7ff ffd1 	bl	8000e68 <lcd_goto_XY>
		lcd_send_string("Vertical: ");
 8000ec6:	481e      	ldr	r0, [pc, #120]	; (8000f40 <display_num+0x94>)
 8000ec8:	f7ff ffb2 	bl	8000e30 <lcd_send_string>
		lcd_goto_XY(1, 12);
 8000ecc:	210c      	movs	r1, #12
 8000ece:	2001      	movs	r0, #1
 8000ed0:	f7ff ffca 	bl	8000e68 <lcd_goto_XY>
		if (num < 10) sprintf(str, "0%u", num);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	2b09      	cmp	r3, #9
 8000ed8:	dc05      	bgt.n	8000ee6 <display_num+0x3a>
 8000eda:	683a      	ldr	r2, [r7, #0]
 8000edc:	4919      	ldr	r1, [pc, #100]	; (8000f44 <display_num+0x98>)
 8000ede:	481a      	ldr	r0, [pc, #104]	; (8000f48 <display_num+0x9c>)
 8000ee0:	f002 ff98 	bl	8003e14 <siprintf>
 8000ee4:	e004      	b.n	8000ef0 <display_num+0x44>
		else sprintf(str, "%u", num);
 8000ee6:	683a      	ldr	r2, [r7, #0]
 8000ee8:	4918      	ldr	r1, [pc, #96]	; (8000f4c <display_num+0xa0>)
 8000eea:	4817      	ldr	r0, [pc, #92]	; (8000f48 <display_num+0x9c>)
 8000eec:	f002 ff92 	bl	8003e14 <siprintf>
		lcd_send_string(str);
 8000ef0:	4815      	ldr	r0, [pc, #84]	; (8000f48 <display_num+0x9c>)
 8000ef2:	f7ff ff9d 	bl	8000e30 <lcd_send_string>
		lcd_goto_XY(2, 12);
		if (num < 10) sprintf(str, "0%u", num);
		else sprintf(str, "%u", num);
		lcd_send_string(str);
	}
}
 8000ef6:	e01e      	b.n	8000f36 <display_num+0x8a>
	else if (group == 'B') {
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	2b42      	cmp	r3, #66	; 0x42
 8000efc:	d11b      	bne.n	8000f36 <display_num+0x8a>
		lcd_goto_XY(2, 0);
 8000efe:	2100      	movs	r1, #0
 8000f00:	2002      	movs	r0, #2
 8000f02:	f7ff ffb1 	bl	8000e68 <lcd_goto_XY>
		lcd_send_string("Horizontal: ");
 8000f06:	4812      	ldr	r0, [pc, #72]	; (8000f50 <display_num+0xa4>)
 8000f08:	f7ff ff92 	bl	8000e30 <lcd_send_string>
		lcd_goto_XY(2, 12);
 8000f0c:	210c      	movs	r1, #12
 8000f0e:	2002      	movs	r0, #2
 8000f10:	f7ff ffaa 	bl	8000e68 <lcd_goto_XY>
		if (num < 10) sprintf(str, "0%u", num);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	2b09      	cmp	r3, #9
 8000f18:	dc05      	bgt.n	8000f26 <display_num+0x7a>
 8000f1a:	683a      	ldr	r2, [r7, #0]
 8000f1c:	4909      	ldr	r1, [pc, #36]	; (8000f44 <display_num+0x98>)
 8000f1e:	480a      	ldr	r0, [pc, #40]	; (8000f48 <display_num+0x9c>)
 8000f20:	f002 ff78 	bl	8003e14 <siprintf>
 8000f24:	e004      	b.n	8000f30 <display_num+0x84>
		else sprintf(str, "%u", num);
 8000f26:	683a      	ldr	r2, [r7, #0]
 8000f28:	4908      	ldr	r1, [pc, #32]	; (8000f4c <display_num+0xa0>)
 8000f2a:	4807      	ldr	r0, [pc, #28]	; (8000f48 <display_num+0x9c>)
 8000f2c:	f002 ff72 	bl	8003e14 <siprintf>
		lcd_send_string(str);
 8000f30:	4805      	ldr	r0, [pc, #20]	; (8000f48 <display_num+0x9c>)
 8000f32:	f7ff ff7d 	bl	8000e30 <lcd_send_string>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	080045b4 	.word	0x080045b4
 8000f44:	080045c0 	.word	0x080045c0
 8000f48:	2000012c 	.word	0x2000012c
 8000f4c:	080045c4 	.word	0x080045c4
 8000f50:	080045c8 	.word	0x080045c8

08000f54 <display_time>:

void display_time() {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	if (timer2_flag == 1) {
 8000f58:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <display_time+0x34>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d110      	bne.n	8000f82 <display_time+0x2e>
		setTimer2(150);
 8000f60:	2096      	movs	r0, #150	; 0x96
 8000f62:	f000 fad5 	bl	8001510 <setTimer2>
		display_num('A', (timer1_counter + 1000)/1000);
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <display_time+0x38>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000f6e:	4a08      	ldr	r2, [pc, #32]	; (8000f90 <display_time+0x3c>)
 8000f70:	fb82 1203 	smull	r1, r2, r2, r3
 8000f74:	1192      	asrs	r2, r2, #6
 8000f76:	17db      	asrs	r3, r3, #31
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	2041      	movs	r0, #65	; 0x41
 8000f7e:	f7ff ff95 	bl	8000eac <display_num>
	}
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	2000010c 	.word	0x2000010c
 8000f8c:	20000100 	.word	0x20000100
 8000f90:	10624dd3 	.word	0x10624dd3

08000f94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f98:	f000 fd60 	bl	8001a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9c:	f000 f81c 	bl	8000fd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa0:	f000 f900 	bl	80011a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fa4:	f000 f8d4 	bl	8001150 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000fa8:	f000 f886 	bl	80010b8 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000fac:	f000 f856 	bl	800105c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000fb0:	4807      	ldr	r0, [pc, #28]	; (8000fd0 <main+0x3c>)
 8000fb2:	f002 f9b7 	bl	8003324 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	  SCH_Init();
 8000fb6:	f000 f9bf 	bl	8001338 <SCH_Init>
  	  SCH_Add_Task(fsm_manual_run, 0, 50);
 8000fba:	2232      	movs	r2, #50	; 0x32
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <main+0x40>)
 8000fc0:	f000 f9ca 	bl	8001358 <SCH_Add_Task>
  	  lcd_init();
 8000fc4:	f7ff ff06 	bl	8000dd4 <lcd_init>

  while (1)
  {

//	  fsm_manual_run();
	  SCH_Dispatch_Tasks();
 8000fc8:	f000 fa26 	bl	8001418 <SCH_Dispatch_Tasks>
 8000fcc:	e7fc      	b.n	8000fc8 <main+0x34>
 8000fce:	bf00      	nop
 8000fd0:	20000190 	.word	0x20000190
 8000fd4:	080006e1 	.word	0x080006e1

08000fd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b090      	sub	sp, #64	; 0x40
 8000fdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fde:	f107 0318 	add.w	r3, r7, #24
 8000fe2:	2228      	movs	r2, #40	; 0x28
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f002 fe56 	bl	8003c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ffe:	2301      	movs	r3, #1
 8001000:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001002:	2310      	movs	r3, #16
 8001004:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001006:	2302      	movs	r3, #2
 8001008:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800100a:	2300      	movs	r3, #0
 800100c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800100e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001012:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001014:	f107 0318 	add.w	r3, r7, #24
 8001018:	4618      	mov	r0, r3
 800101a:	f001 fd25 	bl	8002a68 <HAL_RCC_OscConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001024:	f000 f982 	bl	800132c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001028:	230f      	movs	r3, #15
 800102a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102c:	2302      	movs	r3, #2
 800102e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001034:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001038:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2102      	movs	r1, #2
 8001042:	4618      	mov	r0, r3
 8001044:	f001 ff90 	bl	8002f68 <HAL_RCC_ClockConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800104e:	f000 f96d 	bl	800132c <Error_Handler>
  }
}
 8001052:	bf00      	nop
 8001054:	3740      	adds	r7, #64	; 0x40
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <MX_I2C1_Init+0x50>)
 8001062:	4a13      	ldr	r2, [pc, #76]	; (80010b0 <MX_I2C1_Init+0x54>)
 8001064:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <MX_I2C1_Init+0x50>)
 8001068:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <MX_I2C1_Init+0x58>)
 800106a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <MX_I2C1_Init+0x50>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <MX_I2C1_Init+0x50>)
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <MX_I2C1_Init+0x50>)
 800107a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800107e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <MX_I2C1_Init+0x50>)
 8001082:	2200      	movs	r2, #0
 8001084:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <MX_I2C1_Init+0x50>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800108c:	4b07      	ldr	r3, [pc, #28]	; (80010ac <MX_I2C1_Init+0x50>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <MX_I2C1_Init+0x50>)
 8001094:	2200      	movs	r2, #0
 8001096:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001098:	4804      	ldr	r0, [pc, #16]	; (80010ac <MX_I2C1_Init+0x50>)
 800109a:	f001 f849 	bl	8002130 <HAL_I2C_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010a4:	f000 f942 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	2000013c 	.word	0x2000013c
 80010b0:	40005400 	.word	0x40005400
 80010b4:	000186a0 	.word	0x000186a0

080010b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010be:	f107 0308 	add.w	r3, r7, #8
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010cc:	463b      	mov	r3, r7
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010d4:	4b1d      	ldr	r3, [pc, #116]	; (800114c <MX_TIM2_Init+0x94>)
 80010d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <MX_TIM2_Init+0x94>)
 80010de:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80010e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e4:	4b19      	ldr	r3, [pc, #100]	; (800114c <MX_TIM2_Init+0x94>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80010ea:	4b18      	ldr	r3, [pc, #96]	; (800114c <MX_TIM2_Init+0x94>)
 80010ec:	2209      	movs	r2, #9
 80010ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f0:	4b16      	ldr	r3, [pc, #88]	; (800114c <MX_TIM2_Init+0x94>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <MX_TIM2_Init+0x94>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010fc:	4813      	ldr	r0, [pc, #76]	; (800114c <MX_TIM2_Init+0x94>)
 80010fe:	f002 f8c1 	bl	8003284 <HAL_TIM_Base_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001108:	f000 f910 	bl	800132c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800110c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001110:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001112:	f107 0308 	add.w	r3, r7, #8
 8001116:	4619      	mov	r1, r3
 8001118:	480c      	ldr	r0, [pc, #48]	; (800114c <MX_TIM2_Init+0x94>)
 800111a:	f002 fa45 	bl	80035a8 <HAL_TIM_ConfigClockSource>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001124:	f000 f902 	bl	800132c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001128:	2300      	movs	r3, #0
 800112a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001130:	463b      	mov	r3, r7
 8001132:	4619      	mov	r1, r3
 8001134:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_TIM2_Init+0x94>)
 8001136:	f002 fc27 	bl	8003988 <HAL_TIMEx_MasterConfigSynchronization>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001140:	f000 f8f4 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000190 	.word	0x20000190

08001150 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <MX_USART2_UART_Init+0x4c>)
 8001156:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <MX_USART2_UART_Init+0x50>)
 8001158:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <MX_USART2_UART_Init+0x4c>)
 800115c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001160:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <MX_USART2_UART_Init+0x4c>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <MX_USART2_UART_Init+0x4c>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <MX_USART2_UART_Init+0x4c>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001174:	4b09      	ldr	r3, [pc, #36]	; (800119c <MX_USART2_UART_Init+0x4c>)
 8001176:	220c      	movs	r2, #12
 8001178:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117a:	4b08      	ldr	r3, [pc, #32]	; (800119c <MX_USART2_UART_Init+0x4c>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <MX_USART2_UART_Init+0x4c>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001186:	4805      	ldr	r0, [pc, #20]	; (800119c <MX_USART2_UART_Init+0x4c>)
 8001188:	f002 fc6e 	bl	8003a68 <HAL_UART_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001192:	f000 f8cb 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200001d8 	.word	0x200001d8
 80011a0:	40004400 	.word	0x40004400

080011a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011aa:	f107 0310 	add.w	r3, r7, #16
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b8:	4b4e      	ldr	r3, [pc, #312]	; (80012f4 <MX_GPIO_Init+0x150>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	4a4d      	ldr	r2, [pc, #308]	; (80012f4 <MX_GPIO_Init+0x150>)
 80011be:	f043 0310 	orr.w	r3, r3, #16
 80011c2:	6193      	str	r3, [r2, #24]
 80011c4:	4b4b      	ldr	r3, [pc, #300]	; (80012f4 <MX_GPIO_Init+0x150>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	f003 0310 	and.w	r3, r3, #16
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d0:	4b48      	ldr	r3, [pc, #288]	; (80012f4 <MX_GPIO_Init+0x150>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a47      	ldr	r2, [pc, #284]	; (80012f4 <MX_GPIO_Init+0x150>)
 80011d6:	f043 0320 	orr.w	r3, r3, #32
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b45      	ldr	r3, [pc, #276]	; (80012f4 <MX_GPIO_Init+0x150>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f003 0320 	and.w	r3, r3, #32
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e8:	4b42      	ldr	r3, [pc, #264]	; (80012f4 <MX_GPIO_Init+0x150>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	4a41      	ldr	r2, [pc, #260]	; (80012f4 <MX_GPIO_Init+0x150>)
 80011ee:	f043 0304 	orr.w	r3, r3, #4
 80011f2:	6193      	str	r3, [r2, #24]
 80011f4:	4b3f      	ldr	r3, [pc, #252]	; (80012f4 <MX_GPIO_Init+0x150>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001200:	4b3c      	ldr	r3, [pc, #240]	; (80012f4 <MX_GPIO_Init+0x150>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	4a3b      	ldr	r2, [pc, #236]	; (80012f4 <MX_GPIO_Init+0x150>)
 8001206:	f043 0308 	orr.w	r3, r3, #8
 800120a:	6193      	str	r3, [r2, #24]
 800120c:	4b39      	ldr	r3, [pc, #228]	; (80012f4 <MX_GPIO_Init+0x150>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f003 0308 	and.w	r3, r3, #8
 8001214:	603b      	str	r3, [r7, #0]
 8001216:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_TRAFFIC_VERTICAL_2A_Pin|LED_TRAFFIC_VERTICAL_2B_Pin, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800121e:	4836      	ldr	r0, [pc, #216]	; (80012f8 <MX_GPIO_Init+0x154>)
 8001220:	f000 ff4b 	bl	80020ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_TRAFFIC_HORIZONTAL_1B_Pin|LED_TRAFFIC_HORIZONTAL_2A_Pin|LED_TRAFFIC_HORIZONTAL_1A_Pin|LED_TRAFFIC_HORIZONTAL_2B_Pin
 8001224:	2200      	movs	r2, #0
 8001226:	f44f 618f 	mov.w	r1, #1144	; 0x478
 800122a:	4834      	ldr	r0, [pc, #208]	; (80012fc <MX_GPIO_Init+0x158>)
 800122c:	f000 ff45 	bl	80020ba <HAL_GPIO_WritePin>
                          |LED_TRAFFIC_VERTICAL_1B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TRAFFIC_VERTICAL_1A_GPIO_Port, LED_TRAFFIC_VERTICAL_1A_Pin, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	2180      	movs	r1, #128	; 0x80
 8001234:	4832      	ldr	r0, [pc, #200]	; (8001300 <MX_GPIO_Init+0x15c>)
 8001236:	f000 ff40 	bl	80020ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800123a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800123e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001240:	4b30      	ldr	r3, [pc, #192]	; (8001304 <MX_GPIO_Init+0x160>)
 8001242:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001248:	f107 0310 	add.w	r3, r7, #16
 800124c:	4619      	mov	r1, r3
 800124e:	482c      	ldr	r0, [pc, #176]	; (8001300 <MX_GPIO_Init+0x15c>)
 8001250:	f000 fd98 	bl	8001d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_TRAFFIC_1_Pin BUTTON_TRAFFIC_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_TRAFFIC_1_Pin|BUTTON_TRAFFIC_2_Pin;
 8001254:	2312      	movs	r3, #18
 8001256:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001260:	f107 0310 	add.w	r3, r7, #16
 8001264:	4619      	mov	r1, r3
 8001266:	4824      	ldr	r0, [pc, #144]	; (80012f8 <MX_GPIO_Init+0x154>)
 8001268:	f000 fd8c 	bl	8001d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED_TRAFFIC_VERTICAL_2A_Pin LED_TRAFFIC_VERTICAL_2B_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED_TRAFFIC_VERTICAL_2A_Pin|LED_TRAFFIC_VERTICAL_2B_Pin;
 800126c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001270:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001272:	2301      	movs	r3, #1
 8001274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2302      	movs	r3, #2
 800127c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	4619      	mov	r1, r3
 8001284:	481c      	ldr	r0, [pc, #112]	; (80012f8 <MX_GPIO_Init+0x154>)
 8001286:	f000 fd7d 	bl	8001d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_TRAFFIC_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_TRAFFIC_3_Pin;
 800128a:	2301      	movs	r3, #1
 800128c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_TRAFFIC_3_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 0310 	add.w	r3, r7, #16
 800129a:	4619      	mov	r1, r3
 800129c:	4817      	ldr	r0, [pc, #92]	; (80012fc <MX_GPIO_Init+0x158>)
 800129e:	f000 fd71 	bl	8001d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_TRAFFIC_HORIZONTAL_1B_Pin LED_TRAFFIC_HORIZONTAL_2A_Pin LED_TRAFFIC_HORIZONTAL_1A_Pin LED_TRAFFIC_HORIZONTAL_2B_Pin
                           LED_TRAFFIC_VERTICAL_1B_Pin */
  GPIO_InitStruct.Pin = LED_TRAFFIC_HORIZONTAL_1B_Pin|LED_TRAFFIC_HORIZONTAL_2A_Pin|LED_TRAFFIC_HORIZONTAL_1A_Pin|LED_TRAFFIC_HORIZONTAL_2B_Pin
 80012a2:	f44f 638f 	mov.w	r3, #1144	; 0x478
 80012a6:	613b      	str	r3, [r7, #16]
                          |LED_TRAFFIC_VERTICAL_1B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2302      	movs	r3, #2
 80012b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	4619      	mov	r1, r3
 80012ba:	4810      	ldr	r0, [pc, #64]	; (80012fc <MX_GPIO_Init+0x158>)
 80012bc:	f000 fd62 	bl	8001d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TRAFFIC_VERTICAL_1A_Pin */
  GPIO_InitStruct.Pin = LED_TRAFFIC_VERTICAL_1A_Pin;
 80012c0:	2380      	movs	r3, #128	; 0x80
 80012c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c4:	2301      	movs	r3, #1
 80012c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012cc:	2302      	movs	r3, #2
 80012ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_TRAFFIC_VERTICAL_1A_GPIO_Port, &GPIO_InitStruct);
 80012d0:	f107 0310 	add.w	r3, r7, #16
 80012d4:	4619      	mov	r1, r3
 80012d6:	480a      	ldr	r0, [pc, #40]	; (8001300 <MX_GPIO_Init+0x15c>)
 80012d8:	f000 fd54 	bl	8001d84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012dc:	2200      	movs	r2, #0
 80012de:	2100      	movs	r1, #0
 80012e0:	2028      	movs	r0, #40	; 0x28
 80012e2:	f000 fd18 	bl	8001d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012e6:	2028      	movs	r0, #40	; 0x28
 80012e8:	f000 fd31 	bl	8001d4e <HAL_NVIC_EnableIRQ>

}
 80012ec:	bf00      	nop
 80012ee:	3720      	adds	r7, #32
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40010800 	.word	0x40010800
 80012fc:	40010c00 	.word	0x40010c00
 8001300:	40011000 	.word	0x40011000
 8001304:	10110000 	.word	0x10110000

08001308 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8001310:	f000 f85a 	bl	80013c8 <SCH_Update>
	timerRun();
 8001314:	f000 f952 	bl	80015bc <timerRun>
	getKeyInputButton1();
 8001318:	f7fe ff36 	bl	8000188 <getKeyInputButton1>
	getKeyInputButton2();
 800131c:	f7fe ffa2 	bl	8000264 <getKeyInputButton2>
	getKeyInputButton3();
 8001320:	f7ff f80e 	bl	8000340 <getKeyInputButton3>
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001330:	b672      	cpsid	i
}
 8001332:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001334:	e7fe      	b.n	8001334 <Error_Handler+0x8>
	...

08001338 <SCH_Init>:
#include "scheduler.h"

sTasks* head = NULL;
sTasks* tail = NULL;

void SCH_Init(void){
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
    head = NULL;
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <SCH_Init+0x18>)
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
    tail = NULL;
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <SCH_Init+0x1c>)
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	200000f8 	.word	0x200000f8
 8001354:	200000fc 	.word	0x200000fc

08001358 <SCH_Add_Task>:

void SCH_Add_Task (void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
	sTasks* newTask = (sTasks*)malloc(sizeof(sTasks));
 8001364:	201c      	movs	r0, #28
 8001366:	f002 fc87 	bl	8003c78 <malloc>
 800136a:	4603      	mov	r3, r0
 800136c:	617b      	str	r3, [r7, #20]
	    if (newTask) {
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d021      	beq.n	80013b8 <SCH_Add_Task+0x60>
	        newTask->pTask = pFunction;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	601a      	str	r2, [r3, #0]
	        newTask->Delay = DELAY;
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	68ba      	ldr	r2, [r7, #8]
 800137e:	605a      	str	r2, [r3, #4]
	        newTask->Period = PERIOD;
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	609a      	str	r2, [r3, #8]
	        newTask->RunMe = 0;
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	2200      	movs	r2, #0
 800138a:	60da      	str	r2, [r3, #12]
	        newTask->next = NULL;
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	2200      	movs	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
	        newTask->prev = tail;
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <SCH_Add_Task+0x68>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	619a      	str	r2, [r3, #24]

	        if (tail) {
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <SCH_Add_Task+0x68>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d004      	beq.n	80013ac <SCH_Add_Task+0x54>
	            tail->next = newTask;
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <SCH_Add_Task+0x68>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	615a      	str	r2, [r3, #20]
 80013aa:	e002      	b.n	80013b2 <SCH_Add_Task+0x5a>
	        }
	        else {
	            head = newTask;
 80013ac:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <SCH_Add_Task+0x6c>)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	6013      	str	r3, [r2, #0]
	        }
	        tail = newTask;
 80013b2:	4a03      	ldr	r2, [pc, #12]	; (80013c0 <SCH_Add_Task+0x68>)
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	6013      	str	r3, [r2, #0]
	    }
}
 80013b8:	bf00      	nop
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	200000fc 	.word	0x200000fc
 80013c4:	200000f8 	.word	0x200000f8

080013c8 <SCH_Update>:

void SCH_Update(void) {
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
	sTasks* current = head;
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <SCH_Update+0x4c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	607b      	str	r3, [r7, #4]
	    while (current) {
 80013d4:	e015      	b.n	8001402 <SCH_Update+0x3a>
	        if (current->Delay > 0) {
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d005      	beq.n	80013ea <SCH_Update+0x22>
	            current->Delay--;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	1e5a      	subs	r2, r3, #1
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	e008      	b.n	80013fc <SCH_Update+0x34>
	        } else {
	            current->Delay = current->Period;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	605a      	str	r2, [r3, #4]
	            current->RunMe++;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	1c5a      	adds	r2, r3, #1
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	60da      	str	r2, [r3, #12]
	        }
	        current = current->next;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	695b      	ldr	r3, [r3, #20]
 8001400:	607b      	str	r3, [r7, #4]
	    while (current) {
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1e6      	bne.n	80013d6 <SCH_Update+0xe>
	    }
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	200000f8 	.word	0x200000f8

08001418 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
	sTasks* current = head;
 800141e:	4b16      	ldr	r3, [pc, #88]	; (8001478 <SCH_Dispatch_Tasks+0x60>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	607b      	str	r3, [r7, #4]
	    while (current) {
 8001424:	e01f      	b.n	8001466 <SCH_Dispatch_Tasks+0x4e>
	        if (current->RunMe > 0) {
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d018      	beq.n	8001460 <SCH_Dispatch_Tasks+0x48>
	            current->RunMe--;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	1e5a      	subs	r2, r3, #1
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	60da      	str	r2, [r3, #12]
	            (*current->pTask)();
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4798      	blx	r3

	            if (current->Period == 0) {
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d108      	bne.n	8001458 <SCH_Dispatch_Tasks+0x40>
	                sTasks* toDelete = current;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	603b      	str	r3, [r7, #0]
	                current = current->next;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	607b      	str	r3, [r7, #4]
	                SCH_Delete_Task(toDelete);
 8001450:	6838      	ldr	r0, [r7, #0]
 8001452:	f000 f813 	bl	800147c <SCH_Delete_Task>
 8001456:	e006      	b.n	8001466 <SCH_Dispatch_Tasks+0x4e>
	            }
	            else {
	                current = current->next;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	e002      	b.n	8001466 <SCH_Dispatch_Tasks+0x4e>
	            }
	        }
	        else {
	            current = current->next;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	607b      	str	r3, [r7, #4]
	    while (current) {
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1dc      	bne.n	8001426 <SCH_Dispatch_Tasks+0xe>
	        }
	    }
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200000f8 	.word	0x200000f8

0800147c <SCH_Delete_Task>:

void SCH_Delete_Task (sTasks* task) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	if (!task) return;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d01f      	beq.n	80014ca <SCH_Delete_Task+0x4e>

	    if (task->prev) {
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d005      	beq.n	800149e <SCH_Delete_Task+0x22>
	        task->prev->next = task->next;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	6952      	ldr	r2, [r2, #20]
 800149a:	615a      	str	r2, [r3, #20]
 800149c:	e003      	b.n	80014a6 <SCH_Delete_Task+0x2a>
	    }
	    else {
	        head = task->next;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	4a0c      	ldr	r2, [pc, #48]	; (80014d4 <SCH_Delete_Task+0x58>)
 80014a4:	6013      	str	r3, [r2, #0]
	    }

	    if (task->next) {
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d005      	beq.n	80014ba <SCH_Delete_Task+0x3e>
	        task->next->prev = task->prev;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	6992      	ldr	r2, [r2, #24]
 80014b6:	619a      	str	r2, [r3, #24]
 80014b8:	e003      	b.n	80014c2 <SCH_Delete_Task+0x46>
	    }
	    else {
	        tail = task->prev;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	4a06      	ldr	r2, [pc, #24]	; (80014d8 <SCH_Delete_Task+0x5c>)
 80014c0:	6013      	str	r3, [r2, #0]
	    }

	    free(task);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f002 fbe0 	bl	8003c88 <free>
 80014c8:	e000      	b.n	80014cc <SCH_Delete_Task+0x50>
	if (!task) return;
 80014ca:	bf00      	nop
}
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200000f8 	.word	0x200000f8
 80014d8:	200000fc 	.word	0x200000fc

080014dc <setTimer1>:

int idx = 0;
int toggle_flag = 0;
int TICK = 1;

void setTimer1 (int duration) {
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 80014e4:	4b07      	ldr	r3, [pc, #28]	; (8001504 <setTimer1+0x28>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80014ee:	4a06      	ldr	r2, [pc, #24]	; (8001508 <setTimer1+0x2c>)
 80014f0:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <setTimer1+0x30>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000050 	.word	0x20000050
 8001508:	20000100 	.word	0x20000100
 800150c:	20000104 	.word	0x20000104

08001510 <setTimer2>:

void setTimer2 (int duration) {
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 8001518:	4b07      	ldr	r3, [pc, #28]	; (8001538 <setTimer2+0x28>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001522:	4a06      	ldr	r2, [pc, #24]	; (800153c <setTimer2+0x2c>)
 8001524:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <setTimer2+0x30>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000050 	.word	0x20000050
 800153c:	20000108 	.word	0x20000108
 8001540:	2000010c 	.word	0x2000010c

08001544 <setTimer3>:

void setTimer3 (int duration) {
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <setTimer3+0x28>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	fb92 f3f3 	sdiv	r3, r2, r3
 8001556:	4a06      	ldr	r2, [pc, #24]	; (8001570 <setTimer3+0x2c>)
 8001558:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <setTimer3+0x30>)
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	20000050 	.word	0x20000050
 8001570:	20000110 	.word	0x20000110
 8001574:	20000114 	.word	0x20000114

08001578 <isTimer1Paused>:

int isTimer1Paused(int pause) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
//	pause = pause / 10;
//	if (timer1_counter <= pause) return 1;
//	return 0;
	if (timer1_counter > (pause + 5)) return 0;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	1d5a      	adds	r2, r3, #5
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <isTimer1Paused+0x40>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	da01      	bge.n	8001590 <isTimer1Paused+0x18>
 800158c:	2300      	movs	r3, #0
 800158e:	e00e      	b.n	80015ae <isTimer1Paused+0x36>
	else if (timer1_counter <= (pause + 5) && timer1_counter >= pause) lcd_clear_display();
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	1d5a      	adds	r2, r3, #5
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <isTimer1Paused+0x40>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	db07      	blt.n	80015ac <isTimer1Paused+0x34>
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <isTimer1Paused+0x40>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	dc02      	bgt.n	80015ac <isTimer1Paused+0x34>
 80015a6:	f7ff fc58 	bl	8000e5a <lcd_clear_display>
	else return 1;
}
 80015aa:	e000      	b.n	80015ae <isTimer1Paused+0x36>
	else return 1;
 80015ac:	2301      	movs	r3, #1
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000100 	.word	0x20000100

080015bc <timerRun>:

void timerRun() {
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) --timer1_counter;
 80015c0:	4b26      	ldr	r3, [pc, #152]	; (800165c <timerRun+0xa0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	dd05      	ble.n	80015d4 <timerRun+0x18>
 80015c8:	4b24      	ldr	r3, [pc, #144]	; (800165c <timerRun+0xa0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	4a23      	ldr	r2, [pc, #140]	; (800165c <timerRun+0xa0>)
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	e002      	b.n	80015da <timerRun+0x1e>
	else timer1_flag = 1;
 80015d4:	4b22      	ldr	r3, [pc, #136]	; (8001660 <timerRun+0xa4>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	601a      	str	r2, [r3, #0]

	if (timer2_counter > 0) --timer2_counter;
 80015da:	4b22      	ldr	r3, [pc, #136]	; (8001664 <timerRun+0xa8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	dd05      	ble.n	80015ee <timerRun+0x32>
 80015e2:	4b20      	ldr	r3, [pc, #128]	; (8001664 <timerRun+0xa8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	4a1e      	ldr	r2, [pc, #120]	; (8001664 <timerRun+0xa8>)
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	e013      	b.n	8001616 <timerRun+0x5a>
	else {
		timer2_flag = 1;
 80015ee:	4b1e      	ldr	r3, [pc, #120]	; (8001668 <timerRun+0xac>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	601a      	str	r2, [r3, #0]
		switch (idx) {
 80015f4:	4b1d      	ldr	r3, [pc, #116]	; (800166c <timerRun+0xb0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d002      	beq.n	8001602 <timerRun+0x46>
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d006      	beq.n	800160e <timerRun+0x52>
				break;
			case 1:
				idx = 0;
				break;
			default:
				break;
 8001600:	e009      	b.n	8001616 <timerRun+0x5a>
				++idx;
 8001602:	4b1a      	ldr	r3, [pc, #104]	; (800166c <timerRun+0xb0>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	3301      	adds	r3, #1
 8001608:	4a18      	ldr	r2, [pc, #96]	; (800166c <timerRun+0xb0>)
 800160a:	6013      	str	r3, [r2, #0]
				break;
 800160c:	e003      	b.n	8001616 <timerRun+0x5a>
				idx = 0;
 800160e:	4b17      	ldr	r3, [pc, #92]	; (800166c <timerRun+0xb0>)
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
				break;
 8001614:	bf00      	nop
		}
	}

	if (timer3_counter > 0) --timer3_counter;
 8001616:	4b16      	ldr	r3, [pc, #88]	; (8001670 <timerRun+0xb4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	dd05      	ble.n	800162a <timerRun+0x6e>
 800161e:	4b14      	ldr	r3, [pc, #80]	; (8001670 <timerRun+0xb4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	3b01      	subs	r3, #1
 8001624:	4a12      	ldr	r2, [pc, #72]	; (8001670 <timerRun+0xb4>)
 8001626:	6013      	str	r3, [r2, #0]
				break;
			default:
				break;
		}
	}
}
 8001628:	e013      	b.n	8001652 <timerRun+0x96>
		timer3_flag = 1;
 800162a:	4b12      	ldr	r3, [pc, #72]	; (8001674 <timerRun+0xb8>)
 800162c:	2201      	movs	r2, #1
 800162e:	601a      	str	r2, [r3, #0]
		switch (toggle_flag) {
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <timerRun+0xbc>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d002      	beq.n	800163e <timerRun+0x82>
 8001638:	2b01      	cmp	r3, #1
 800163a:	d006      	beq.n	800164a <timerRun+0x8e>
				break;
 800163c:	e009      	b.n	8001652 <timerRun+0x96>
				++toggle_flag;
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <timerRun+0xbc>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	3301      	adds	r3, #1
 8001644:	4a0c      	ldr	r2, [pc, #48]	; (8001678 <timerRun+0xbc>)
 8001646:	6013      	str	r3, [r2, #0]
				break;
 8001648:	e003      	b.n	8001652 <timerRun+0x96>
				toggle_flag = 0;
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <timerRun+0xbc>)
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
				break;
 8001650:	bf00      	nop
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000100 	.word	0x20000100
 8001660:	20000104 	.word	0x20000104
 8001664:	20000108 	.word	0x20000108
 8001668:	2000010c 	.word	0x2000010c
 800166c:	20000118 	.word	0x20000118
 8001670:	20000110 	.word	0x20000110
 8001674:	20000114 	.word	0x20000114
 8001678:	2000011c 	.word	0x2000011c

0800167c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <HAL_MspInit+0x5c>)
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	4a14      	ldr	r2, [pc, #80]	; (80016d8 <HAL_MspInit+0x5c>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6193      	str	r3, [r2, #24]
 800168e:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_MspInit+0x5c>)
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <HAL_MspInit+0x5c>)
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	4a0e      	ldr	r2, [pc, #56]	; (80016d8 <HAL_MspInit+0x5c>)
 80016a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a4:	61d3      	str	r3, [r2, #28]
 80016a6:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <HAL_MspInit+0x5c>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016b2:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <HAL_MspInit+0x60>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	4a04      	ldr	r2, [pc, #16]	; (80016dc <HAL_MspInit+0x60>)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ce:	bf00      	nop
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40010000 	.word	0x40010000

080016e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08a      	sub	sp, #40	; 0x28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a1d      	ldr	r2, [pc, #116]	; (8001770 <HAL_I2C_MspInit+0x90>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d132      	bne.n	8001766 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001700:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <HAL_I2C_MspInit+0x94>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	4a1b      	ldr	r2, [pc, #108]	; (8001774 <HAL_I2C_MspInit+0x94>)
 8001706:	f043 0308 	orr.w	r3, r3, #8
 800170a:	6193      	str	r3, [r2, #24]
 800170c:	4b19      	ldr	r3, [pc, #100]	; (8001774 <HAL_I2C_MspInit+0x94>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	f003 0308 	and.w	r3, r3, #8
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001718:	f44f 7340 	mov.w	r3, #768	; 0x300
 800171c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800171e:	2312      	movs	r3, #18
 8001720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001722:	2303      	movs	r3, #3
 8001724:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	4812      	ldr	r0, [pc, #72]	; (8001778 <HAL_I2C_MspInit+0x98>)
 800172e:	f000 fb29 	bl	8001d84 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001732:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_I2C_MspInit+0x9c>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	f043 0302 	orr.w	r3, r3, #2
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
 8001748:	4a0c      	ldr	r2, [pc, #48]	; (800177c <HAL_I2C_MspInit+0x9c>)
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <HAL_I2C_MspInit+0x94>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	4a08      	ldr	r2, [pc, #32]	; (8001774 <HAL_I2C_MspInit+0x94>)
 8001754:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001758:	61d3      	str	r3, [r2, #28]
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_I2C_MspInit+0x94>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001766:	bf00      	nop
 8001768:	3728      	adds	r7, #40	; 0x28
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40005400 	.word	0x40005400
 8001774:	40021000 	.word	0x40021000
 8001778:	40010c00 	.word	0x40010c00
 800177c:	40010000 	.word	0x40010000

08001780 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001790:	d113      	bne.n	80017ba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001792:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <HAL_TIM_Base_MspInit+0x44>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	4a0b      	ldr	r2, [pc, #44]	; (80017c4 <HAL_TIM_Base_MspInit+0x44>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	61d3      	str	r3, [r2, #28]
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <HAL_TIM_Base_MspInit+0x44>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2100      	movs	r1, #0
 80017ae:	201c      	movs	r0, #28
 80017b0:	f000 fab1 	bl	8001d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017b4:	201c      	movs	r0, #28
 80017b6:	f000 faca 	bl	8001d4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40021000 	.word	0x40021000

080017c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 0310 	add.w	r3, r7, #16
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a15      	ldr	r2, [pc, #84]	; (8001838 <HAL_UART_MspInit+0x70>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d123      	bne.n	8001830 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017e8:	4b14      	ldr	r3, [pc, #80]	; (800183c <HAL_UART_MspInit+0x74>)
 80017ea:	69db      	ldr	r3, [r3, #28]
 80017ec:	4a13      	ldr	r2, [pc, #76]	; (800183c <HAL_UART_MspInit+0x74>)
 80017ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f2:	61d3      	str	r3, [r2, #28]
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <HAL_UART_MspInit+0x74>)
 80017f6:	69db      	ldr	r3, [r3, #28]
 80017f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001800:	4b0e      	ldr	r3, [pc, #56]	; (800183c <HAL_UART_MspInit+0x74>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	4a0d      	ldr	r2, [pc, #52]	; (800183c <HAL_UART_MspInit+0x74>)
 8001806:	f043 0304 	orr.w	r3, r3, #4
 800180a:	6193      	str	r3, [r2, #24]
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <HAL_UART_MspInit+0x74>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001818:	230c      	movs	r3, #12
 800181a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181c:	2302      	movs	r3, #2
 800181e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2302      	movs	r3, #2
 8001822:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001824:	f107 0310 	add.w	r3, r7, #16
 8001828:	4619      	mov	r1, r3
 800182a:	4805      	ldr	r0, [pc, #20]	; (8001840 <HAL_UART_MspInit+0x78>)
 800182c:	f000 faaa 	bl	8001d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001830:	bf00      	nop
 8001832:	3720      	adds	r7, #32
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40004400 	.word	0x40004400
 800183c:	40021000 	.word	0x40021000
 8001840:	40010800 	.word	0x40010800

08001844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <NMI_Handler+0x4>

0800184a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184e:	e7fe      	b.n	800184e <HardFault_Handler+0x4>

08001850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <MemManage_Handler+0x4>

08001856 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800185a:	e7fe      	b.n	800185a <BusFault_Handler+0x4>

0800185c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001860:	e7fe      	b.n	8001860 <UsageFault_Handler+0x4>

08001862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr

0800186e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr

0800187a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr

08001886 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800188a:	f000 f92d 	bl	8001ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001898:	4802      	ldr	r0, [pc, #8]	; (80018a4 <TIM2_IRQHandler+0x10>)
 800189a:	f001 fd95 	bl	80033c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000190 	.word	0x20000190

080018a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80018ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018b0:	f000 fc1c 	bl	80020ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c0:	4a14      	ldr	r2, [pc, #80]	; (8001914 <_sbrk+0x5c>)
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <_sbrk+0x60>)
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018cc:	4b13      	ldr	r3, [pc, #76]	; (800191c <_sbrk+0x64>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d102      	bne.n	80018da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <_sbrk+0x64>)
 80018d6:	4a12      	ldr	r2, [pc, #72]	; (8001920 <_sbrk+0x68>)
 80018d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <_sbrk+0x64>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d207      	bcs.n	80018f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e8:	f002 f99c 	bl	8003c24 <__errno>
 80018ec:	4603      	mov	r3, r0
 80018ee:	220c      	movs	r2, #12
 80018f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018f2:	f04f 33ff 	mov.w	r3, #4294967295
 80018f6:	e009      	b.n	800190c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <_sbrk+0x64>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018fe:	4b07      	ldr	r3, [pc, #28]	; (800191c <_sbrk+0x64>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	4a05      	ldr	r2, [pc, #20]	; (800191c <_sbrk+0x64>)
 8001908:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800190a:	68fb      	ldr	r3, [r7, #12]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20005000 	.word	0x20005000
 8001918:	00000400 	.word	0x00000400
 800191c:	20000120 	.word	0x20000120
 8001920:	20000238 	.word	0x20000238

08001924 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <setColor>:
 *  Created on: Oct 28, 2024
 *      Author: datph
 */
#include "traffic_light.h"

void setColor(GPIO_TypeDef *GPIO1, GPIO_TypeDef *GPIO2, uint16_t Led_1, uint16_t Led_2, GPIO_PinState Led_1_State, GPIO_PinState Led_2_State) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	4611      	mov	r1, r2
 800193c:	461a      	mov	r2, r3
 800193e:	460b      	mov	r3, r1
 8001940:	80fb      	strh	r3, [r7, #6]
 8001942:	4613      	mov	r3, r2
 8001944:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIO1, Led_1, Led_1_State);
 8001946:	7e3a      	ldrb	r2, [r7, #24]
 8001948:	88fb      	ldrh	r3, [r7, #6]
 800194a:	4619      	mov	r1, r3
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f000 fbb4 	bl	80020ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO2, Led_2, Led_2_State);
 8001952:	7f3a      	ldrb	r2, [r7, #28]
 8001954:	88bb      	ldrh	r3, [r7, #4]
 8001956:	4619      	mov	r1, r3
 8001958:	68b8      	ldr	r0, [r7, #8]
 800195a:	f000 fbae 	bl	80020ba <HAL_GPIO_WritePin>
}
 800195e:	bf00      	nop
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <setColorToggle>:

void setColorToggle(GPIO_TypeDef *GPIO1, GPIO_TypeDef *GPIO2, uint16_t Led_1, uint16_t Led_2, char color) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	4611      	mov	r1, r2
 8001974:	461a      	mov	r2, r3
 8001976:	460b      	mov	r3, r1
 8001978:	80fb      	strh	r3, [r7, #6]
 800197a:	4613      	mov	r3, r2
 800197c:	80bb      	strh	r3, [r7, #4]
	if (toggle_flag == 1) {
 800197e:	4b23      	ldr	r3, [pc, #140]	; (8001a0c <setColorToggle+0xa4>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d12f      	bne.n	80019e6 <setColorToggle+0x7e>
		switch (color) {
 8001986:	7e3b      	ldrb	r3, [r7, #24]
 8001988:	2b59      	cmp	r3, #89	; 0x59
 800198a:	d01f      	beq.n	80019cc <setColorToggle+0x64>
 800198c:	2b59      	cmp	r3, #89	; 0x59
 800198e:	dc37      	bgt.n	8001a00 <setColorToggle+0x98>
 8001990:	2b47      	cmp	r3, #71	; 0x47
 8001992:	d00e      	beq.n	80019b2 <setColorToggle+0x4a>
 8001994:	2b52      	cmp	r3, #82	; 0x52
 8001996:	d133      	bne.n	8001a00 <setColorToggle+0x98>
			case 'R':
				HAL_GPIO_WritePin(GPIO1, Led_1, ON);
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	2201      	movs	r2, #1
 800199c:	4619      	mov	r1, r3
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f000 fb8b 	bl	80020ba <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIO2, Led_2, ON);
 80019a4:	88bb      	ldrh	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	4619      	mov	r1, r3
 80019aa:	68b8      	ldr	r0, [r7, #8]
 80019ac:	f000 fb85 	bl	80020ba <HAL_GPIO_WritePin>
				break;
 80019b0:	e027      	b.n	8001a02 <setColorToggle+0x9a>
			case 'G':
				HAL_GPIO_WritePin(GPIO1, Led_1, ON);
 80019b2:	88fb      	ldrh	r3, [r7, #6]
 80019b4:	2201      	movs	r2, #1
 80019b6:	4619      	mov	r1, r3
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f000 fb7e 	bl	80020ba <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIO2, Led_2, OFF);
 80019be:	88bb      	ldrh	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	4619      	mov	r1, r3
 80019c4:	68b8      	ldr	r0, [r7, #8]
 80019c6:	f000 fb78 	bl	80020ba <HAL_GPIO_WritePin>
				break;
 80019ca:	e01a      	b.n	8001a02 <setColorToggle+0x9a>
			case 'Y':
				HAL_GPIO_WritePin(GPIO1, Led_1, OFF);
 80019cc:	88fb      	ldrh	r3, [r7, #6]
 80019ce:	2200      	movs	r2, #0
 80019d0:	4619      	mov	r1, r3
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f000 fb71 	bl	80020ba <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIO2, Led_2, ON);
 80019d8:	88bb      	ldrh	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	4619      	mov	r1, r3
 80019de:	68b8      	ldr	r0, [r7, #8]
 80019e0:	f000 fb6b 	bl	80020ba <HAL_GPIO_WritePin>
				break;
 80019e4:	e00d      	b.n	8001a02 <setColorToggle+0x9a>
			default:
				break;
			}
	}
	else {
		HAL_GPIO_WritePin(GPIO1, Led_1, OFF);
 80019e6:	88fb      	ldrh	r3, [r7, #6]
 80019e8:	2200      	movs	r2, #0
 80019ea:	4619      	mov	r1, r3
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f000 fb64 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO2, Led_2, OFF);
 80019f2:	88bb      	ldrh	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	4619      	mov	r1, r3
 80019f8:	68b8      	ldr	r0, [r7, #8]
 80019fa:	f000 fb5e 	bl	80020ba <HAL_GPIO_WritePin>
	}
}
 80019fe:	e000      	b.n	8001a02 <setColorToggle+0x9a>
				break;
 8001a00:	bf00      	nop
}
 8001a02:	bf00      	nop
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	2000011c 	.word	0x2000011c

08001a10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a10:	f7ff ff88 	bl	8001924 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a14:	480b      	ldr	r0, [pc, #44]	; (8001a44 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a16:	490c      	ldr	r1, [pc, #48]	; (8001a48 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a18:	4a0c      	ldr	r2, [pc, #48]	; (8001a4c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a1c:	e002      	b.n	8001a24 <LoopCopyDataInit>

08001a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a22:	3304      	adds	r3, #4

08001a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a28:	d3f9      	bcc.n	8001a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2a:	4a09      	ldr	r2, [pc, #36]	; (8001a50 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a2c:	4c09      	ldr	r4, [pc, #36]	; (8001a54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a30:	e001      	b.n	8001a36 <LoopFillZerobss>

08001a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a34:	3204      	adds	r2, #4

08001a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a38:	d3fb      	bcc.n	8001a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a3a:	f002 f8f9 	bl	8003c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a3e:	f7ff faa9 	bl	8000f94 <main>
  bx lr
 8001a42:	4770      	bx	lr
  ldr r0, =_sdata
 8001a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a48:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8001a4c:	08004640 	.word	0x08004640
  ldr r2, =_sbss
 8001a50:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8001a54:	20000234 	.word	0x20000234

08001a58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a58:	e7fe      	b.n	8001a58 <ADC1_2_IRQHandler>
	...

08001a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <HAL_Init+0x28>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a07      	ldr	r2, [pc, #28]	; (8001a84 <HAL_Init+0x28>)
 8001a66:	f043 0310 	orr.w	r3, r3, #16
 8001a6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a6c:	2003      	movs	r0, #3
 8001a6e:	f000 f947 	bl	8001d00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a72:	2000      	movs	r0, #0
 8001a74:	f000 f808 	bl	8001a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a78:	f7ff fe00 	bl	800167c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40022000 	.word	0x40022000

08001a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_InitTick+0x54>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <HAL_InitTick+0x58>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 f95f 	bl	8001d6a <HAL_SYSTICK_Config>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e00e      	b.n	8001ad4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b0f      	cmp	r3, #15
 8001aba:	d80a      	bhi.n	8001ad2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001abc:	2200      	movs	r2, #0
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac4:	f000 f927 	bl	8001d16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ac8:	4a06      	ldr	r2, [pc, #24]	; (8001ae4 <HAL_InitTick+0x5c>)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	e000      	b.n	8001ad4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000054 	.word	0x20000054
 8001ae0:	2000005c 	.word	0x2000005c
 8001ae4:	20000058 	.word	0x20000058

08001ae8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <HAL_IncTick+0x1c>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <HAL_IncTick+0x20>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4413      	add	r3, r2
 8001af8:	4a03      	ldr	r2, [pc, #12]	; (8001b08 <HAL_IncTick+0x20>)
 8001afa:	6013      	str	r3, [r2, #0]
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	2000005c 	.word	0x2000005c
 8001b08:	20000220 	.word	0x20000220

08001b0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b10:	4b02      	ldr	r3, [pc, #8]	; (8001b1c <HAL_GetTick+0x10>)
 8001b12:	681b      	ldr	r3, [r3, #0]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr
 8001b1c:	20000220 	.word	0x20000220

08001b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b28:	f7ff fff0 	bl	8001b0c <HAL_GetTick>
 8001b2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b38:	d005      	beq.n	8001b46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <HAL_Delay+0x44>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4413      	add	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b46:	bf00      	nop
 8001b48:	f7ff ffe0 	bl	8001b0c <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d8f7      	bhi.n	8001b48 <HAL_Delay+0x28>
  {
  }
}
 8001b58:	bf00      	nop
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	2000005c 	.word	0x2000005c

08001b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <__NVIC_SetPriorityGrouping+0x44>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b7e:	68ba      	ldr	r2, [r7, #8]
 8001b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b84:	4013      	ands	r3, r2
 8001b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b9a:	4a04      	ldr	r2, [pc, #16]	; (8001bac <__NVIC_SetPriorityGrouping+0x44>)
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	60d3      	str	r3, [r2, #12]
}
 8001ba0:	bf00      	nop
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb4:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	0a1b      	lsrs	r3, r3, #8
 8001bba:	f003 0307 	and.w	r3, r3, #7
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	db0b      	blt.n	8001bf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	f003 021f 	and.w	r2, r3, #31
 8001be4:	4906      	ldr	r1, [pc, #24]	; (8001c00 <__NVIC_EnableIRQ+0x34>)
 8001be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bea:	095b      	lsrs	r3, r3, #5
 8001bec:	2001      	movs	r0, #1
 8001bee:	fa00 f202 	lsl.w	r2, r0, r2
 8001bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr
 8001c00:	e000e100 	.word	0xe000e100

08001c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	6039      	str	r1, [r7, #0]
 8001c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	db0a      	blt.n	8001c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	490c      	ldr	r1, [pc, #48]	; (8001c50 <__NVIC_SetPriority+0x4c>)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	0112      	lsls	r2, r2, #4
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	440b      	add	r3, r1
 8001c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c2c:	e00a      	b.n	8001c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	4908      	ldr	r1, [pc, #32]	; (8001c54 <__NVIC_SetPriority+0x50>)
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	3b04      	subs	r3, #4
 8001c3c:	0112      	lsls	r2, r2, #4
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	440b      	add	r3, r1
 8001c42:	761a      	strb	r2, [r3, #24]
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	e000e100 	.word	0xe000e100
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b089      	sub	sp, #36	; 0x24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f1c3 0307 	rsb	r3, r3, #7
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	bf28      	it	cs
 8001c76:	2304      	movcs	r3, #4
 8001c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	2b06      	cmp	r3, #6
 8001c80:	d902      	bls.n	8001c88 <NVIC_EncodePriority+0x30>
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3b03      	subs	r3, #3
 8001c86:	e000      	b.n	8001c8a <NVIC_EncodePriority+0x32>
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43da      	mvns	r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8001caa:	43d9      	mvns	r1, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb0:	4313      	orrs	r3, r2
         );
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3724      	adds	r7, #36	; 0x24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr

08001cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ccc:	d301      	bcc.n	8001cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e00f      	b.n	8001cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <SysTick_Config+0x40>)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cda:	210f      	movs	r1, #15
 8001cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce0:	f7ff ff90 	bl	8001c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ce4:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <SysTick_Config+0x40>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cea:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <SysTick_Config+0x40>)
 8001cec:	2207      	movs	r2, #7
 8001cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	e000e010 	.word	0xe000e010

08001d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff ff2d 	bl	8001b68 <__NVIC_SetPriorityGrouping>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b086      	sub	sp, #24
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	607a      	str	r2, [r7, #4]
 8001d22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d28:	f7ff ff42 	bl	8001bb0 <__NVIC_GetPriorityGrouping>
 8001d2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	68b9      	ldr	r1, [r7, #8]
 8001d32:	6978      	ldr	r0, [r7, #20]
 8001d34:	f7ff ff90 	bl	8001c58 <NVIC_EncodePriority>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d3e:	4611      	mov	r1, r2
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff ff5f 	bl	8001c04 <__NVIC_SetPriority>
}
 8001d46:	bf00      	nop
 8001d48:	3718      	adds	r7, #24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	4603      	mov	r3, r0
 8001d56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff35 	bl	8001bcc <__NVIC_EnableIRQ>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff ffa2 	bl	8001cbc <SysTick_Config>
 8001d78:	4603      	mov	r3, r0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
	...

08001d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b08b      	sub	sp, #44	; 0x2c
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d92:	2300      	movs	r3, #0
 8001d94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d96:	e169      	b.n	800206c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d98:	2201      	movs	r2, #1
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	69fa      	ldr	r2, [r7, #28]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	f040 8158 	bne.w	8002066 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	4a9a      	ldr	r2, [pc, #616]	; (8002024 <HAL_GPIO_Init+0x2a0>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d05e      	beq.n	8001e7e <HAL_GPIO_Init+0xfa>
 8001dc0:	4a98      	ldr	r2, [pc, #608]	; (8002024 <HAL_GPIO_Init+0x2a0>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d875      	bhi.n	8001eb2 <HAL_GPIO_Init+0x12e>
 8001dc6:	4a98      	ldr	r2, [pc, #608]	; (8002028 <HAL_GPIO_Init+0x2a4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d058      	beq.n	8001e7e <HAL_GPIO_Init+0xfa>
 8001dcc:	4a96      	ldr	r2, [pc, #600]	; (8002028 <HAL_GPIO_Init+0x2a4>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d86f      	bhi.n	8001eb2 <HAL_GPIO_Init+0x12e>
 8001dd2:	4a96      	ldr	r2, [pc, #600]	; (800202c <HAL_GPIO_Init+0x2a8>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d052      	beq.n	8001e7e <HAL_GPIO_Init+0xfa>
 8001dd8:	4a94      	ldr	r2, [pc, #592]	; (800202c <HAL_GPIO_Init+0x2a8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d869      	bhi.n	8001eb2 <HAL_GPIO_Init+0x12e>
 8001dde:	4a94      	ldr	r2, [pc, #592]	; (8002030 <HAL_GPIO_Init+0x2ac>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d04c      	beq.n	8001e7e <HAL_GPIO_Init+0xfa>
 8001de4:	4a92      	ldr	r2, [pc, #584]	; (8002030 <HAL_GPIO_Init+0x2ac>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d863      	bhi.n	8001eb2 <HAL_GPIO_Init+0x12e>
 8001dea:	4a92      	ldr	r2, [pc, #584]	; (8002034 <HAL_GPIO_Init+0x2b0>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d046      	beq.n	8001e7e <HAL_GPIO_Init+0xfa>
 8001df0:	4a90      	ldr	r2, [pc, #576]	; (8002034 <HAL_GPIO_Init+0x2b0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d85d      	bhi.n	8001eb2 <HAL_GPIO_Init+0x12e>
 8001df6:	2b12      	cmp	r3, #18
 8001df8:	d82a      	bhi.n	8001e50 <HAL_GPIO_Init+0xcc>
 8001dfa:	2b12      	cmp	r3, #18
 8001dfc:	d859      	bhi.n	8001eb2 <HAL_GPIO_Init+0x12e>
 8001dfe:	a201      	add	r2, pc, #4	; (adr r2, 8001e04 <HAL_GPIO_Init+0x80>)
 8001e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e04:	08001e7f 	.word	0x08001e7f
 8001e08:	08001e59 	.word	0x08001e59
 8001e0c:	08001e6b 	.word	0x08001e6b
 8001e10:	08001ead 	.word	0x08001ead
 8001e14:	08001eb3 	.word	0x08001eb3
 8001e18:	08001eb3 	.word	0x08001eb3
 8001e1c:	08001eb3 	.word	0x08001eb3
 8001e20:	08001eb3 	.word	0x08001eb3
 8001e24:	08001eb3 	.word	0x08001eb3
 8001e28:	08001eb3 	.word	0x08001eb3
 8001e2c:	08001eb3 	.word	0x08001eb3
 8001e30:	08001eb3 	.word	0x08001eb3
 8001e34:	08001eb3 	.word	0x08001eb3
 8001e38:	08001eb3 	.word	0x08001eb3
 8001e3c:	08001eb3 	.word	0x08001eb3
 8001e40:	08001eb3 	.word	0x08001eb3
 8001e44:	08001eb3 	.word	0x08001eb3
 8001e48:	08001e61 	.word	0x08001e61
 8001e4c:	08001e75 	.word	0x08001e75
 8001e50:	4a79      	ldr	r2, [pc, #484]	; (8002038 <HAL_GPIO_Init+0x2b4>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d013      	beq.n	8001e7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e56:	e02c      	b.n	8001eb2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	623b      	str	r3, [r7, #32]
          break;
 8001e5e:	e029      	b.n	8001eb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	3304      	adds	r3, #4
 8001e66:	623b      	str	r3, [r7, #32]
          break;
 8001e68:	e024      	b.n	8001eb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	3308      	adds	r3, #8
 8001e70:	623b      	str	r3, [r7, #32]
          break;
 8001e72:	e01f      	b.n	8001eb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	330c      	adds	r3, #12
 8001e7a:	623b      	str	r3, [r7, #32]
          break;
 8001e7c:	e01a      	b.n	8001eb4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d102      	bne.n	8001e8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e86:	2304      	movs	r3, #4
 8001e88:	623b      	str	r3, [r7, #32]
          break;
 8001e8a:	e013      	b.n	8001eb4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d105      	bne.n	8001ea0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e94:	2308      	movs	r3, #8
 8001e96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69fa      	ldr	r2, [r7, #28]
 8001e9c:	611a      	str	r2, [r3, #16]
          break;
 8001e9e:	e009      	b.n	8001eb4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ea0:	2308      	movs	r3, #8
 8001ea2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69fa      	ldr	r2, [r7, #28]
 8001ea8:	615a      	str	r2, [r3, #20]
          break;
 8001eaa:	e003      	b.n	8001eb4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001eac:	2300      	movs	r3, #0
 8001eae:	623b      	str	r3, [r7, #32]
          break;
 8001eb0:	e000      	b.n	8001eb4 <HAL_GPIO_Init+0x130>
          break;
 8001eb2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	2bff      	cmp	r3, #255	; 0xff
 8001eb8:	d801      	bhi.n	8001ebe <HAL_GPIO_Init+0x13a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	e001      	b.n	8001ec2 <HAL_GPIO_Init+0x13e>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	2bff      	cmp	r3, #255	; 0xff
 8001ec8:	d802      	bhi.n	8001ed0 <HAL_GPIO_Init+0x14c>
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	e002      	b.n	8001ed6 <HAL_GPIO_Init+0x152>
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	3b08      	subs	r3, #8
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	210f      	movs	r1, #15
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	401a      	ands	r2, r3
 8001ee8:	6a39      	ldr	r1, [r7, #32]
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 80b1 	beq.w	8002066 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f04:	4b4d      	ldr	r3, [pc, #308]	; (800203c <HAL_GPIO_Init+0x2b8>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	4a4c      	ldr	r2, [pc, #304]	; (800203c <HAL_GPIO_Init+0x2b8>)
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	6193      	str	r3, [r2, #24]
 8001f10:	4b4a      	ldr	r3, [pc, #296]	; (800203c <HAL_GPIO_Init+0x2b8>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f1c:	4a48      	ldr	r2, [pc, #288]	; (8002040 <HAL_GPIO_Init+0x2bc>)
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	089b      	lsrs	r3, r3, #2
 8001f22:	3302      	adds	r3, #2
 8001f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	220f      	movs	r2, #15
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a40      	ldr	r2, [pc, #256]	; (8002044 <HAL_GPIO_Init+0x2c0>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d013      	beq.n	8001f70 <HAL_GPIO_Init+0x1ec>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a3f      	ldr	r2, [pc, #252]	; (8002048 <HAL_GPIO_Init+0x2c4>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d00d      	beq.n	8001f6c <HAL_GPIO_Init+0x1e8>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a3e      	ldr	r2, [pc, #248]	; (800204c <HAL_GPIO_Init+0x2c8>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d007      	beq.n	8001f68 <HAL_GPIO_Init+0x1e4>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a3d      	ldr	r2, [pc, #244]	; (8002050 <HAL_GPIO_Init+0x2cc>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d101      	bne.n	8001f64 <HAL_GPIO_Init+0x1e0>
 8001f60:	2303      	movs	r3, #3
 8001f62:	e006      	b.n	8001f72 <HAL_GPIO_Init+0x1ee>
 8001f64:	2304      	movs	r3, #4
 8001f66:	e004      	b.n	8001f72 <HAL_GPIO_Init+0x1ee>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	e002      	b.n	8001f72 <HAL_GPIO_Init+0x1ee>
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e000      	b.n	8001f72 <HAL_GPIO_Init+0x1ee>
 8001f70:	2300      	movs	r3, #0
 8001f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f74:	f002 0203 	and.w	r2, r2, #3
 8001f78:	0092      	lsls	r2, r2, #2
 8001f7a:	4093      	lsls	r3, r2
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f82:	492f      	ldr	r1, [pc, #188]	; (8002040 <HAL_GPIO_Init+0x2bc>)
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	089b      	lsrs	r3, r3, #2
 8001f88:	3302      	adds	r3, #2
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d006      	beq.n	8001faa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f9c:	4b2d      	ldr	r3, [pc, #180]	; (8002054 <HAL_GPIO_Init+0x2d0>)
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	492c      	ldr	r1, [pc, #176]	; (8002054 <HAL_GPIO_Init+0x2d0>)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	608b      	str	r3, [r1, #8]
 8001fa8:	e006      	b.n	8001fb8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001faa:	4b2a      	ldr	r3, [pc, #168]	; (8002054 <HAL_GPIO_Init+0x2d0>)
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	4928      	ldr	r1, [pc, #160]	; (8002054 <HAL_GPIO_Init+0x2d0>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d006      	beq.n	8001fd2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fc4:	4b23      	ldr	r3, [pc, #140]	; (8002054 <HAL_GPIO_Init+0x2d0>)
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	4922      	ldr	r1, [pc, #136]	; (8002054 <HAL_GPIO_Init+0x2d0>)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	60cb      	str	r3, [r1, #12]
 8001fd0:	e006      	b.n	8001fe0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fd2:	4b20      	ldr	r3, [pc, #128]	; (8002054 <HAL_GPIO_Init+0x2d0>)
 8001fd4:	68da      	ldr	r2, [r3, #12]
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	491e      	ldr	r1, [pc, #120]	; (8002054 <HAL_GPIO_Init+0x2d0>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d006      	beq.n	8001ffa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fec:	4b19      	ldr	r3, [pc, #100]	; (8002054 <HAL_GPIO_Init+0x2d0>)
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	4918      	ldr	r1, [pc, #96]	; (8002054 <HAL_GPIO_Init+0x2d0>)
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]
 8001ff8:	e006      	b.n	8002008 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ffa:	4b16      	ldr	r3, [pc, #88]	; (8002054 <HAL_GPIO_Init+0x2d0>)
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	43db      	mvns	r3, r3
 8002002:	4914      	ldr	r1, [pc, #80]	; (8002054 <HAL_GPIO_Init+0x2d0>)
 8002004:	4013      	ands	r3, r2
 8002006:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d021      	beq.n	8002058 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002014:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <HAL_GPIO_Init+0x2d0>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	490e      	ldr	r1, [pc, #56]	; (8002054 <HAL_GPIO_Init+0x2d0>)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	4313      	orrs	r3, r2
 800201e:	600b      	str	r3, [r1, #0]
 8002020:	e021      	b.n	8002066 <HAL_GPIO_Init+0x2e2>
 8002022:	bf00      	nop
 8002024:	10320000 	.word	0x10320000
 8002028:	10310000 	.word	0x10310000
 800202c:	10220000 	.word	0x10220000
 8002030:	10210000 	.word	0x10210000
 8002034:	10120000 	.word	0x10120000
 8002038:	10110000 	.word	0x10110000
 800203c:	40021000 	.word	0x40021000
 8002040:	40010000 	.word	0x40010000
 8002044:	40010800 	.word	0x40010800
 8002048:	40010c00 	.word	0x40010c00
 800204c:	40011000 	.word	0x40011000
 8002050:	40011400 	.word	0x40011400
 8002054:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002058:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <HAL_GPIO_Init+0x304>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	43db      	mvns	r3, r3
 8002060:	4909      	ldr	r1, [pc, #36]	; (8002088 <HAL_GPIO_Init+0x304>)
 8002062:	4013      	ands	r3, r2
 8002064:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	3301      	adds	r3, #1
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	fa22 f303 	lsr.w	r3, r2, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	f47f ae8e 	bne.w	8001d98 <HAL_GPIO_Init+0x14>
  }
}
 800207c:	bf00      	nop
 800207e:	bf00      	nop
 8002080:	372c      	adds	r7, #44	; 0x2c
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr
 8002088:	40010400 	.word	0x40010400

0800208c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	887b      	ldrh	r3, [r7, #2]
 800209e:	4013      	ands	r3, r2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d002      	beq.n	80020aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020a4:	2301      	movs	r3, #1
 80020a6:	73fb      	strb	r3, [r7, #15]
 80020a8:	e001      	b.n	80020ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020aa:	2300      	movs	r3, #0
 80020ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr

080020ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
 80020c2:	460b      	mov	r3, r1
 80020c4:	807b      	strh	r3, [r7, #2]
 80020c6:	4613      	mov	r3, r2
 80020c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020ca:	787b      	ldrb	r3, [r7, #1]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020d0:	887a      	ldrh	r2, [r7, #2]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020d6:	e003      	b.n	80020e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020d8:	887b      	ldrh	r3, [r7, #2]
 80020da:	041a      	lsls	r2, r3, #16
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	611a      	str	r2, [r3, #16]
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr
	...

080020ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020f6:	4b08      	ldr	r3, [pc, #32]	; (8002118 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020f8:	695a      	ldr	r2, [r3, #20]
 80020fa:	88fb      	ldrh	r3, [r7, #6]
 80020fc:	4013      	ands	r3, r2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d006      	beq.n	8002110 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002102:	4a05      	ldr	r2, [pc, #20]	; (8002118 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002104:	88fb      	ldrh	r3, [r7, #6]
 8002106:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002108:	88fb      	ldrh	r3, [r7, #6]
 800210a:	4618      	mov	r0, r3
 800210c:	f000 f806 	bl	800211c <HAL_GPIO_EXTI_Callback>
  }
}
 8002110:	bf00      	nop
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40010400 	.word	0x40010400

0800211c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr

08002130 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e12b      	b.n	800239a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d106      	bne.n	800215c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff fac2 	bl	80016e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2224      	movs	r2, #36	; 0x24
 8002160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0201 	bic.w	r2, r2, #1
 8002172:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002182:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002192:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002194:	f001 f830 	bl	80031f8 <HAL_RCC_GetPCLK1Freq>
 8002198:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	4a81      	ldr	r2, [pc, #516]	; (80023a4 <HAL_I2C_Init+0x274>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d807      	bhi.n	80021b4 <HAL_I2C_Init+0x84>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4a80      	ldr	r2, [pc, #512]	; (80023a8 <HAL_I2C_Init+0x278>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	bf94      	ite	ls
 80021ac:	2301      	movls	r3, #1
 80021ae:	2300      	movhi	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	e006      	b.n	80021c2 <HAL_I2C_Init+0x92>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4a7d      	ldr	r2, [pc, #500]	; (80023ac <HAL_I2C_Init+0x27c>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	bf94      	ite	ls
 80021bc:	2301      	movls	r3, #1
 80021be:	2300      	movhi	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e0e7      	b.n	800239a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	4a78      	ldr	r2, [pc, #480]	; (80023b0 <HAL_I2C_Init+0x280>)
 80021ce:	fba2 2303 	umull	r2, r3, r2, r3
 80021d2:	0c9b      	lsrs	r3, r3, #18
 80021d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68ba      	ldr	r2, [r7, #8]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	4a6a      	ldr	r2, [pc, #424]	; (80023a4 <HAL_I2C_Init+0x274>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d802      	bhi.n	8002204 <HAL_I2C_Init+0xd4>
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	3301      	adds	r3, #1
 8002202:	e009      	b.n	8002218 <HAL_I2C_Init+0xe8>
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800220a:	fb02 f303 	mul.w	r3, r2, r3
 800220e:	4a69      	ldr	r2, [pc, #420]	; (80023b4 <HAL_I2C_Init+0x284>)
 8002210:	fba2 2303 	umull	r2, r3, r2, r3
 8002214:	099b      	lsrs	r3, r3, #6
 8002216:	3301      	adds	r3, #1
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6812      	ldr	r2, [r2, #0]
 800221c:	430b      	orrs	r3, r1
 800221e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800222a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	495c      	ldr	r1, [pc, #368]	; (80023a4 <HAL_I2C_Init+0x274>)
 8002234:	428b      	cmp	r3, r1
 8002236:	d819      	bhi.n	800226c <HAL_I2C_Init+0x13c>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	1e59      	subs	r1, r3, #1
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	fbb1 f3f3 	udiv	r3, r1, r3
 8002246:	1c59      	adds	r1, r3, #1
 8002248:	f640 73fc 	movw	r3, #4092	; 0xffc
 800224c:	400b      	ands	r3, r1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00a      	beq.n	8002268 <HAL_I2C_Init+0x138>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	1e59      	subs	r1, r3, #1
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002260:	3301      	adds	r3, #1
 8002262:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002266:	e051      	b.n	800230c <HAL_I2C_Init+0x1dc>
 8002268:	2304      	movs	r3, #4
 800226a:	e04f      	b.n	800230c <HAL_I2C_Init+0x1dc>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d111      	bne.n	8002298 <HAL_I2C_Init+0x168>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	1e58      	subs	r0, r3, #1
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6859      	ldr	r1, [r3, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	440b      	add	r3, r1
 8002282:	fbb0 f3f3 	udiv	r3, r0, r3
 8002286:	3301      	adds	r3, #1
 8002288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800228c:	2b00      	cmp	r3, #0
 800228e:	bf0c      	ite	eq
 8002290:	2301      	moveq	r3, #1
 8002292:	2300      	movne	r3, #0
 8002294:	b2db      	uxtb	r3, r3
 8002296:	e012      	b.n	80022be <HAL_I2C_Init+0x18e>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	1e58      	subs	r0, r3, #1
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6859      	ldr	r1, [r3, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	0099      	lsls	r1, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ae:	3301      	adds	r3, #1
 80022b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	bf0c      	ite	eq
 80022b8:	2301      	moveq	r3, #1
 80022ba:	2300      	movne	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_I2C_Init+0x196>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e022      	b.n	800230c <HAL_I2C_Init+0x1dc>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10e      	bne.n	80022ec <HAL_I2C_Init+0x1bc>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	1e58      	subs	r0, r3, #1
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6859      	ldr	r1, [r3, #4]
 80022d6:	460b      	mov	r3, r1
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	440b      	add	r3, r1
 80022dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80022e0:	3301      	adds	r3, #1
 80022e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022ea:	e00f      	b.n	800230c <HAL_I2C_Init+0x1dc>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	1e58      	subs	r0, r3, #1
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6859      	ldr	r1, [r3, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	0099      	lsls	r1, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002302:	3301      	adds	r3, #1
 8002304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002308:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	6809      	ldr	r1, [r1, #0]
 8002310:	4313      	orrs	r3, r2
 8002312:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69da      	ldr	r2, [r3, #28]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800233a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	6911      	ldr	r1, [r2, #16]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	68d2      	ldr	r2, [r2, #12]
 8002346:	4311      	orrs	r1, r2
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6812      	ldr	r2, [r2, #0]
 800234c:	430b      	orrs	r3, r1
 800234e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	695a      	ldr	r2, [r3, #20]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 0201 	orr.w	r2, r2, #1
 800237a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2220      	movs	r2, #32
 8002386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	000186a0 	.word	0x000186a0
 80023a8:	001e847f 	.word	0x001e847f
 80023ac:	003d08ff 	.word	0x003d08ff
 80023b0:	431bde83 	.word	0x431bde83
 80023b4:	10624dd3 	.word	0x10624dd3

080023b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b088      	sub	sp, #32
 80023bc:	af02      	add	r7, sp, #8
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	607a      	str	r2, [r7, #4]
 80023c2:	461a      	mov	r2, r3
 80023c4:	460b      	mov	r3, r1
 80023c6:	817b      	strh	r3, [r7, #10]
 80023c8:	4613      	mov	r3, r2
 80023ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023cc:	f7ff fb9e 	bl	8001b0c <HAL_GetTick>
 80023d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b20      	cmp	r3, #32
 80023dc:	f040 80e0 	bne.w	80025a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	2319      	movs	r3, #25
 80023e6:	2201      	movs	r2, #1
 80023e8:	4970      	ldr	r1, [pc, #448]	; (80025ac <HAL_I2C_Master_Transmit+0x1f4>)
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 f964 	bl	80026b8 <I2C_WaitOnFlagUntilTimeout>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80023f6:	2302      	movs	r3, #2
 80023f8:	e0d3      	b.n	80025a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <HAL_I2C_Master_Transmit+0x50>
 8002404:	2302      	movs	r3, #2
 8002406:	e0cc      	b.n	80025a2 <HAL_I2C_Master_Transmit+0x1ea>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b01      	cmp	r3, #1
 800241c:	d007      	beq.n	800242e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f042 0201 	orr.w	r2, r2, #1
 800242c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800243c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2221      	movs	r2, #33	; 0x21
 8002442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2210      	movs	r2, #16
 800244a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	893a      	ldrh	r2, [r7, #8]
 800245e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002464:	b29a      	uxth	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	4a50      	ldr	r2, [pc, #320]	; (80025b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800246e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002470:	8979      	ldrh	r1, [r7, #10]
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	6a3a      	ldr	r2, [r7, #32]
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 f89c 	bl	80025b4 <I2C_MasterRequestWrite>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e08d      	b.n	80025a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002486:	2300      	movs	r3, #0
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	613b      	str	r3, [r7, #16]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	613b      	str	r3, [r7, #16]
 800249a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800249c:	e066      	b.n	800256c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	6a39      	ldr	r1, [r7, #32]
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 fa22 	bl	80028ec <I2C_WaitOnTXEFlagUntilTimeout>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00d      	beq.n	80024ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	d107      	bne.n	80024c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e06b      	b.n	80025a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ce:	781a      	ldrb	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	1c5a      	adds	r2, r3, #1
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	3b01      	subs	r3, #1
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b04      	cmp	r3, #4
 8002506:	d11b      	bne.n	8002540 <HAL_I2C_Master_Transmit+0x188>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250c:	2b00      	cmp	r3, #0
 800250e:	d017      	beq.n	8002540 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	781a      	ldrb	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	1c5a      	adds	r2, r3, #1
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252a:	b29b      	uxth	r3, r3
 800252c:	3b01      	subs	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	6a39      	ldr	r1, [r7, #32]
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 fa19 	bl	800297c <I2C_WaitOnBTFFlagUntilTimeout>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00d      	beq.n	800256c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	2b04      	cmp	r3, #4
 8002556:	d107      	bne.n	8002568 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002566:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e01a      	b.n	80025a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002570:	2b00      	cmp	r3, #0
 8002572:	d194      	bne.n	800249e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002582:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2220      	movs	r2, #32
 8002588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800259c:	2300      	movs	r3, #0
 800259e:	e000      	b.n	80025a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025a0:	2302      	movs	r3, #2
  }
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	00100002 	.word	0x00100002
 80025b0:	ffff0000 	.word	0xffff0000

080025b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b088      	sub	sp, #32
 80025b8:	af02      	add	r7, sp, #8
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	607a      	str	r2, [r7, #4]
 80025be:	603b      	str	r3, [r7, #0]
 80025c0:	460b      	mov	r3, r1
 80025c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	d006      	beq.n	80025de <I2C_MasterRequestWrite+0x2a>
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d003      	beq.n	80025de <I2C_MasterRequestWrite+0x2a>
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025dc:	d108      	bne.n	80025f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	e00b      	b.n	8002608 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	2b12      	cmp	r3, #18
 80025f6:	d107      	bne.n	8002608 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002606:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 f84f 	bl	80026b8 <I2C_WaitOnFlagUntilTimeout>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00d      	beq.n	800263c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800262e:	d103      	bne.n	8002638 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002636:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e035      	b.n	80026a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002644:	d108      	bne.n	8002658 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002646:	897b      	ldrh	r3, [r7, #10]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	461a      	mov	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002654:	611a      	str	r2, [r3, #16]
 8002656:	e01b      	b.n	8002690 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002658:	897b      	ldrh	r3, [r7, #10]
 800265a:	11db      	asrs	r3, r3, #7
 800265c:	b2db      	uxtb	r3, r3
 800265e:	f003 0306 	and.w	r3, r3, #6
 8002662:	b2db      	uxtb	r3, r3
 8002664:	f063 030f 	orn	r3, r3, #15
 8002668:	b2da      	uxtb	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	490e      	ldr	r1, [pc, #56]	; (80026b0 <I2C_MasterRequestWrite+0xfc>)
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 f898 	bl	80027ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e010      	b.n	80026a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002686:	897b      	ldrh	r3, [r7, #10]
 8002688:	b2da      	uxtb	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	4907      	ldr	r1, [pc, #28]	; (80026b4 <I2C_MasterRequestWrite+0x100>)
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 f888 	bl	80027ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	00010008 	.word	0x00010008
 80026b4:	00010002 	.word	0x00010002

080026b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	603b      	str	r3, [r7, #0]
 80026c4:	4613      	mov	r3, r2
 80026c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026c8:	e048      	b.n	800275c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d0:	d044      	beq.n	800275c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026d2:	f7ff fa1b 	bl	8001b0c <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d302      	bcc.n	80026e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d139      	bne.n	800275c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	0c1b      	lsrs	r3, r3, #16
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d10d      	bne.n	800270e <I2C_WaitOnFlagUntilTimeout+0x56>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	43da      	mvns	r2, r3
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	4013      	ands	r3, r2
 80026fe:	b29b      	uxth	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	bf0c      	ite	eq
 8002704:	2301      	moveq	r3, #1
 8002706:	2300      	movne	r3, #0
 8002708:	b2db      	uxtb	r3, r3
 800270a:	461a      	mov	r2, r3
 800270c:	e00c      	b.n	8002728 <I2C_WaitOnFlagUntilTimeout+0x70>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	43da      	mvns	r2, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	4013      	ands	r3, r2
 800271a:	b29b      	uxth	r3, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	bf0c      	ite	eq
 8002720:	2301      	moveq	r3, #1
 8002722:	2300      	movne	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	461a      	mov	r2, r3
 8002728:	79fb      	ldrb	r3, [r7, #7]
 800272a:	429a      	cmp	r2, r3
 800272c:	d116      	bne.n	800275c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2220      	movs	r2, #32
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	f043 0220 	orr.w	r2, r3, #32
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e023      	b.n	80027a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	0c1b      	lsrs	r3, r3, #16
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b01      	cmp	r3, #1
 8002764:	d10d      	bne.n	8002782 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	43da      	mvns	r2, r3
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	4013      	ands	r3, r2
 8002772:	b29b      	uxth	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	bf0c      	ite	eq
 8002778:	2301      	moveq	r3, #1
 800277a:	2300      	movne	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	461a      	mov	r2, r3
 8002780:	e00c      	b.n	800279c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	43da      	mvns	r2, r3
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	4013      	ands	r3, r2
 800278e:	b29b      	uxth	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	bf0c      	ite	eq
 8002794:	2301      	moveq	r3, #1
 8002796:	2300      	movne	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	461a      	mov	r2, r3
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d093      	beq.n	80026ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027ba:	e071      	b.n	80028a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ca:	d123      	bne.n	8002814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2220      	movs	r2, #32
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	f043 0204 	orr.w	r2, r3, #4
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e067      	b.n	80028e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281a:	d041      	beq.n	80028a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800281c:	f7ff f976 	bl	8001b0c <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	429a      	cmp	r2, r3
 800282a:	d302      	bcc.n	8002832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d136      	bne.n	80028a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	0c1b      	lsrs	r3, r3, #16
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b01      	cmp	r3, #1
 800283a:	d10c      	bne.n	8002856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	43da      	mvns	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	4013      	ands	r3, r2
 8002848:	b29b      	uxth	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	bf14      	ite	ne
 800284e:	2301      	movne	r3, #1
 8002850:	2300      	moveq	r3, #0
 8002852:	b2db      	uxtb	r3, r3
 8002854:	e00b      	b.n	800286e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	43da      	mvns	r2, r3
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	4013      	ands	r3, r2
 8002862:	b29b      	uxth	r3, r3
 8002864:	2b00      	cmp	r3, #0
 8002866:	bf14      	ite	ne
 8002868:	2301      	movne	r3, #1
 800286a:	2300      	moveq	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d016      	beq.n	80028a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2220      	movs	r2, #32
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	f043 0220 	orr.w	r2, r3, #32
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e021      	b.n	80028e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	0c1b      	lsrs	r3, r3, #16
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d10c      	bne.n	80028c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	43da      	mvns	r2, r3
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	4013      	ands	r3, r2
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	bf14      	ite	ne
 80028bc:	2301      	movne	r3, #1
 80028be:	2300      	moveq	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	e00b      	b.n	80028dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	43da      	mvns	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	4013      	ands	r3, r2
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	bf14      	ite	ne
 80028d6:	2301      	movne	r3, #1
 80028d8:	2300      	moveq	r3, #0
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f47f af6d 	bne.w	80027bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028f8:	e034      	b.n	8002964 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 f886 	bl	8002a0c <I2C_IsAcknowledgeFailed>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e034      	b.n	8002974 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002910:	d028      	beq.n	8002964 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002912:	f7ff f8fb 	bl	8001b0c <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	429a      	cmp	r2, r3
 8002920:	d302      	bcc.n	8002928 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d11d      	bne.n	8002964 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002932:	2b80      	cmp	r3, #128	; 0x80
 8002934:	d016      	beq.n	8002964 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	f043 0220 	orr.w	r2, r3, #32
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e007      	b.n	8002974 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800296e:	2b80      	cmp	r3, #128	; 0x80
 8002970:	d1c3      	bne.n	80028fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002988:	e034      	b.n	80029f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 f83e 	bl	8002a0c <I2C_IsAcknowledgeFailed>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e034      	b.n	8002a04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a0:	d028      	beq.n	80029f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029a2:	f7ff f8b3 	bl	8001b0c <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d302      	bcc.n	80029b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d11d      	bne.n	80029f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d016      	beq.n	80029f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2220      	movs	r2, #32
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	f043 0220 	orr.w	r2, r3, #32
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e007      	b.n	8002a04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d1c3      	bne.n	800298a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a22:	d11b      	bne.n	8002a5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2220      	movs	r2, #32
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	f043 0204 	orr.w	r2, r3, #4
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr

08002a68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e26c      	b.n	8002f54 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 8087 	beq.w	8002b96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a88:	4b92      	ldr	r3, [pc, #584]	; (8002cd4 <HAL_RCC_OscConfig+0x26c>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 030c 	and.w	r3, r3, #12
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d00c      	beq.n	8002aae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a94:	4b8f      	ldr	r3, [pc, #572]	; (8002cd4 <HAL_RCC_OscConfig+0x26c>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 030c 	and.w	r3, r3, #12
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d112      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x5e>
 8002aa0:	4b8c      	ldr	r3, [pc, #560]	; (8002cd4 <HAL_RCC_OscConfig+0x26c>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aac:	d10b      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aae:	4b89      	ldr	r3, [pc, #548]	; (8002cd4 <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d06c      	beq.n	8002b94 <HAL_RCC_OscConfig+0x12c>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d168      	bne.n	8002b94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e246      	b.n	8002f54 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ace:	d106      	bne.n	8002ade <HAL_RCC_OscConfig+0x76>
 8002ad0:	4b80      	ldr	r3, [pc, #512]	; (8002cd4 <HAL_RCC_OscConfig+0x26c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a7f      	ldr	r2, [pc, #508]	; (8002cd4 <HAL_RCC_OscConfig+0x26c>)
 8002ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	e02e      	b.n	8002b3c <HAL_RCC_OscConfig+0xd4>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10c      	bne.n	8002b00 <HAL_RCC_OscConfig+0x98>
 8002ae6:	4b7b      	ldr	r3, [pc, #492]	; (8002cd4 <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a7a      	ldr	r2, [pc, #488]	; (8002cd4 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	4b78      	ldr	r3, [pc, #480]	; (8002cd4 <HAL_RCC_OscConfig+0x26c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a77      	ldr	r2, [pc, #476]	; (8002cd4 <HAL_RCC_OscConfig+0x26c>)
 8002af8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	e01d      	b.n	8002b3c <HAL_RCC_OscConfig+0xd4>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b08:	d10c      	bne.n	8002b24 <HAL_RCC_OscConfig+0xbc>
 8002b0a:	4b72      	ldr	r3, [pc, #456]	; (8002cd4 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a71      	ldr	r2, [pc, #452]	; (8002cd4 <HAL_RCC_OscConfig+0x26c>)
 8002b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	4b6f      	ldr	r3, [pc, #444]	; (8002cd4 <HAL_RCC_OscConfig+0x26c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a6e      	ldr	r2, [pc, #440]	; (8002cd4 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	e00b      	b.n	8002b3c <HAL_RCC_OscConfig+0xd4>
 8002b24:	4b6b      	ldr	r3, [pc, #428]	; (8002cd4 <HAL_RCC_OscConfig+0x26c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a6a      	ldr	r2, [pc, #424]	; (8002cd4 <HAL_RCC_OscConfig+0x26c>)
 8002b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	4b68      	ldr	r3, [pc, #416]	; (8002cd4 <HAL_RCC_OscConfig+0x26c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a67      	ldr	r2, [pc, #412]	; (8002cd4 <HAL_RCC_OscConfig+0x26c>)
 8002b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d013      	beq.n	8002b6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b44:	f7fe ffe2 	bl	8001b0c <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b4c:	f7fe ffde 	bl	8001b0c <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b64      	cmp	r3, #100	; 0x64
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e1fa      	b.n	8002f54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b5e:	4b5d      	ldr	r3, [pc, #372]	; (8002cd4 <HAL_RCC_OscConfig+0x26c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCC_OscConfig+0xe4>
 8002b6a:	e014      	b.n	8002b96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6c:	f7fe ffce 	bl	8001b0c <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b74:	f7fe ffca 	bl	8001b0c <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b64      	cmp	r3, #100	; 0x64
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e1e6      	b.n	8002f54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b86:	4b53      	ldr	r3, [pc, #332]	; (8002cd4 <HAL_RCC_OscConfig+0x26c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f0      	bne.n	8002b74 <HAL_RCC_OscConfig+0x10c>
 8002b92:	e000      	b.n	8002b96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d063      	beq.n	8002c6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ba2:	4b4c      	ldr	r3, [pc, #304]	; (8002cd4 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 030c 	and.w	r3, r3, #12
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00b      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bae:	4b49      	ldr	r3, [pc, #292]	; (8002cd4 <HAL_RCC_OscConfig+0x26c>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
 8002bb6:	2b08      	cmp	r3, #8
 8002bb8:	d11c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x18c>
 8002bba:	4b46      	ldr	r3, [pc, #280]	; (8002cd4 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d116      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bc6:	4b43      	ldr	r3, [pc, #268]	; (8002cd4 <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d005      	beq.n	8002bde <HAL_RCC_OscConfig+0x176>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d001      	beq.n	8002bde <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e1ba      	b.n	8002f54 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bde:	4b3d      	ldr	r3, [pc, #244]	; (8002cd4 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4939      	ldr	r1, [pc, #228]	; (8002cd4 <HAL_RCC_OscConfig+0x26c>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bf2:	e03a      	b.n	8002c6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d020      	beq.n	8002c3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bfc:	4b36      	ldr	r3, [pc, #216]	; (8002cd8 <HAL_RCC_OscConfig+0x270>)
 8002bfe:	2201      	movs	r2, #1
 8002c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c02:	f7fe ff83 	bl	8001b0c <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c08:	e008      	b.n	8002c1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c0a:	f7fe ff7f 	bl	8001b0c <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e19b      	b.n	8002f54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1c:	4b2d      	ldr	r3, [pc, #180]	; (8002cd4 <HAL_RCC_OscConfig+0x26c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0f0      	beq.n	8002c0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c28:	4b2a      	ldr	r3, [pc, #168]	; (8002cd4 <HAL_RCC_OscConfig+0x26c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	4927      	ldr	r1, [pc, #156]	; (8002cd4 <HAL_RCC_OscConfig+0x26c>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	600b      	str	r3, [r1, #0]
 8002c3c:	e015      	b.n	8002c6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c3e:	4b26      	ldr	r3, [pc, #152]	; (8002cd8 <HAL_RCC_OscConfig+0x270>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c44:	f7fe ff62 	bl	8001b0c <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c4c:	f7fe ff5e 	bl	8001b0c <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e17a      	b.n	8002f54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c5e:	4b1d      	ldr	r3, [pc, #116]	; (8002cd4 <HAL_RCC_OscConfig+0x26c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d03a      	beq.n	8002cec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d019      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c7e:	4b17      	ldr	r3, [pc, #92]	; (8002cdc <HAL_RCC_OscConfig+0x274>)
 8002c80:	2201      	movs	r2, #1
 8002c82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c84:	f7fe ff42 	bl	8001b0c <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c8c:	f7fe ff3e 	bl	8001b0c <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e15a      	b.n	8002f54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c9e:	4b0d      	ldr	r3, [pc, #52]	; (8002cd4 <HAL_RCC_OscConfig+0x26c>)
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f0      	beq.n	8002c8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002caa:	2001      	movs	r0, #1
 8002cac:	f000 facc 	bl	8003248 <RCC_Delay>
 8002cb0:	e01c      	b.n	8002cec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cb2:	4b0a      	ldr	r3, [pc, #40]	; (8002cdc <HAL_RCC_OscConfig+0x274>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb8:	f7fe ff28 	bl	8001b0c <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cbe:	e00f      	b.n	8002ce0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cc0:	f7fe ff24 	bl	8001b0c <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d908      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e140      	b.n	8002f54 <HAL_RCC_OscConfig+0x4ec>
 8002cd2:	bf00      	nop
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	42420000 	.word	0x42420000
 8002cdc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ce0:	4b9e      	ldr	r3, [pc, #632]	; (8002f5c <HAL_RCC_OscConfig+0x4f4>)
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1e9      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 80a6 	beq.w	8002e46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cfe:	4b97      	ldr	r3, [pc, #604]	; (8002f5c <HAL_RCC_OscConfig+0x4f4>)
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10d      	bne.n	8002d26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d0a:	4b94      	ldr	r3, [pc, #592]	; (8002f5c <HAL_RCC_OscConfig+0x4f4>)
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	4a93      	ldr	r2, [pc, #588]	; (8002f5c <HAL_RCC_OscConfig+0x4f4>)
 8002d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d14:	61d3      	str	r3, [r2, #28]
 8002d16:	4b91      	ldr	r3, [pc, #580]	; (8002f5c <HAL_RCC_OscConfig+0x4f4>)
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1e:	60bb      	str	r3, [r7, #8]
 8002d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d22:	2301      	movs	r3, #1
 8002d24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d26:	4b8e      	ldr	r3, [pc, #568]	; (8002f60 <HAL_RCC_OscConfig+0x4f8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d118      	bne.n	8002d64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d32:	4b8b      	ldr	r3, [pc, #556]	; (8002f60 <HAL_RCC_OscConfig+0x4f8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a8a      	ldr	r2, [pc, #552]	; (8002f60 <HAL_RCC_OscConfig+0x4f8>)
 8002d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d3e:	f7fe fee5 	bl	8001b0c <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d46:	f7fe fee1 	bl	8001b0c <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b64      	cmp	r3, #100	; 0x64
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e0fd      	b.n	8002f54 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d58:	4b81      	ldr	r3, [pc, #516]	; (8002f60 <HAL_RCC_OscConfig+0x4f8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0f0      	beq.n	8002d46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d106      	bne.n	8002d7a <HAL_RCC_OscConfig+0x312>
 8002d6c:	4b7b      	ldr	r3, [pc, #492]	; (8002f5c <HAL_RCC_OscConfig+0x4f4>)
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	4a7a      	ldr	r2, [pc, #488]	; (8002f5c <HAL_RCC_OscConfig+0x4f4>)
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	6213      	str	r3, [r2, #32]
 8002d78:	e02d      	b.n	8002dd6 <HAL_RCC_OscConfig+0x36e>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10c      	bne.n	8002d9c <HAL_RCC_OscConfig+0x334>
 8002d82:	4b76      	ldr	r3, [pc, #472]	; (8002f5c <HAL_RCC_OscConfig+0x4f4>)
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	4a75      	ldr	r2, [pc, #468]	; (8002f5c <HAL_RCC_OscConfig+0x4f4>)
 8002d88:	f023 0301 	bic.w	r3, r3, #1
 8002d8c:	6213      	str	r3, [r2, #32]
 8002d8e:	4b73      	ldr	r3, [pc, #460]	; (8002f5c <HAL_RCC_OscConfig+0x4f4>)
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	4a72      	ldr	r2, [pc, #456]	; (8002f5c <HAL_RCC_OscConfig+0x4f4>)
 8002d94:	f023 0304 	bic.w	r3, r3, #4
 8002d98:	6213      	str	r3, [r2, #32]
 8002d9a:	e01c      	b.n	8002dd6 <HAL_RCC_OscConfig+0x36e>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	2b05      	cmp	r3, #5
 8002da2:	d10c      	bne.n	8002dbe <HAL_RCC_OscConfig+0x356>
 8002da4:	4b6d      	ldr	r3, [pc, #436]	; (8002f5c <HAL_RCC_OscConfig+0x4f4>)
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	4a6c      	ldr	r2, [pc, #432]	; (8002f5c <HAL_RCC_OscConfig+0x4f4>)
 8002daa:	f043 0304 	orr.w	r3, r3, #4
 8002dae:	6213      	str	r3, [r2, #32]
 8002db0:	4b6a      	ldr	r3, [pc, #424]	; (8002f5c <HAL_RCC_OscConfig+0x4f4>)
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	4a69      	ldr	r2, [pc, #420]	; (8002f5c <HAL_RCC_OscConfig+0x4f4>)
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	6213      	str	r3, [r2, #32]
 8002dbc:	e00b      	b.n	8002dd6 <HAL_RCC_OscConfig+0x36e>
 8002dbe:	4b67      	ldr	r3, [pc, #412]	; (8002f5c <HAL_RCC_OscConfig+0x4f4>)
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	4a66      	ldr	r2, [pc, #408]	; (8002f5c <HAL_RCC_OscConfig+0x4f4>)
 8002dc4:	f023 0301 	bic.w	r3, r3, #1
 8002dc8:	6213      	str	r3, [r2, #32]
 8002dca:	4b64      	ldr	r3, [pc, #400]	; (8002f5c <HAL_RCC_OscConfig+0x4f4>)
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	4a63      	ldr	r2, [pc, #396]	; (8002f5c <HAL_RCC_OscConfig+0x4f4>)
 8002dd0:	f023 0304 	bic.w	r3, r3, #4
 8002dd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d015      	beq.n	8002e0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dde:	f7fe fe95 	bl	8001b0c <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de4:	e00a      	b.n	8002dfc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de6:	f7fe fe91 	bl	8001b0c <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e0ab      	b.n	8002f54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dfc:	4b57      	ldr	r3, [pc, #348]	; (8002f5c <HAL_RCC_OscConfig+0x4f4>)
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0ee      	beq.n	8002de6 <HAL_RCC_OscConfig+0x37e>
 8002e08:	e014      	b.n	8002e34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e0a:	f7fe fe7f 	bl	8001b0c <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e10:	e00a      	b.n	8002e28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e12:	f7fe fe7b 	bl	8001b0c <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e095      	b.n	8002f54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e28:	4b4c      	ldr	r3, [pc, #304]	; (8002f5c <HAL_RCC_OscConfig+0x4f4>)
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1ee      	bne.n	8002e12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e34:	7dfb      	ldrb	r3, [r7, #23]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d105      	bne.n	8002e46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e3a:	4b48      	ldr	r3, [pc, #288]	; (8002f5c <HAL_RCC_OscConfig+0x4f4>)
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	4a47      	ldr	r2, [pc, #284]	; (8002f5c <HAL_RCC_OscConfig+0x4f4>)
 8002e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 8081 	beq.w	8002f52 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e50:	4b42      	ldr	r3, [pc, #264]	; (8002f5c <HAL_RCC_OscConfig+0x4f4>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f003 030c 	and.w	r3, r3, #12
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d061      	beq.n	8002f20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d146      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e64:	4b3f      	ldr	r3, [pc, #252]	; (8002f64 <HAL_RCC_OscConfig+0x4fc>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6a:	f7fe fe4f 	bl	8001b0c <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e72:	f7fe fe4b 	bl	8001b0c <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e067      	b.n	8002f54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e84:	4b35      	ldr	r3, [pc, #212]	; (8002f5c <HAL_RCC_OscConfig+0x4f4>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1f0      	bne.n	8002e72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e98:	d108      	bne.n	8002eac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e9a:	4b30      	ldr	r3, [pc, #192]	; (8002f5c <HAL_RCC_OscConfig+0x4f4>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	492d      	ldr	r1, [pc, #180]	; (8002f5c <HAL_RCC_OscConfig+0x4f4>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eac:	4b2b      	ldr	r3, [pc, #172]	; (8002f5c <HAL_RCC_OscConfig+0x4f4>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a19      	ldr	r1, [r3, #32]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	4927      	ldr	r1, [pc, #156]	; (8002f5c <HAL_RCC_OscConfig+0x4f4>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ec4:	4b27      	ldr	r3, [pc, #156]	; (8002f64 <HAL_RCC_OscConfig+0x4fc>)
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eca:	f7fe fe1f 	bl	8001b0c <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed2:	f7fe fe1b 	bl	8001b0c <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e037      	b.n	8002f54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ee4:	4b1d      	ldr	r3, [pc, #116]	; (8002f5c <HAL_RCC_OscConfig+0x4f4>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0f0      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x46a>
 8002ef0:	e02f      	b.n	8002f52 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef2:	4b1c      	ldr	r3, [pc, #112]	; (8002f64 <HAL_RCC_OscConfig+0x4fc>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef8:	f7fe fe08 	bl	8001b0c <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f00:	f7fe fe04 	bl	8001b0c <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e020      	b.n	8002f54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f12:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <HAL_RCC_OscConfig+0x4f4>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f0      	bne.n	8002f00 <HAL_RCC_OscConfig+0x498>
 8002f1e:	e018      	b.n	8002f52 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e013      	b.n	8002f54 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <HAL_RCC_OscConfig+0x4f4>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d106      	bne.n	8002f4e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d001      	beq.n	8002f52 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e000      	b.n	8002f54 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3718      	adds	r7, #24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	40007000 	.word	0x40007000
 8002f64:	42420060 	.word	0x42420060

08002f68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0d0      	b.n	800311e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f7c:	4b6a      	ldr	r3, [pc, #424]	; (8003128 <HAL_RCC_ClockConfig+0x1c0>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d910      	bls.n	8002fac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8a:	4b67      	ldr	r3, [pc, #412]	; (8003128 <HAL_RCC_ClockConfig+0x1c0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f023 0207 	bic.w	r2, r3, #7
 8002f92:	4965      	ldr	r1, [pc, #404]	; (8003128 <HAL_RCC_ClockConfig+0x1c0>)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9a:	4b63      	ldr	r3, [pc, #396]	; (8003128 <HAL_RCC_ClockConfig+0x1c0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d001      	beq.n	8002fac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e0b8      	b.n	800311e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d020      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fc4:	4b59      	ldr	r3, [pc, #356]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	4a58      	ldr	r2, [pc, #352]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8002fca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fdc:	4b53      	ldr	r3, [pc, #332]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	4a52      	ldr	r2, [pc, #328]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8002fe2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002fe6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fe8:	4b50      	ldr	r3, [pc, #320]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	494d      	ldr	r1, [pc, #308]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d040      	beq.n	8003088 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d107      	bne.n	800301e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300e:	4b47      	ldr	r3, [pc, #284]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d115      	bne.n	8003046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e07f      	b.n	800311e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b02      	cmp	r3, #2
 8003024:	d107      	bne.n	8003036 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003026:	4b41      	ldr	r3, [pc, #260]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d109      	bne.n	8003046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e073      	b.n	800311e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003036:	4b3d      	ldr	r3, [pc, #244]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e06b      	b.n	800311e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003046:	4b39      	ldr	r3, [pc, #228]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f023 0203 	bic.w	r2, r3, #3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	4936      	ldr	r1, [pc, #216]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8003054:	4313      	orrs	r3, r2
 8003056:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003058:	f7fe fd58 	bl	8001b0c <HAL_GetTick>
 800305c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305e:	e00a      	b.n	8003076 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003060:	f7fe fd54 	bl	8001b0c <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	f241 3288 	movw	r2, #5000	; 0x1388
 800306e:	4293      	cmp	r3, r2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e053      	b.n	800311e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003076:	4b2d      	ldr	r3, [pc, #180]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f003 020c 	and.w	r2, r3, #12
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	429a      	cmp	r2, r3
 8003086:	d1eb      	bne.n	8003060 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003088:	4b27      	ldr	r3, [pc, #156]	; (8003128 <HAL_RCC_ClockConfig+0x1c0>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d210      	bcs.n	80030b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003096:	4b24      	ldr	r3, [pc, #144]	; (8003128 <HAL_RCC_ClockConfig+0x1c0>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f023 0207 	bic.w	r2, r3, #7
 800309e:	4922      	ldr	r1, [pc, #136]	; (8003128 <HAL_RCC_ClockConfig+0x1c0>)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a6:	4b20      	ldr	r3, [pc, #128]	; (8003128 <HAL_RCC_ClockConfig+0x1c0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d001      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e032      	b.n	800311e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030c4:	4b19      	ldr	r3, [pc, #100]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	4916      	ldr	r1, [pc, #88]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d009      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030e2:	4b12      	ldr	r3, [pc, #72]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	490e      	ldr	r1, [pc, #56]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030f6:	f000 f821 	bl	800313c <HAL_RCC_GetSysClockFreq>
 80030fa:	4602      	mov	r2, r0
 80030fc:	4b0b      	ldr	r3, [pc, #44]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	091b      	lsrs	r3, r3, #4
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	490a      	ldr	r1, [pc, #40]	; (8003130 <HAL_RCC_ClockConfig+0x1c8>)
 8003108:	5ccb      	ldrb	r3, [r1, r3]
 800310a:	fa22 f303 	lsr.w	r3, r2, r3
 800310e:	4a09      	ldr	r2, [pc, #36]	; (8003134 <HAL_RCC_ClockConfig+0x1cc>)
 8003110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003112:	4b09      	ldr	r3, [pc, #36]	; (8003138 <HAL_RCC_ClockConfig+0x1d0>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f7fe fcb6 	bl	8001a88 <HAL_InitTick>

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40022000 	.word	0x40022000
 800312c:	40021000 	.word	0x40021000
 8003130:	080045d8 	.word	0x080045d8
 8003134:	20000054 	.word	0x20000054
 8003138:	20000058 	.word	0x20000058

0800313c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	2300      	movs	r3, #0
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	2300      	movs	r3, #0
 8003150:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003152:	2300      	movs	r3, #0
 8003154:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003156:	4b1e      	ldr	r3, [pc, #120]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f003 030c 	and.w	r3, r3, #12
 8003162:	2b04      	cmp	r3, #4
 8003164:	d002      	beq.n	800316c <HAL_RCC_GetSysClockFreq+0x30>
 8003166:	2b08      	cmp	r3, #8
 8003168:	d003      	beq.n	8003172 <HAL_RCC_GetSysClockFreq+0x36>
 800316a:	e027      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800316c:	4b19      	ldr	r3, [pc, #100]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800316e:	613b      	str	r3, [r7, #16]
      break;
 8003170:	e027      	b.n	80031c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	0c9b      	lsrs	r3, r3, #18
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	4a17      	ldr	r2, [pc, #92]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800317c:	5cd3      	ldrb	r3, [r2, r3]
 800317e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d010      	beq.n	80031ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800318a:	4b11      	ldr	r3, [pc, #68]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	0c5b      	lsrs	r3, r3, #17
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	4a11      	ldr	r2, [pc, #68]	; (80031dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003196:	5cd3      	ldrb	r3, [r2, r3]
 8003198:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a0d      	ldr	r2, [pc, #52]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800319e:	fb02 f203 	mul.w	r2, r2, r3
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a8:	617b      	str	r3, [r7, #20]
 80031aa:	e004      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a0c      	ldr	r2, [pc, #48]	; (80031e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80031b0:	fb02 f303 	mul.w	r3, r2, r3
 80031b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	613b      	str	r3, [r7, #16]
      break;
 80031ba:	e002      	b.n	80031c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80031be:	613b      	str	r3, [r7, #16]
      break;
 80031c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031c2:	693b      	ldr	r3, [r7, #16]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	371c      	adds	r7, #28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40021000 	.word	0x40021000
 80031d4:	007a1200 	.word	0x007a1200
 80031d8:	080045f0 	.word	0x080045f0
 80031dc:	08004600 	.word	0x08004600
 80031e0:	003d0900 	.word	0x003d0900

080031e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031e8:	4b02      	ldr	r3, [pc, #8]	; (80031f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80031ea:	681b      	ldr	r3, [r3, #0]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr
 80031f4:	20000054 	.word	0x20000054

080031f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031fc:	f7ff fff2 	bl	80031e4 <HAL_RCC_GetHCLKFreq>
 8003200:	4602      	mov	r2, r0
 8003202:	4b05      	ldr	r3, [pc, #20]	; (8003218 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	0a1b      	lsrs	r3, r3, #8
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	4903      	ldr	r1, [pc, #12]	; (800321c <HAL_RCC_GetPCLK1Freq+0x24>)
 800320e:	5ccb      	ldrb	r3, [r1, r3]
 8003210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003214:	4618      	mov	r0, r3
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40021000 	.word	0x40021000
 800321c:	080045e8 	.word	0x080045e8

08003220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003224:	f7ff ffde 	bl	80031e4 <HAL_RCC_GetHCLKFreq>
 8003228:	4602      	mov	r2, r0
 800322a:	4b05      	ldr	r3, [pc, #20]	; (8003240 <HAL_RCC_GetPCLK2Freq+0x20>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	0adb      	lsrs	r3, r3, #11
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	4903      	ldr	r1, [pc, #12]	; (8003244 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003236:	5ccb      	ldrb	r3, [r1, r3]
 8003238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800323c:	4618      	mov	r0, r3
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40021000 	.word	0x40021000
 8003244:	080045e8 	.word	0x080045e8

08003248 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003250:	4b0a      	ldr	r3, [pc, #40]	; (800327c <RCC_Delay+0x34>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a0a      	ldr	r2, [pc, #40]	; (8003280 <RCC_Delay+0x38>)
 8003256:	fba2 2303 	umull	r2, r3, r2, r3
 800325a:	0a5b      	lsrs	r3, r3, #9
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	fb02 f303 	mul.w	r3, r2, r3
 8003262:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003264:	bf00      	nop
  }
  while (Delay --);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	1e5a      	subs	r2, r3, #1
 800326a:	60fa      	str	r2, [r7, #12]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1f9      	bne.n	8003264 <RCC_Delay+0x1c>
}
 8003270:	bf00      	nop
 8003272:	bf00      	nop
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr
 800327c:	20000054 	.word	0x20000054
 8003280:	10624dd3 	.word	0x10624dd3

08003284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e041      	b.n	800331a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d106      	bne.n	80032b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7fe fa68 	bl	8001780 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3304      	adds	r3, #4
 80032c0:	4619      	mov	r1, r3
 80032c2:	4610      	mov	r0, r2
 80032c4:	f000 fa5c 	bl	8003780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
	...

08003324 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b01      	cmp	r3, #1
 8003336:	d001      	beq.n	800333c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e03a      	b.n	80033b2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0201 	orr.w	r2, r2, #1
 8003352:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a18      	ldr	r2, [pc, #96]	; (80033bc <HAL_TIM_Base_Start_IT+0x98>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00e      	beq.n	800337c <HAL_TIM_Base_Start_IT+0x58>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003366:	d009      	beq.n	800337c <HAL_TIM_Base_Start_IT+0x58>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a14      	ldr	r2, [pc, #80]	; (80033c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d004      	beq.n	800337c <HAL_TIM_Base_Start_IT+0x58>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a13      	ldr	r2, [pc, #76]	; (80033c4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d111      	bne.n	80033a0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2b06      	cmp	r3, #6
 800338c:	d010      	beq.n	80033b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f042 0201 	orr.w	r2, r2, #1
 800339c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800339e:	e007      	b.n	80033b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0201 	orr.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr
 80033bc:	40012c00 	.word	0x40012c00
 80033c0:	40000400 	.word	0x40000400
 80033c4:	40000800 	.word	0x40000800

080033c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d020      	beq.n	800342c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d01b      	beq.n	800342c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f06f 0202 	mvn.w	r2, #2
 80033fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f998 	bl	8003748 <HAL_TIM_IC_CaptureCallback>
 8003418:	e005      	b.n	8003426 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f98b 	bl	8003736 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f99a 	bl	800375a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f003 0304 	and.w	r3, r3, #4
 8003432:	2b00      	cmp	r3, #0
 8003434:	d020      	beq.n	8003478 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b00      	cmp	r3, #0
 800343e:	d01b      	beq.n	8003478 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f06f 0204 	mvn.w	r2, #4
 8003448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2202      	movs	r2, #2
 800344e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f972 	bl	8003748 <HAL_TIM_IC_CaptureCallback>
 8003464:	e005      	b.n	8003472 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f965 	bl	8003736 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f974 	bl	800375a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d020      	beq.n	80034c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f003 0308 	and.w	r3, r3, #8
 8003488:	2b00      	cmp	r3, #0
 800348a:	d01b      	beq.n	80034c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f06f 0208 	mvn.w	r2, #8
 8003494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2204      	movs	r2, #4
 800349a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f94c 	bl	8003748 <HAL_TIM_IC_CaptureCallback>
 80034b0:	e005      	b.n	80034be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f93f 	bl	8003736 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f94e 	bl	800375a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f003 0310 	and.w	r3, r3, #16
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d020      	beq.n	8003510 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f003 0310 	and.w	r3, r3, #16
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d01b      	beq.n	8003510 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0210 	mvn.w	r2, #16
 80034e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2208      	movs	r2, #8
 80034e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f926 	bl	8003748 <HAL_TIM_IC_CaptureCallback>
 80034fc:	e005      	b.n	800350a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f919 	bl	8003736 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f928 	bl	800375a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00c      	beq.n	8003534 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	2b00      	cmp	r3, #0
 8003522:	d007      	beq.n	8003534 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f06f 0201 	mvn.w	r2, #1
 800352c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7fd feea 	bl	8001308 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00c      	beq.n	8003558 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003544:	2b00      	cmp	r3, #0
 8003546:	d007      	beq.n	8003558 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 fa7f 	bl	8003a56 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00c      	beq.n	800357c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003568:	2b00      	cmp	r3, #0
 800356a:	d007      	beq.n	800357c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f8f8 	bl	800376c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00c      	beq.n	80035a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f003 0320 	and.w	r3, r3, #32
 800358c:	2b00      	cmp	r3, #0
 800358e:	d007      	beq.n	80035a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f06f 0220 	mvn.w	r2, #32
 8003598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 fa52 	bl	8003a44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035a0:	bf00      	nop
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d101      	bne.n	80035c4 <HAL_TIM_ConfigClockSource+0x1c>
 80035c0:	2302      	movs	r3, #2
 80035c2:	e0b4      	b.n	800372e <HAL_TIM_ConfigClockSource+0x186>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2202      	movs	r2, #2
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035fc:	d03e      	beq.n	800367c <HAL_TIM_ConfigClockSource+0xd4>
 80035fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003602:	f200 8087 	bhi.w	8003714 <HAL_TIM_ConfigClockSource+0x16c>
 8003606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800360a:	f000 8086 	beq.w	800371a <HAL_TIM_ConfigClockSource+0x172>
 800360e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003612:	d87f      	bhi.n	8003714 <HAL_TIM_ConfigClockSource+0x16c>
 8003614:	2b70      	cmp	r3, #112	; 0x70
 8003616:	d01a      	beq.n	800364e <HAL_TIM_ConfigClockSource+0xa6>
 8003618:	2b70      	cmp	r3, #112	; 0x70
 800361a:	d87b      	bhi.n	8003714 <HAL_TIM_ConfigClockSource+0x16c>
 800361c:	2b60      	cmp	r3, #96	; 0x60
 800361e:	d050      	beq.n	80036c2 <HAL_TIM_ConfigClockSource+0x11a>
 8003620:	2b60      	cmp	r3, #96	; 0x60
 8003622:	d877      	bhi.n	8003714 <HAL_TIM_ConfigClockSource+0x16c>
 8003624:	2b50      	cmp	r3, #80	; 0x50
 8003626:	d03c      	beq.n	80036a2 <HAL_TIM_ConfigClockSource+0xfa>
 8003628:	2b50      	cmp	r3, #80	; 0x50
 800362a:	d873      	bhi.n	8003714 <HAL_TIM_ConfigClockSource+0x16c>
 800362c:	2b40      	cmp	r3, #64	; 0x40
 800362e:	d058      	beq.n	80036e2 <HAL_TIM_ConfigClockSource+0x13a>
 8003630:	2b40      	cmp	r3, #64	; 0x40
 8003632:	d86f      	bhi.n	8003714 <HAL_TIM_ConfigClockSource+0x16c>
 8003634:	2b30      	cmp	r3, #48	; 0x30
 8003636:	d064      	beq.n	8003702 <HAL_TIM_ConfigClockSource+0x15a>
 8003638:	2b30      	cmp	r3, #48	; 0x30
 800363a:	d86b      	bhi.n	8003714 <HAL_TIM_ConfigClockSource+0x16c>
 800363c:	2b20      	cmp	r3, #32
 800363e:	d060      	beq.n	8003702 <HAL_TIM_ConfigClockSource+0x15a>
 8003640:	2b20      	cmp	r3, #32
 8003642:	d867      	bhi.n	8003714 <HAL_TIM_ConfigClockSource+0x16c>
 8003644:	2b00      	cmp	r3, #0
 8003646:	d05c      	beq.n	8003702 <HAL_TIM_ConfigClockSource+0x15a>
 8003648:	2b10      	cmp	r3, #16
 800364a:	d05a      	beq.n	8003702 <HAL_TIM_ConfigClockSource+0x15a>
 800364c:	e062      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6818      	ldr	r0, [r3, #0]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	6899      	ldr	r1, [r3, #8]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f000 f974 	bl	800394a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003670:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	609a      	str	r2, [r3, #8]
      break;
 800367a:	e04f      	b.n	800371c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6818      	ldr	r0, [r3, #0]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	6899      	ldr	r1, [r3, #8]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f000 f95d 	bl	800394a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800369e:	609a      	str	r2, [r3, #8]
      break;
 80036a0:	e03c      	b.n	800371c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6818      	ldr	r0, [r3, #0]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	6859      	ldr	r1, [r3, #4]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	461a      	mov	r2, r3
 80036b0:	f000 f8d4 	bl	800385c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2150      	movs	r1, #80	; 0x50
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 f92b 	bl	8003916 <TIM_ITRx_SetConfig>
      break;
 80036c0:	e02c      	b.n	800371c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	6859      	ldr	r1, [r3, #4]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	461a      	mov	r2, r3
 80036d0:	f000 f8f2 	bl	80038b8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2160      	movs	r1, #96	; 0x60
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 f91b 	bl	8003916 <TIM_ITRx_SetConfig>
      break;
 80036e0:	e01c      	b.n	800371c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6818      	ldr	r0, [r3, #0]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	6859      	ldr	r1, [r3, #4]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	461a      	mov	r2, r3
 80036f0:	f000 f8b4 	bl	800385c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2140      	movs	r1, #64	; 0x40
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 f90b 	bl	8003916 <TIM_ITRx_SetConfig>
      break;
 8003700:	e00c      	b.n	800371c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4619      	mov	r1, r3
 800370c:	4610      	mov	r0, r2
 800370e:	f000 f902 	bl	8003916 <TIM_ITRx_SetConfig>
      break;
 8003712:	e003      	b.n	800371c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
      break;
 8003718:	e000      	b.n	800371c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800371a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800372c:	7bfb      	ldrb	r3, [r7, #15]
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr

08003748 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr

0800375a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr

0800376c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr
	...

08003780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a2f      	ldr	r2, [pc, #188]	; (8003850 <TIM_Base_SetConfig+0xd0>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d00b      	beq.n	80037b0 <TIM_Base_SetConfig+0x30>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800379e:	d007      	beq.n	80037b0 <TIM_Base_SetConfig+0x30>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a2c      	ldr	r2, [pc, #176]	; (8003854 <TIM_Base_SetConfig+0xd4>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d003      	beq.n	80037b0 <TIM_Base_SetConfig+0x30>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a2b      	ldr	r2, [pc, #172]	; (8003858 <TIM_Base_SetConfig+0xd8>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d108      	bne.n	80037c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	4313      	orrs	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a22      	ldr	r2, [pc, #136]	; (8003850 <TIM_Base_SetConfig+0xd0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d00b      	beq.n	80037e2 <TIM_Base_SetConfig+0x62>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d0:	d007      	beq.n	80037e2 <TIM_Base_SetConfig+0x62>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a1f      	ldr	r2, [pc, #124]	; (8003854 <TIM_Base_SetConfig+0xd4>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d003      	beq.n	80037e2 <TIM_Base_SetConfig+0x62>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a1e      	ldr	r2, [pc, #120]	; (8003858 <TIM_Base_SetConfig+0xd8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d108      	bne.n	80037f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	4313      	orrs	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a0d      	ldr	r2, [pc, #52]	; (8003850 <TIM_Base_SetConfig+0xd0>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d103      	bne.n	8003828 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d005      	beq.n	8003846 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f023 0201 	bic.w	r2, r3, #1
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	611a      	str	r2, [r3, #16]
  }
}
 8003846:	bf00      	nop
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr
 8003850:	40012c00 	.word	0x40012c00
 8003854:	40000400 	.word	0x40000400
 8003858:	40000800 	.word	0x40000800

0800385c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	f023 0201 	bic.w	r2, r3, #1
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003886:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4313      	orrs	r3, r2
 8003890:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f023 030a 	bic.w	r3, r3, #10
 8003898:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	4313      	orrs	r3, r2
 80038a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	621a      	str	r2, [r3, #32]
}
 80038ae:	bf00      	nop
 80038b0:	371c      	adds	r7, #28
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bc80      	pop	{r7}
 80038b6:	4770      	bx	lr

080038b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	f023 0210 	bic.w	r2, r3, #16
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	031b      	lsls	r3, r3, #12
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038f4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	621a      	str	r2, [r3, #32]
}
 800390c:	bf00      	nop
 800390e:	371c      	adds	r7, #28
 8003910:	46bd      	mov	sp, r7
 8003912:	bc80      	pop	{r7}
 8003914:	4770      	bx	lr

08003916 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003916:	b480      	push	{r7}
 8003918:	b085      	sub	sp, #20
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
 800391e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	f043 0307 	orr.w	r3, r3, #7
 8003938:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	609a      	str	r2, [r3, #8]
}
 8003940:	bf00      	nop
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	bc80      	pop	{r7}
 8003948:	4770      	bx	lr

0800394a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800394a:	b480      	push	{r7}
 800394c:	b087      	sub	sp, #28
 800394e:	af00      	add	r7, sp, #0
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	607a      	str	r2, [r7, #4]
 8003956:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003964:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	021a      	lsls	r2, r3, #8
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	431a      	orrs	r2, r3
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	4313      	orrs	r3, r2
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	4313      	orrs	r3, r2
 8003976:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	609a      	str	r2, [r3, #8]
}
 800397e:	bf00      	nop
 8003980:	371c      	adds	r7, #28
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr

08003988 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800399c:	2302      	movs	r3, #2
 800399e:	e046      	b.n	8003a2e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2202      	movs	r2, #2
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a16      	ldr	r2, [pc, #88]	; (8003a38 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d00e      	beq.n	8003a02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ec:	d009      	beq.n	8003a02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a12      	ldr	r2, [pc, #72]	; (8003a3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d004      	beq.n	8003a02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a10      	ldr	r2, [pc, #64]	; (8003a40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d10c      	bne.n	8003a1c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr
 8003a38:	40012c00 	.word	0x40012c00
 8003a3c:	40000400 	.word	0x40000400
 8003a40:	40000800 	.word	0x40000800

08003a44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bc80      	pop	{r7}
 8003a54:	4770      	bx	lr

08003a56 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr

08003a68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e042      	b.n	8003b00 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d106      	bne.n	8003a94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7fd fe9a 	bl	80017c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2224      	movs	r2, #36	; 0x24
 8003a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f82b 	bl	8003b08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	691a      	ldr	r2, [r3, #16]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ac0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	695a      	ldr	r2, [r3, #20]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ad0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68da      	ldr	r2, [r3, #12]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ae0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689a      	ldr	r2, [r3, #8]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b42:	f023 030c 	bic.w	r3, r3, #12
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	6812      	ldr	r2, [r2, #0]
 8003b4a:	68b9      	ldr	r1, [r7, #8]
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	699a      	ldr	r2, [r3, #24]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a2c      	ldr	r2, [pc, #176]	; (8003c1c <UART_SetConfig+0x114>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d103      	bne.n	8003b78 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b70:	f7ff fb56 	bl	8003220 <HAL_RCC_GetPCLK2Freq>
 8003b74:	60f8      	str	r0, [r7, #12]
 8003b76:	e002      	b.n	8003b7e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b78:	f7ff fb3e 	bl	80031f8 <HAL_RCC_GetPCLK1Freq>
 8003b7c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	4613      	mov	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	009a      	lsls	r2, r3, #2
 8003b88:	441a      	add	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b94:	4a22      	ldr	r2, [pc, #136]	; (8003c20 <UART_SetConfig+0x118>)
 8003b96:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9a:	095b      	lsrs	r3, r3, #5
 8003b9c:	0119      	lsls	r1, r3, #4
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	009a      	lsls	r2, r3, #2
 8003ba8:	441a      	add	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bb4:	4b1a      	ldr	r3, [pc, #104]	; (8003c20 <UART_SetConfig+0x118>)
 8003bb6:	fba3 0302 	umull	r0, r3, r3, r2
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	2064      	movs	r0, #100	; 0x64
 8003bbe:	fb00 f303 	mul.w	r3, r0, r3
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	3332      	adds	r3, #50	; 0x32
 8003bc8:	4a15      	ldr	r2, [pc, #84]	; (8003c20 <UART_SetConfig+0x118>)
 8003bca:	fba2 2303 	umull	r2, r3, r2, r3
 8003bce:	095b      	lsrs	r3, r3, #5
 8003bd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bd4:	4419      	add	r1, r3
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	4413      	add	r3, r2
 8003bde:	009a      	lsls	r2, r3, #2
 8003be0:	441a      	add	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bec:	4b0c      	ldr	r3, [pc, #48]	; (8003c20 <UART_SetConfig+0x118>)
 8003bee:	fba3 0302 	umull	r0, r3, r3, r2
 8003bf2:	095b      	lsrs	r3, r3, #5
 8003bf4:	2064      	movs	r0, #100	; 0x64
 8003bf6:	fb00 f303 	mul.w	r3, r0, r3
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	3332      	adds	r3, #50	; 0x32
 8003c00:	4a07      	ldr	r2, [pc, #28]	; (8003c20 <UART_SetConfig+0x118>)
 8003c02:	fba2 2303 	umull	r2, r3, r2, r3
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	f003 020f 	and.w	r2, r3, #15
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	440a      	add	r2, r1
 8003c12:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c14:	bf00      	nop
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40013800 	.word	0x40013800
 8003c20:	51eb851f 	.word	0x51eb851f

08003c24 <__errno>:
 8003c24:	4b01      	ldr	r3, [pc, #4]	; (8003c2c <__errno+0x8>)
 8003c26:	6818      	ldr	r0, [r3, #0]
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	20000060 	.word	0x20000060

08003c30 <__libc_init_array>:
 8003c30:	b570      	push	{r4, r5, r6, lr}
 8003c32:	2600      	movs	r6, #0
 8003c34:	4d0c      	ldr	r5, [pc, #48]	; (8003c68 <__libc_init_array+0x38>)
 8003c36:	4c0d      	ldr	r4, [pc, #52]	; (8003c6c <__libc_init_array+0x3c>)
 8003c38:	1b64      	subs	r4, r4, r5
 8003c3a:	10a4      	asrs	r4, r4, #2
 8003c3c:	42a6      	cmp	r6, r4
 8003c3e:	d109      	bne.n	8003c54 <__libc_init_array+0x24>
 8003c40:	f000 fc6c 	bl	800451c <_init>
 8003c44:	2600      	movs	r6, #0
 8003c46:	4d0a      	ldr	r5, [pc, #40]	; (8003c70 <__libc_init_array+0x40>)
 8003c48:	4c0a      	ldr	r4, [pc, #40]	; (8003c74 <__libc_init_array+0x44>)
 8003c4a:	1b64      	subs	r4, r4, r5
 8003c4c:	10a4      	asrs	r4, r4, #2
 8003c4e:	42a6      	cmp	r6, r4
 8003c50:	d105      	bne.n	8003c5e <__libc_init_array+0x2e>
 8003c52:	bd70      	pop	{r4, r5, r6, pc}
 8003c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c58:	4798      	blx	r3
 8003c5a:	3601      	adds	r6, #1
 8003c5c:	e7ee      	b.n	8003c3c <__libc_init_array+0xc>
 8003c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c62:	4798      	blx	r3
 8003c64:	3601      	adds	r6, #1
 8003c66:	e7f2      	b.n	8003c4e <__libc_init_array+0x1e>
 8003c68:	08004638 	.word	0x08004638
 8003c6c:	08004638 	.word	0x08004638
 8003c70:	08004638 	.word	0x08004638
 8003c74:	0800463c 	.word	0x0800463c

08003c78 <malloc>:
 8003c78:	4b02      	ldr	r3, [pc, #8]	; (8003c84 <malloc+0xc>)
 8003c7a:	4601      	mov	r1, r0
 8003c7c:	6818      	ldr	r0, [r3, #0]
 8003c7e:	f000 b85f 	b.w	8003d40 <_malloc_r>
 8003c82:	bf00      	nop
 8003c84:	20000060 	.word	0x20000060

08003c88 <free>:
 8003c88:	4b02      	ldr	r3, [pc, #8]	; (8003c94 <free+0xc>)
 8003c8a:	4601      	mov	r1, r0
 8003c8c:	6818      	ldr	r0, [r3, #0]
 8003c8e:	f000 b80b 	b.w	8003ca8 <_free_r>
 8003c92:	bf00      	nop
 8003c94:	20000060 	.word	0x20000060

08003c98 <memset>:
 8003c98:	4603      	mov	r3, r0
 8003c9a:	4402      	add	r2, r0
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d100      	bne.n	8003ca2 <memset+0xa>
 8003ca0:	4770      	bx	lr
 8003ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ca6:	e7f9      	b.n	8003c9c <memset+0x4>

08003ca8 <_free_r>:
 8003ca8:	b538      	push	{r3, r4, r5, lr}
 8003caa:	4605      	mov	r5, r0
 8003cac:	2900      	cmp	r1, #0
 8003cae:	d043      	beq.n	8003d38 <_free_r+0x90>
 8003cb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cb4:	1f0c      	subs	r4, r1, #4
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	bfb8      	it	lt
 8003cba:	18e4      	addlt	r4, r4, r3
 8003cbc:	f000 f8ca 	bl	8003e54 <__malloc_lock>
 8003cc0:	4a1e      	ldr	r2, [pc, #120]	; (8003d3c <_free_r+0x94>)
 8003cc2:	6813      	ldr	r3, [r2, #0]
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	b933      	cbnz	r3, 8003cd6 <_free_r+0x2e>
 8003cc8:	6063      	str	r3, [r4, #4]
 8003cca:	6014      	str	r4, [r2, #0]
 8003ccc:	4628      	mov	r0, r5
 8003cce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cd2:	f000 b8c5 	b.w	8003e60 <__malloc_unlock>
 8003cd6:	42a3      	cmp	r3, r4
 8003cd8:	d90a      	bls.n	8003cf0 <_free_r+0x48>
 8003cda:	6821      	ldr	r1, [r4, #0]
 8003cdc:	1862      	adds	r2, r4, r1
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	bf01      	itttt	eq
 8003ce2:	681a      	ldreq	r2, [r3, #0]
 8003ce4:	685b      	ldreq	r3, [r3, #4]
 8003ce6:	1852      	addeq	r2, r2, r1
 8003ce8:	6022      	streq	r2, [r4, #0]
 8003cea:	6063      	str	r3, [r4, #4]
 8003cec:	6004      	str	r4, [r0, #0]
 8003cee:	e7ed      	b.n	8003ccc <_free_r+0x24>
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	b10b      	cbz	r3, 8003cfa <_free_r+0x52>
 8003cf6:	42a3      	cmp	r3, r4
 8003cf8:	d9fa      	bls.n	8003cf0 <_free_r+0x48>
 8003cfa:	6811      	ldr	r1, [r2, #0]
 8003cfc:	1850      	adds	r0, r2, r1
 8003cfe:	42a0      	cmp	r0, r4
 8003d00:	d10b      	bne.n	8003d1a <_free_r+0x72>
 8003d02:	6820      	ldr	r0, [r4, #0]
 8003d04:	4401      	add	r1, r0
 8003d06:	1850      	adds	r0, r2, r1
 8003d08:	4283      	cmp	r3, r0
 8003d0a:	6011      	str	r1, [r2, #0]
 8003d0c:	d1de      	bne.n	8003ccc <_free_r+0x24>
 8003d0e:	6818      	ldr	r0, [r3, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	4401      	add	r1, r0
 8003d14:	6011      	str	r1, [r2, #0]
 8003d16:	6053      	str	r3, [r2, #4]
 8003d18:	e7d8      	b.n	8003ccc <_free_r+0x24>
 8003d1a:	d902      	bls.n	8003d22 <_free_r+0x7a>
 8003d1c:	230c      	movs	r3, #12
 8003d1e:	602b      	str	r3, [r5, #0]
 8003d20:	e7d4      	b.n	8003ccc <_free_r+0x24>
 8003d22:	6820      	ldr	r0, [r4, #0]
 8003d24:	1821      	adds	r1, r4, r0
 8003d26:	428b      	cmp	r3, r1
 8003d28:	bf01      	itttt	eq
 8003d2a:	6819      	ldreq	r1, [r3, #0]
 8003d2c:	685b      	ldreq	r3, [r3, #4]
 8003d2e:	1809      	addeq	r1, r1, r0
 8003d30:	6021      	streq	r1, [r4, #0]
 8003d32:	6063      	str	r3, [r4, #4]
 8003d34:	6054      	str	r4, [r2, #4]
 8003d36:	e7c9      	b.n	8003ccc <_free_r+0x24>
 8003d38:	bd38      	pop	{r3, r4, r5, pc}
 8003d3a:	bf00      	nop
 8003d3c:	20000124 	.word	0x20000124

08003d40 <_malloc_r>:
 8003d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d42:	1ccd      	adds	r5, r1, #3
 8003d44:	f025 0503 	bic.w	r5, r5, #3
 8003d48:	3508      	adds	r5, #8
 8003d4a:	2d0c      	cmp	r5, #12
 8003d4c:	bf38      	it	cc
 8003d4e:	250c      	movcc	r5, #12
 8003d50:	2d00      	cmp	r5, #0
 8003d52:	4606      	mov	r6, r0
 8003d54:	db01      	blt.n	8003d5a <_malloc_r+0x1a>
 8003d56:	42a9      	cmp	r1, r5
 8003d58:	d903      	bls.n	8003d62 <_malloc_r+0x22>
 8003d5a:	230c      	movs	r3, #12
 8003d5c:	6033      	str	r3, [r6, #0]
 8003d5e:	2000      	movs	r0, #0
 8003d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d62:	f000 f877 	bl	8003e54 <__malloc_lock>
 8003d66:	4921      	ldr	r1, [pc, #132]	; (8003dec <_malloc_r+0xac>)
 8003d68:	680a      	ldr	r2, [r1, #0]
 8003d6a:	4614      	mov	r4, r2
 8003d6c:	b99c      	cbnz	r4, 8003d96 <_malloc_r+0x56>
 8003d6e:	4f20      	ldr	r7, [pc, #128]	; (8003df0 <_malloc_r+0xb0>)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	b923      	cbnz	r3, 8003d7e <_malloc_r+0x3e>
 8003d74:	4621      	mov	r1, r4
 8003d76:	4630      	mov	r0, r6
 8003d78:	f000 f83c 	bl	8003df4 <_sbrk_r>
 8003d7c:	6038      	str	r0, [r7, #0]
 8003d7e:	4629      	mov	r1, r5
 8003d80:	4630      	mov	r0, r6
 8003d82:	f000 f837 	bl	8003df4 <_sbrk_r>
 8003d86:	1c43      	adds	r3, r0, #1
 8003d88:	d123      	bne.n	8003dd2 <_malloc_r+0x92>
 8003d8a:	230c      	movs	r3, #12
 8003d8c:	4630      	mov	r0, r6
 8003d8e:	6033      	str	r3, [r6, #0]
 8003d90:	f000 f866 	bl	8003e60 <__malloc_unlock>
 8003d94:	e7e3      	b.n	8003d5e <_malloc_r+0x1e>
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	1b5b      	subs	r3, r3, r5
 8003d9a:	d417      	bmi.n	8003dcc <_malloc_r+0x8c>
 8003d9c:	2b0b      	cmp	r3, #11
 8003d9e:	d903      	bls.n	8003da8 <_malloc_r+0x68>
 8003da0:	6023      	str	r3, [r4, #0]
 8003da2:	441c      	add	r4, r3
 8003da4:	6025      	str	r5, [r4, #0]
 8003da6:	e004      	b.n	8003db2 <_malloc_r+0x72>
 8003da8:	6863      	ldr	r3, [r4, #4]
 8003daa:	42a2      	cmp	r2, r4
 8003dac:	bf0c      	ite	eq
 8003dae:	600b      	streq	r3, [r1, #0]
 8003db0:	6053      	strne	r3, [r2, #4]
 8003db2:	4630      	mov	r0, r6
 8003db4:	f000 f854 	bl	8003e60 <__malloc_unlock>
 8003db8:	f104 000b 	add.w	r0, r4, #11
 8003dbc:	1d23      	adds	r3, r4, #4
 8003dbe:	f020 0007 	bic.w	r0, r0, #7
 8003dc2:	1ac2      	subs	r2, r0, r3
 8003dc4:	d0cc      	beq.n	8003d60 <_malloc_r+0x20>
 8003dc6:	1a1b      	subs	r3, r3, r0
 8003dc8:	50a3      	str	r3, [r4, r2]
 8003dca:	e7c9      	b.n	8003d60 <_malloc_r+0x20>
 8003dcc:	4622      	mov	r2, r4
 8003dce:	6864      	ldr	r4, [r4, #4]
 8003dd0:	e7cc      	b.n	8003d6c <_malloc_r+0x2c>
 8003dd2:	1cc4      	adds	r4, r0, #3
 8003dd4:	f024 0403 	bic.w	r4, r4, #3
 8003dd8:	42a0      	cmp	r0, r4
 8003dda:	d0e3      	beq.n	8003da4 <_malloc_r+0x64>
 8003ddc:	1a21      	subs	r1, r4, r0
 8003dde:	4630      	mov	r0, r6
 8003de0:	f000 f808 	bl	8003df4 <_sbrk_r>
 8003de4:	3001      	adds	r0, #1
 8003de6:	d1dd      	bne.n	8003da4 <_malloc_r+0x64>
 8003de8:	e7cf      	b.n	8003d8a <_malloc_r+0x4a>
 8003dea:	bf00      	nop
 8003dec:	20000124 	.word	0x20000124
 8003df0:	20000128 	.word	0x20000128

08003df4 <_sbrk_r>:
 8003df4:	b538      	push	{r3, r4, r5, lr}
 8003df6:	2300      	movs	r3, #0
 8003df8:	4d05      	ldr	r5, [pc, #20]	; (8003e10 <_sbrk_r+0x1c>)
 8003dfa:	4604      	mov	r4, r0
 8003dfc:	4608      	mov	r0, r1
 8003dfe:	602b      	str	r3, [r5, #0]
 8003e00:	f7fd fd5a 	bl	80018b8 <_sbrk>
 8003e04:	1c43      	adds	r3, r0, #1
 8003e06:	d102      	bne.n	8003e0e <_sbrk_r+0x1a>
 8003e08:	682b      	ldr	r3, [r5, #0]
 8003e0a:	b103      	cbz	r3, 8003e0e <_sbrk_r+0x1a>
 8003e0c:	6023      	str	r3, [r4, #0]
 8003e0e:	bd38      	pop	{r3, r4, r5, pc}
 8003e10:	20000224 	.word	0x20000224

08003e14 <siprintf>:
 8003e14:	b40e      	push	{r1, r2, r3}
 8003e16:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e1a:	b500      	push	{lr}
 8003e1c:	b09c      	sub	sp, #112	; 0x70
 8003e1e:	ab1d      	add	r3, sp, #116	; 0x74
 8003e20:	9002      	str	r0, [sp, #8]
 8003e22:	9006      	str	r0, [sp, #24]
 8003e24:	9107      	str	r1, [sp, #28]
 8003e26:	9104      	str	r1, [sp, #16]
 8003e28:	4808      	ldr	r0, [pc, #32]	; (8003e4c <siprintf+0x38>)
 8003e2a:	4909      	ldr	r1, [pc, #36]	; (8003e50 <siprintf+0x3c>)
 8003e2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e30:	9105      	str	r1, [sp, #20]
 8003e32:	6800      	ldr	r0, [r0, #0]
 8003e34:	a902      	add	r1, sp, #8
 8003e36:	9301      	str	r3, [sp, #4]
 8003e38:	f000 f874 	bl	8003f24 <_svfiprintf_r>
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	9b02      	ldr	r3, [sp, #8]
 8003e40:	701a      	strb	r2, [r3, #0]
 8003e42:	b01c      	add	sp, #112	; 0x70
 8003e44:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e48:	b003      	add	sp, #12
 8003e4a:	4770      	bx	lr
 8003e4c:	20000060 	.word	0x20000060
 8003e50:	ffff0208 	.word	0xffff0208

08003e54 <__malloc_lock>:
 8003e54:	4801      	ldr	r0, [pc, #4]	; (8003e5c <__malloc_lock+0x8>)
 8003e56:	f000 bafb 	b.w	8004450 <__retarget_lock_acquire_recursive>
 8003e5a:	bf00      	nop
 8003e5c:	2000022c 	.word	0x2000022c

08003e60 <__malloc_unlock>:
 8003e60:	4801      	ldr	r0, [pc, #4]	; (8003e68 <__malloc_unlock+0x8>)
 8003e62:	f000 baf6 	b.w	8004452 <__retarget_lock_release_recursive>
 8003e66:	bf00      	nop
 8003e68:	2000022c 	.word	0x2000022c

08003e6c <__ssputs_r>:
 8003e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e70:	688e      	ldr	r6, [r1, #8]
 8003e72:	4682      	mov	sl, r0
 8003e74:	429e      	cmp	r6, r3
 8003e76:	460c      	mov	r4, r1
 8003e78:	4690      	mov	r8, r2
 8003e7a:	461f      	mov	r7, r3
 8003e7c:	d838      	bhi.n	8003ef0 <__ssputs_r+0x84>
 8003e7e:	898a      	ldrh	r2, [r1, #12]
 8003e80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e84:	d032      	beq.n	8003eec <__ssputs_r+0x80>
 8003e86:	6825      	ldr	r5, [r4, #0]
 8003e88:	6909      	ldr	r1, [r1, #16]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	eba5 0901 	sub.w	r9, r5, r1
 8003e90:	6965      	ldr	r5, [r4, #20]
 8003e92:	444b      	add	r3, r9
 8003e94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e9c:	106d      	asrs	r5, r5, #1
 8003e9e:	429d      	cmp	r5, r3
 8003ea0:	bf38      	it	cc
 8003ea2:	461d      	movcc	r5, r3
 8003ea4:	0553      	lsls	r3, r2, #21
 8003ea6:	d531      	bpl.n	8003f0c <__ssputs_r+0xa0>
 8003ea8:	4629      	mov	r1, r5
 8003eaa:	f7ff ff49 	bl	8003d40 <_malloc_r>
 8003eae:	4606      	mov	r6, r0
 8003eb0:	b950      	cbnz	r0, 8003ec8 <__ssputs_r+0x5c>
 8003eb2:	230c      	movs	r3, #12
 8003eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb8:	f8ca 3000 	str.w	r3, [sl]
 8003ebc:	89a3      	ldrh	r3, [r4, #12]
 8003ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ec2:	81a3      	strh	r3, [r4, #12]
 8003ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ec8:	464a      	mov	r2, r9
 8003eca:	6921      	ldr	r1, [r4, #16]
 8003ecc:	f000 fad0 	bl	8004470 <memcpy>
 8003ed0:	89a3      	ldrh	r3, [r4, #12]
 8003ed2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eda:	81a3      	strh	r3, [r4, #12]
 8003edc:	6126      	str	r6, [r4, #16]
 8003ede:	444e      	add	r6, r9
 8003ee0:	6026      	str	r6, [r4, #0]
 8003ee2:	463e      	mov	r6, r7
 8003ee4:	6165      	str	r5, [r4, #20]
 8003ee6:	eba5 0509 	sub.w	r5, r5, r9
 8003eea:	60a5      	str	r5, [r4, #8]
 8003eec:	42be      	cmp	r6, r7
 8003eee:	d900      	bls.n	8003ef2 <__ssputs_r+0x86>
 8003ef0:	463e      	mov	r6, r7
 8003ef2:	4632      	mov	r2, r6
 8003ef4:	4641      	mov	r1, r8
 8003ef6:	6820      	ldr	r0, [r4, #0]
 8003ef8:	f000 fac8 	bl	800448c <memmove>
 8003efc:	68a3      	ldr	r3, [r4, #8]
 8003efe:	6822      	ldr	r2, [r4, #0]
 8003f00:	1b9b      	subs	r3, r3, r6
 8003f02:	4432      	add	r2, r6
 8003f04:	2000      	movs	r0, #0
 8003f06:	60a3      	str	r3, [r4, #8]
 8003f08:	6022      	str	r2, [r4, #0]
 8003f0a:	e7db      	b.n	8003ec4 <__ssputs_r+0x58>
 8003f0c:	462a      	mov	r2, r5
 8003f0e:	f000 fad7 	bl	80044c0 <_realloc_r>
 8003f12:	4606      	mov	r6, r0
 8003f14:	2800      	cmp	r0, #0
 8003f16:	d1e1      	bne.n	8003edc <__ssputs_r+0x70>
 8003f18:	4650      	mov	r0, sl
 8003f1a:	6921      	ldr	r1, [r4, #16]
 8003f1c:	f7ff fec4 	bl	8003ca8 <_free_r>
 8003f20:	e7c7      	b.n	8003eb2 <__ssputs_r+0x46>
	...

08003f24 <_svfiprintf_r>:
 8003f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f28:	4698      	mov	r8, r3
 8003f2a:	898b      	ldrh	r3, [r1, #12]
 8003f2c:	4607      	mov	r7, r0
 8003f2e:	061b      	lsls	r3, r3, #24
 8003f30:	460d      	mov	r5, r1
 8003f32:	4614      	mov	r4, r2
 8003f34:	b09d      	sub	sp, #116	; 0x74
 8003f36:	d50e      	bpl.n	8003f56 <_svfiprintf_r+0x32>
 8003f38:	690b      	ldr	r3, [r1, #16]
 8003f3a:	b963      	cbnz	r3, 8003f56 <_svfiprintf_r+0x32>
 8003f3c:	2140      	movs	r1, #64	; 0x40
 8003f3e:	f7ff feff 	bl	8003d40 <_malloc_r>
 8003f42:	6028      	str	r0, [r5, #0]
 8003f44:	6128      	str	r0, [r5, #16]
 8003f46:	b920      	cbnz	r0, 8003f52 <_svfiprintf_r+0x2e>
 8003f48:	230c      	movs	r3, #12
 8003f4a:	603b      	str	r3, [r7, #0]
 8003f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f50:	e0d1      	b.n	80040f6 <_svfiprintf_r+0x1d2>
 8003f52:	2340      	movs	r3, #64	; 0x40
 8003f54:	616b      	str	r3, [r5, #20]
 8003f56:	2300      	movs	r3, #0
 8003f58:	9309      	str	r3, [sp, #36]	; 0x24
 8003f5a:	2320      	movs	r3, #32
 8003f5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f60:	2330      	movs	r3, #48	; 0x30
 8003f62:	f04f 0901 	mov.w	r9, #1
 8003f66:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f6a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004110 <_svfiprintf_r+0x1ec>
 8003f6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f72:	4623      	mov	r3, r4
 8003f74:	469a      	mov	sl, r3
 8003f76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f7a:	b10a      	cbz	r2, 8003f80 <_svfiprintf_r+0x5c>
 8003f7c:	2a25      	cmp	r2, #37	; 0x25
 8003f7e:	d1f9      	bne.n	8003f74 <_svfiprintf_r+0x50>
 8003f80:	ebba 0b04 	subs.w	fp, sl, r4
 8003f84:	d00b      	beq.n	8003f9e <_svfiprintf_r+0x7a>
 8003f86:	465b      	mov	r3, fp
 8003f88:	4622      	mov	r2, r4
 8003f8a:	4629      	mov	r1, r5
 8003f8c:	4638      	mov	r0, r7
 8003f8e:	f7ff ff6d 	bl	8003e6c <__ssputs_r>
 8003f92:	3001      	adds	r0, #1
 8003f94:	f000 80aa 	beq.w	80040ec <_svfiprintf_r+0x1c8>
 8003f98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f9a:	445a      	add	r2, fp
 8003f9c:	9209      	str	r2, [sp, #36]	; 0x24
 8003f9e:	f89a 3000 	ldrb.w	r3, [sl]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 80a2 	beq.w	80040ec <_svfiprintf_r+0x1c8>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f04f 32ff 	mov.w	r2, #4294967295
 8003fae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fb2:	f10a 0a01 	add.w	sl, sl, #1
 8003fb6:	9304      	str	r3, [sp, #16]
 8003fb8:	9307      	str	r3, [sp, #28]
 8003fba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003fbe:	931a      	str	r3, [sp, #104]	; 0x68
 8003fc0:	4654      	mov	r4, sl
 8003fc2:	2205      	movs	r2, #5
 8003fc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fc8:	4851      	ldr	r0, [pc, #324]	; (8004110 <_svfiprintf_r+0x1ec>)
 8003fca:	f000 fa43 	bl	8004454 <memchr>
 8003fce:	9a04      	ldr	r2, [sp, #16]
 8003fd0:	b9d8      	cbnz	r0, 800400a <_svfiprintf_r+0xe6>
 8003fd2:	06d0      	lsls	r0, r2, #27
 8003fd4:	bf44      	itt	mi
 8003fd6:	2320      	movmi	r3, #32
 8003fd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fdc:	0711      	lsls	r1, r2, #28
 8003fde:	bf44      	itt	mi
 8003fe0:	232b      	movmi	r3, #43	; 0x2b
 8003fe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fe6:	f89a 3000 	ldrb.w	r3, [sl]
 8003fea:	2b2a      	cmp	r3, #42	; 0x2a
 8003fec:	d015      	beq.n	800401a <_svfiprintf_r+0xf6>
 8003fee:	4654      	mov	r4, sl
 8003ff0:	2000      	movs	r0, #0
 8003ff2:	f04f 0c0a 	mov.w	ip, #10
 8003ff6:	9a07      	ldr	r2, [sp, #28]
 8003ff8:	4621      	mov	r1, r4
 8003ffa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ffe:	3b30      	subs	r3, #48	; 0x30
 8004000:	2b09      	cmp	r3, #9
 8004002:	d94e      	bls.n	80040a2 <_svfiprintf_r+0x17e>
 8004004:	b1b0      	cbz	r0, 8004034 <_svfiprintf_r+0x110>
 8004006:	9207      	str	r2, [sp, #28]
 8004008:	e014      	b.n	8004034 <_svfiprintf_r+0x110>
 800400a:	eba0 0308 	sub.w	r3, r0, r8
 800400e:	fa09 f303 	lsl.w	r3, r9, r3
 8004012:	4313      	orrs	r3, r2
 8004014:	46a2      	mov	sl, r4
 8004016:	9304      	str	r3, [sp, #16]
 8004018:	e7d2      	b.n	8003fc0 <_svfiprintf_r+0x9c>
 800401a:	9b03      	ldr	r3, [sp, #12]
 800401c:	1d19      	adds	r1, r3, #4
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	9103      	str	r1, [sp, #12]
 8004022:	2b00      	cmp	r3, #0
 8004024:	bfbb      	ittet	lt
 8004026:	425b      	neglt	r3, r3
 8004028:	f042 0202 	orrlt.w	r2, r2, #2
 800402c:	9307      	strge	r3, [sp, #28]
 800402e:	9307      	strlt	r3, [sp, #28]
 8004030:	bfb8      	it	lt
 8004032:	9204      	strlt	r2, [sp, #16]
 8004034:	7823      	ldrb	r3, [r4, #0]
 8004036:	2b2e      	cmp	r3, #46	; 0x2e
 8004038:	d10c      	bne.n	8004054 <_svfiprintf_r+0x130>
 800403a:	7863      	ldrb	r3, [r4, #1]
 800403c:	2b2a      	cmp	r3, #42	; 0x2a
 800403e:	d135      	bne.n	80040ac <_svfiprintf_r+0x188>
 8004040:	9b03      	ldr	r3, [sp, #12]
 8004042:	3402      	adds	r4, #2
 8004044:	1d1a      	adds	r2, r3, #4
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	9203      	str	r2, [sp, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	bfb8      	it	lt
 800404e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004052:	9305      	str	r3, [sp, #20]
 8004054:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004120 <_svfiprintf_r+0x1fc>
 8004058:	2203      	movs	r2, #3
 800405a:	4650      	mov	r0, sl
 800405c:	7821      	ldrb	r1, [r4, #0]
 800405e:	f000 f9f9 	bl	8004454 <memchr>
 8004062:	b140      	cbz	r0, 8004076 <_svfiprintf_r+0x152>
 8004064:	2340      	movs	r3, #64	; 0x40
 8004066:	eba0 000a 	sub.w	r0, r0, sl
 800406a:	fa03 f000 	lsl.w	r0, r3, r0
 800406e:	9b04      	ldr	r3, [sp, #16]
 8004070:	3401      	adds	r4, #1
 8004072:	4303      	orrs	r3, r0
 8004074:	9304      	str	r3, [sp, #16]
 8004076:	f814 1b01 	ldrb.w	r1, [r4], #1
 800407a:	2206      	movs	r2, #6
 800407c:	4825      	ldr	r0, [pc, #148]	; (8004114 <_svfiprintf_r+0x1f0>)
 800407e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004082:	f000 f9e7 	bl	8004454 <memchr>
 8004086:	2800      	cmp	r0, #0
 8004088:	d038      	beq.n	80040fc <_svfiprintf_r+0x1d8>
 800408a:	4b23      	ldr	r3, [pc, #140]	; (8004118 <_svfiprintf_r+0x1f4>)
 800408c:	bb1b      	cbnz	r3, 80040d6 <_svfiprintf_r+0x1b2>
 800408e:	9b03      	ldr	r3, [sp, #12]
 8004090:	3307      	adds	r3, #7
 8004092:	f023 0307 	bic.w	r3, r3, #7
 8004096:	3308      	adds	r3, #8
 8004098:	9303      	str	r3, [sp, #12]
 800409a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800409c:	4433      	add	r3, r6
 800409e:	9309      	str	r3, [sp, #36]	; 0x24
 80040a0:	e767      	b.n	8003f72 <_svfiprintf_r+0x4e>
 80040a2:	460c      	mov	r4, r1
 80040a4:	2001      	movs	r0, #1
 80040a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80040aa:	e7a5      	b.n	8003ff8 <_svfiprintf_r+0xd4>
 80040ac:	2300      	movs	r3, #0
 80040ae:	f04f 0c0a 	mov.w	ip, #10
 80040b2:	4619      	mov	r1, r3
 80040b4:	3401      	adds	r4, #1
 80040b6:	9305      	str	r3, [sp, #20]
 80040b8:	4620      	mov	r0, r4
 80040ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040be:	3a30      	subs	r2, #48	; 0x30
 80040c0:	2a09      	cmp	r2, #9
 80040c2:	d903      	bls.n	80040cc <_svfiprintf_r+0x1a8>
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d0c5      	beq.n	8004054 <_svfiprintf_r+0x130>
 80040c8:	9105      	str	r1, [sp, #20]
 80040ca:	e7c3      	b.n	8004054 <_svfiprintf_r+0x130>
 80040cc:	4604      	mov	r4, r0
 80040ce:	2301      	movs	r3, #1
 80040d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80040d4:	e7f0      	b.n	80040b8 <_svfiprintf_r+0x194>
 80040d6:	ab03      	add	r3, sp, #12
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	462a      	mov	r2, r5
 80040dc:	4638      	mov	r0, r7
 80040de:	4b0f      	ldr	r3, [pc, #60]	; (800411c <_svfiprintf_r+0x1f8>)
 80040e0:	a904      	add	r1, sp, #16
 80040e2:	f3af 8000 	nop.w
 80040e6:	1c42      	adds	r2, r0, #1
 80040e8:	4606      	mov	r6, r0
 80040ea:	d1d6      	bne.n	800409a <_svfiprintf_r+0x176>
 80040ec:	89ab      	ldrh	r3, [r5, #12]
 80040ee:	065b      	lsls	r3, r3, #25
 80040f0:	f53f af2c 	bmi.w	8003f4c <_svfiprintf_r+0x28>
 80040f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040f6:	b01d      	add	sp, #116	; 0x74
 80040f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040fc:	ab03      	add	r3, sp, #12
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	462a      	mov	r2, r5
 8004102:	4638      	mov	r0, r7
 8004104:	4b05      	ldr	r3, [pc, #20]	; (800411c <_svfiprintf_r+0x1f8>)
 8004106:	a904      	add	r1, sp, #16
 8004108:	f000 f87c 	bl	8004204 <_printf_i>
 800410c:	e7eb      	b.n	80040e6 <_svfiprintf_r+0x1c2>
 800410e:	bf00      	nop
 8004110:	08004602 	.word	0x08004602
 8004114:	0800460c 	.word	0x0800460c
 8004118:	00000000 	.word	0x00000000
 800411c:	08003e6d 	.word	0x08003e6d
 8004120:	08004608 	.word	0x08004608

08004124 <_printf_common>:
 8004124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004128:	4616      	mov	r6, r2
 800412a:	4699      	mov	r9, r3
 800412c:	688a      	ldr	r2, [r1, #8]
 800412e:	690b      	ldr	r3, [r1, #16]
 8004130:	4607      	mov	r7, r0
 8004132:	4293      	cmp	r3, r2
 8004134:	bfb8      	it	lt
 8004136:	4613      	movlt	r3, r2
 8004138:	6033      	str	r3, [r6, #0]
 800413a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800413e:	460c      	mov	r4, r1
 8004140:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004144:	b10a      	cbz	r2, 800414a <_printf_common+0x26>
 8004146:	3301      	adds	r3, #1
 8004148:	6033      	str	r3, [r6, #0]
 800414a:	6823      	ldr	r3, [r4, #0]
 800414c:	0699      	lsls	r1, r3, #26
 800414e:	bf42      	ittt	mi
 8004150:	6833      	ldrmi	r3, [r6, #0]
 8004152:	3302      	addmi	r3, #2
 8004154:	6033      	strmi	r3, [r6, #0]
 8004156:	6825      	ldr	r5, [r4, #0]
 8004158:	f015 0506 	ands.w	r5, r5, #6
 800415c:	d106      	bne.n	800416c <_printf_common+0x48>
 800415e:	f104 0a19 	add.w	sl, r4, #25
 8004162:	68e3      	ldr	r3, [r4, #12]
 8004164:	6832      	ldr	r2, [r6, #0]
 8004166:	1a9b      	subs	r3, r3, r2
 8004168:	42ab      	cmp	r3, r5
 800416a:	dc28      	bgt.n	80041be <_printf_common+0x9a>
 800416c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004170:	1e13      	subs	r3, r2, #0
 8004172:	6822      	ldr	r2, [r4, #0]
 8004174:	bf18      	it	ne
 8004176:	2301      	movne	r3, #1
 8004178:	0692      	lsls	r2, r2, #26
 800417a:	d42d      	bmi.n	80041d8 <_printf_common+0xb4>
 800417c:	4649      	mov	r1, r9
 800417e:	4638      	mov	r0, r7
 8004180:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004184:	47c0      	blx	r8
 8004186:	3001      	adds	r0, #1
 8004188:	d020      	beq.n	80041cc <_printf_common+0xa8>
 800418a:	6823      	ldr	r3, [r4, #0]
 800418c:	68e5      	ldr	r5, [r4, #12]
 800418e:	f003 0306 	and.w	r3, r3, #6
 8004192:	2b04      	cmp	r3, #4
 8004194:	bf18      	it	ne
 8004196:	2500      	movne	r5, #0
 8004198:	6832      	ldr	r2, [r6, #0]
 800419a:	f04f 0600 	mov.w	r6, #0
 800419e:	68a3      	ldr	r3, [r4, #8]
 80041a0:	bf08      	it	eq
 80041a2:	1aad      	subeq	r5, r5, r2
 80041a4:	6922      	ldr	r2, [r4, #16]
 80041a6:	bf08      	it	eq
 80041a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041ac:	4293      	cmp	r3, r2
 80041ae:	bfc4      	itt	gt
 80041b0:	1a9b      	subgt	r3, r3, r2
 80041b2:	18ed      	addgt	r5, r5, r3
 80041b4:	341a      	adds	r4, #26
 80041b6:	42b5      	cmp	r5, r6
 80041b8:	d11a      	bne.n	80041f0 <_printf_common+0xcc>
 80041ba:	2000      	movs	r0, #0
 80041bc:	e008      	b.n	80041d0 <_printf_common+0xac>
 80041be:	2301      	movs	r3, #1
 80041c0:	4652      	mov	r2, sl
 80041c2:	4649      	mov	r1, r9
 80041c4:	4638      	mov	r0, r7
 80041c6:	47c0      	blx	r8
 80041c8:	3001      	adds	r0, #1
 80041ca:	d103      	bne.n	80041d4 <_printf_common+0xb0>
 80041cc:	f04f 30ff 	mov.w	r0, #4294967295
 80041d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041d4:	3501      	adds	r5, #1
 80041d6:	e7c4      	b.n	8004162 <_printf_common+0x3e>
 80041d8:	2030      	movs	r0, #48	; 0x30
 80041da:	18e1      	adds	r1, r4, r3
 80041dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041e6:	4422      	add	r2, r4
 80041e8:	3302      	adds	r3, #2
 80041ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041ee:	e7c5      	b.n	800417c <_printf_common+0x58>
 80041f0:	2301      	movs	r3, #1
 80041f2:	4622      	mov	r2, r4
 80041f4:	4649      	mov	r1, r9
 80041f6:	4638      	mov	r0, r7
 80041f8:	47c0      	blx	r8
 80041fa:	3001      	adds	r0, #1
 80041fc:	d0e6      	beq.n	80041cc <_printf_common+0xa8>
 80041fe:	3601      	adds	r6, #1
 8004200:	e7d9      	b.n	80041b6 <_printf_common+0x92>
	...

08004204 <_printf_i>:
 8004204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004208:	460c      	mov	r4, r1
 800420a:	7e27      	ldrb	r7, [r4, #24]
 800420c:	4691      	mov	r9, r2
 800420e:	2f78      	cmp	r7, #120	; 0x78
 8004210:	4680      	mov	r8, r0
 8004212:	469a      	mov	sl, r3
 8004214:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004216:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800421a:	d807      	bhi.n	800422c <_printf_i+0x28>
 800421c:	2f62      	cmp	r7, #98	; 0x62
 800421e:	d80a      	bhi.n	8004236 <_printf_i+0x32>
 8004220:	2f00      	cmp	r7, #0
 8004222:	f000 80d9 	beq.w	80043d8 <_printf_i+0x1d4>
 8004226:	2f58      	cmp	r7, #88	; 0x58
 8004228:	f000 80a4 	beq.w	8004374 <_printf_i+0x170>
 800422c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004230:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004234:	e03a      	b.n	80042ac <_printf_i+0xa8>
 8004236:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800423a:	2b15      	cmp	r3, #21
 800423c:	d8f6      	bhi.n	800422c <_printf_i+0x28>
 800423e:	a001      	add	r0, pc, #4	; (adr r0, 8004244 <_printf_i+0x40>)
 8004240:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004244:	0800429d 	.word	0x0800429d
 8004248:	080042b1 	.word	0x080042b1
 800424c:	0800422d 	.word	0x0800422d
 8004250:	0800422d 	.word	0x0800422d
 8004254:	0800422d 	.word	0x0800422d
 8004258:	0800422d 	.word	0x0800422d
 800425c:	080042b1 	.word	0x080042b1
 8004260:	0800422d 	.word	0x0800422d
 8004264:	0800422d 	.word	0x0800422d
 8004268:	0800422d 	.word	0x0800422d
 800426c:	0800422d 	.word	0x0800422d
 8004270:	080043bf 	.word	0x080043bf
 8004274:	080042e1 	.word	0x080042e1
 8004278:	080043a1 	.word	0x080043a1
 800427c:	0800422d 	.word	0x0800422d
 8004280:	0800422d 	.word	0x0800422d
 8004284:	080043e1 	.word	0x080043e1
 8004288:	0800422d 	.word	0x0800422d
 800428c:	080042e1 	.word	0x080042e1
 8004290:	0800422d 	.word	0x0800422d
 8004294:	0800422d 	.word	0x0800422d
 8004298:	080043a9 	.word	0x080043a9
 800429c:	680b      	ldr	r3, [r1, #0]
 800429e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80042a2:	1d1a      	adds	r2, r3, #4
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	600a      	str	r2, [r1, #0]
 80042a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042ac:	2301      	movs	r3, #1
 80042ae:	e0a4      	b.n	80043fa <_printf_i+0x1f6>
 80042b0:	6825      	ldr	r5, [r4, #0]
 80042b2:	6808      	ldr	r0, [r1, #0]
 80042b4:	062e      	lsls	r6, r5, #24
 80042b6:	f100 0304 	add.w	r3, r0, #4
 80042ba:	d50a      	bpl.n	80042d2 <_printf_i+0xce>
 80042bc:	6805      	ldr	r5, [r0, #0]
 80042be:	600b      	str	r3, [r1, #0]
 80042c0:	2d00      	cmp	r5, #0
 80042c2:	da03      	bge.n	80042cc <_printf_i+0xc8>
 80042c4:	232d      	movs	r3, #45	; 0x2d
 80042c6:	426d      	negs	r5, r5
 80042c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042cc:	230a      	movs	r3, #10
 80042ce:	485e      	ldr	r0, [pc, #376]	; (8004448 <_printf_i+0x244>)
 80042d0:	e019      	b.n	8004306 <_printf_i+0x102>
 80042d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80042d6:	6805      	ldr	r5, [r0, #0]
 80042d8:	600b      	str	r3, [r1, #0]
 80042da:	bf18      	it	ne
 80042dc:	b22d      	sxthne	r5, r5
 80042de:	e7ef      	b.n	80042c0 <_printf_i+0xbc>
 80042e0:	680b      	ldr	r3, [r1, #0]
 80042e2:	6825      	ldr	r5, [r4, #0]
 80042e4:	1d18      	adds	r0, r3, #4
 80042e6:	6008      	str	r0, [r1, #0]
 80042e8:	0628      	lsls	r0, r5, #24
 80042ea:	d501      	bpl.n	80042f0 <_printf_i+0xec>
 80042ec:	681d      	ldr	r5, [r3, #0]
 80042ee:	e002      	b.n	80042f6 <_printf_i+0xf2>
 80042f0:	0669      	lsls	r1, r5, #25
 80042f2:	d5fb      	bpl.n	80042ec <_printf_i+0xe8>
 80042f4:	881d      	ldrh	r5, [r3, #0]
 80042f6:	2f6f      	cmp	r7, #111	; 0x6f
 80042f8:	bf0c      	ite	eq
 80042fa:	2308      	moveq	r3, #8
 80042fc:	230a      	movne	r3, #10
 80042fe:	4852      	ldr	r0, [pc, #328]	; (8004448 <_printf_i+0x244>)
 8004300:	2100      	movs	r1, #0
 8004302:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004306:	6866      	ldr	r6, [r4, #4]
 8004308:	2e00      	cmp	r6, #0
 800430a:	bfa8      	it	ge
 800430c:	6821      	ldrge	r1, [r4, #0]
 800430e:	60a6      	str	r6, [r4, #8]
 8004310:	bfa4      	itt	ge
 8004312:	f021 0104 	bicge.w	r1, r1, #4
 8004316:	6021      	strge	r1, [r4, #0]
 8004318:	b90d      	cbnz	r5, 800431e <_printf_i+0x11a>
 800431a:	2e00      	cmp	r6, #0
 800431c:	d04d      	beq.n	80043ba <_printf_i+0x1b6>
 800431e:	4616      	mov	r6, r2
 8004320:	fbb5 f1f3 	udiv	r1, r5, r3
 8004324:	fb03 5711 	mls	r7, r3, r1, r5
 8004328:	5dc7      	ldrb	r7, [r0, r7]
 800432a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800432e:	462f      	mov	r7, r5
 8004330:	42bb      	cmp	r3, r7
 8004332:	460d      	mov	r5, r1
 8004334:	d9f4      	bls.n	8004320 <_printf_i+0x11c>
 8004336:	2b08      	cmp	r3, #8
 8004338:	d10b      	bne.n	8004352 <_printf_i+0x14e>
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	07df      	lsls	r7, r3, #31
 800433e:	d508      	bpl.n	8004352 <_printf_i+0x14e>
 8004340:	6923      	ldr	r3, [r4, #16]
 8004342:	6861      	ldr	r1, [r4, #4]
 8004344:	4299      	cmp	r1, r3
 8004346:	bfde      	ittt	le
 8004348:	2330      	movle	r3, #48	; 0x30
 800434a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800434e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004352:	1b92      	subs	r2, r2, r6
 8004354:	6122      	str	r2, [r4, #16]
 8004356:	464b      	mov	r3, r9
 8004358:	4621      	mov	r1, r4
 800435a:	4640      	mov	r0, r8
 800435c:	f8cd a000 	str.w	sl, [sp]
 8004360:	aa03      	add	r2, sp, #12
 8004362:	f7ff fedf 	bl	8004124 <_printf_common>
 8004366:	3001      	adds	r0, #1
 8004368:	d14c      	bne.n	8004404 <_printf_i+0x200>
 800436a:	f04f 30ff 	mov.w	r0, #4294967295
 800436e:	b004      	add	sp, #16
 8004370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004374:	4834      	ldr	r0, [pc, #208]	; (8004448 <_printf_i+0x244>)
 8004376:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800437a:	680e      	ldr	r6, [r1, #0]
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004382:	061f      	lsls	r7, r3, #24
 8004384:	600e      	str	r6, [r1, #0]
 8004386:	d514      	bpl.n	80043b2 <_printf_i+0x1ae>
 8004388:	07d9      	lsls	r1, r3, #31
 800438a:	bf44      	itt	mi
 800438c:	f043 0320 	orrmi.w	r3, r3, #32
 8004390:	6023      	strmi	r3, [r4, #0]
 8004392:	b91d      	cbnz	r5, 800439c <_printf_i+0x198>
 8004394:	6823      	ldr	r3, [r4, #0]
 8004396:	f023 0320 	bic.w	r3, r3, #32
 800439a:	6023      	str	r3, [r4, #0]
 800439c:	2310      	movs	r3, #16
 800439e:	e7af      	b.n	8004300 <_printf_i+0xfc>
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	f043 0320 	orr.w	r3, r3, #32
 80043a6:	6023      	str	r3, [r4, #0]
 80043a8:	2378      	movs	r3, #120	; 0x78
 80043aa:	4828      	ldr	r0, [pc, #160]	; (800444c <_printf_i+0x248>)
 80043ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043b0:	e7e3      	b.n	800437a <_printf_i+0x176>
 80043b2:	065e      	lsls	r6, r3, #25
 80043b4:	bf48      	it	mi
 80043b6:	b2ad      	uxthmi	r5, r5
 80043b8:	e7e6      	b.n	8004388 <_printf_i+0x184>
 80043ba:	4616      	mov	r6, r2
 80043bc:	e7bb      	b.n	8004336 <_printf_i+0x132>
 80043be:	680b      	ldr	r3, [r1, #0]
 80043c0:	6826      	ldr	r6, [r4, #0]
 80043c2:	1d1d      	adds	r5, r3, #4
 80043c4:	6960      	ldr	r0, [r4, #20]
 80043c6:	600d      	str	r5, [r1, #0]
 80043c8:	0635      	lsls	r5, r6, #24
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	d501      	bpl.n	80043d2 <_printf_i+0x1ce>
 80043ce:	6018      	str	r0, [r3, #0]
 80043d0:	e002      	b.n	80043d8 <_printf_i+0x1d4>
 80043d2:	0671      	lsls	r1, r6, #25
 80043d4:	d5fb      	bpl.n	80043ce <_printf_i+0x1ca>
 80043d6:	8018      	strh	r0, [r3, #0]
 80043d8:	2300      	movs	r3, #0
 80043da:	4616      	mov	r6, r2
 80043dc:	6123      	str	r3, [r4, #16]
 80043de:	e7ba      	b.n	8004356 <_printf_i+0x152>
 80043e0:	680b      	ldr	r3, [r1, #0]
 80043e2:	1d1a      	adds	r2, r3, #4
 80043e4:	600a      	str	r2, [r1, #0]
 80043e6:	681e      	ldr	r6, [r3, #0]
 80043e8:	2100      	movs	r1, #0
 80043ea:	4630      	mov	r0, r6
 80043ec:	6862      	ldr	r2, [r4, #4]
 80043ee:	f000 f831 	bl	8004454 <memchr>
 80043f2:	b108      	cbz	r0, 80043f8 <_printf_i+0x1f4>
 80043f4:	1b80      	subs	r0, r0, r6
 80043f6:	6060      	str	r0, [r4, #4]
 80043f8:	6863      	ldr	r3, [r4, #4]
 80043fa:	6123      	str	r3, [r4, #16]
 80043fc:	2300      	movs	r3, #0
 80043fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004402:	e7a8      	b.n	8004356 <_printf_i+0x152>
 8004404:	4632      	mov	r2, r6
 8004406:	4649      	mov	r1, r9
 8004408:	4640      	mov	r0, r8
 800440a:	6923      	ldr	r3, [r4, #16]
 800440c:	47d0      	blx	sl
 800440e:	3001      	adds	r0, #1
 8004410:	d0ab      	beq.n	800436a <_printf_i+0x166>
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	079b      	lsls	r3, r3, #30
 8004416:	d413      	bmi.n	8004440 <_printf_i+0x23c>
 8004418:	68e0      	ldr	r0, [r4, #12]
 800441a:	9b03      	ldr	r3, [sp, #12]
 800441c:	4298      	cmp	r0, r3
 800441e:	bfb8      	it	lt
 8004420:	4618      	movlt	r0, r3
 8004422:	e7a4      	b.n	800436e <_printf_i+0x16a>
 8004424:	2301      	movs	r3, #1
 8004426:	4632      	mov	r2, r6
 8004428:	4649      	mov	r1, r9
 800442a:	4640      	mov	r0, r8
 800442c:	47d0      	blx	sl
 800442e:	3001      	adds	r0, #1
 8004430:	d09b      	beq.n	800436a <_printf_i+0x166>
 8004432:	3501      	adds	r5, #1
 8004434:	68e3      	ldr	r3, [r4, #12]
 8004436:	9903      	ldr	r1, [sp, #12]
 8004438:	1a5b      	subs	r3, r3, r1
 800443a:	42ab      	cmp	r3, r5
 800443c:	dcf2      	bgt.n	8004424 <_printf_i+0x220>
 800443e:	e7eb      	b.n	8004418 <_printf_i+0x214>
 8004440:	2500      	movs	r5, #0
 8004442:	f104 0619 	add.w	r6, r4, #25
 8004446:	e7f5      	b.n	8004434 <_printf_i+0x230>
 8004448:	08004613 	.word	0x08004613
 800444c:	08004624 	.word	0x08004624

08004450 <__retarget_lock_acquire_recursive>:
 8004450:	4770      	bx	lr

08004452 <__retarget_lock_release_recursive>:
 8004452:	4770      	bx	lr

08004454 <memchr>:
 8004454:	4603      	mov	r3, r0
 8004456:	b510      	push	{r4, lr}
 8004458:	b2c9      	uxtb	r1, r1
 800445a:	4402      	add	r2, r0
 800445c:	4293      	cmp	r3, r2
 800445e:	4618      	mov	r0, r3
 8004460:	d101      	bne.n	8004466 <memchr+0x12>
 8004462:	2000      	movs	r0, #0
 8004464:	e003      	b.n	800446e <memchr+0x1a>
 8004466:	7804      	ldrb	r4, [r0, #0]
 8004468:	3301      	adds	r3, #1
 800446a:	428c      	cmp	r4, r1
 800446c:	d1f6      	bne.n	800445c <memchr+0x8>
 800446e:	bd10      	pop	{r4, pc}

08004470 <memcpy>:
 8004470:	440a      	add	r2, r1
 8004472:	4291      	cmp	r1, r2
 8004474:	f100 33ff 	add.w	r3, r0, #4294967295
 8004478:	d100      	bne.n	800447c <memcpy+0xc>
 800447a:	4770      	bx	lr
 800447c:	b510      	push	{r4, lr}
 800447e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004482:	4291      	cmp	r1, r2
 8004484:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004488:	d1f9      	bne.n	800447e <memcpy+0xe>
 800448a:	bd10      	pop	{r4, pc}

0800448c <memmove>:
 800448c:	4288      	cmp	r0, r1
 800448e:	b510      	push	{r4, lr}
 8004490:	eb01 0402 	add.w	r4, r1, r2
 8004494:	d902      	bls.n	800449c <memmove+0x10>
 8004496:	4284      	cmp	r4, r0
 8004498:	4623      	mov	r3, r4
 800449a:	d807      	bhi.n	80044ac <memmove+0x20>
 800449c:	1e43      	subs	r3, r0, #1
 800449e:	42a1      	cmp	r1, r4
 80044a0:	d008      	beq.n	80044b4 <memmove+0x28>
 80044a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044aa:	e7f8      	b.n	800449e <memmove+0x12>
 80044ac:	4601      	mov	r1, r0
 80044ae:	4402      	add	r2, r0
 80044b0:	428a      	cmp	r2, r1
 80044b2:	d100      	bne.n	80044b6 <memmove+0x2a>
 80044b4:	bd10      	pop	{r4, pc}
 80044b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80044be:	e7f7      	b.n	80044b0 <memmove+0x24>

080044c0 <_realloc_r>:
 80044c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c2:	4607      	mov	r7, r0
 80044c4:	4614      	mov	r4, r2
 80044c6:	460e      	mov	r6, r1
 80044c8:	b921      	cbnz	r1, 80044d4 <_realloc_r+0x14>
 80044ca:	4611      	mov	r1, r2
 80044cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80044d0:	f7ff bc36 	b.w	8003d40 <_malloc_r>
 80044d4:	b922      	cbnz	r2, 80044e0 <_realloc_r+0x20>
 80044d6:	f7ff fbe7 	bl	8003ca8 <_free_r>
 80044da:	4625      	mov	r5, r4
 80044dc:	4628      	mov	r0, r5
 80044de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044e0:	f000 f814 	bl	800450c <_malloc_usable_size_r>
 80044e4:	42a0      	cmp	r0, r4
 80044e6:	d20f      	bcs.n	8004508 <_realloc_r+0x48>
 80044e8:	4621      	mov	r1, r4
 80044ea:	4638      	mov	r0, r7
 80044ec:	f7ff fc28 	bl	8003d40 <_malloc_r>
 80044f0:	4605      	mov	r5, r0
 80044f2:	2800      	cmp	r0, #0
 80044f4:	d0f2      	beq.n	80044dc <_realloc_r+0x1c>
 80044f6:	4631      	mov	r1, r6
 80044f8:	4622      	mov	r2, r4
 80044fa:	f7ff ffb9 	bl	8004470 <memcpy>
 80044fe:	4631      	mov	r1, r6
 8004500:	4638      	mov	r0, r7
 8004502:	f7ff fbd1 	bl	8003ca8 <_free_r>
 8004506:	e7e9      	b.n	80044dc <_realloc_r+0x1c>
 8004508:	4635      	mov	r5, r6
 800450a:	e7e7      	b.n	80044dc <_realloc_r+0x1c>

0800450c <_malloc_usable_size_r>:
 800450c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004510:	1f18      	subs	r0, r3, #4
 8004512:	2b00      	cmp	r3, #0
 8004514:	bfbc      	itt	lt
 8004516:	580b      	ldrlt	r3, [r1, r0]
 8004518:	18c0      	addlt	r0, r0, r3
 800451a:	4770      	bx	lr

0800451c <_init>:
 800451c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451e:	bf00      	nop
 8004520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004522:	bc08      	pop	{r3}
 8004524:	469e      	mov	lr, r3
 8004526:	4770      	bx	lr

08004528 <_fini>:
 8004528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800452a:	bf00      	nop
 800452c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800452e:	bc08      	pop	{r3}
 8004530:	469e      	mov	lr, r3
 8004532:	4770      	bx	lr
