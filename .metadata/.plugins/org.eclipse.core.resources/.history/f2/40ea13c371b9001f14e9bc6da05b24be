/*
 * scheduler.c
 *
 *  Created on: Nov 9, 2024
 *      Author: datph
 */
#include "scheduler.h"
sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task = 0;
int timer_counter = 0;

sTasks* head = NULL;
sTasks* tail = NULL;

void SCH_Init(void){
    head = NULL;
    tail = NULL;
}

void SCH_Add_Task (void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
	sTasks* newTask = (sTasks*)malloc(sizeof(sTasks));
	    if (newTask) {
	        newTask->pTask = pFunction;
	        newTask->Delay = DELAY;
	        newTask->Period = PERIOD;
	        newTask->RunMe = 0;
	        newTask->next = NULL;
	        newTask->prev = tail;

	        if (tail) {
	            tail->next = newTask;
	        }
	        else {
	            head = newTask;
	        }
	        tail = newTask;
	    }
}

void SCH_Update(void) {
	sTasks* current = head;
	    while (current) {
	        if (current->Delay > 0) {
	            current->Delay--;
	        } else {
	            current->Delay = current->Period;
	            current->RunMe++;
	        }
	        current = current->next;
	    }
}

void SCH_Dispatch_Tasks(void) {
	for (uint32_t i = 0; i < current_index_task; i++) {
		if(SCH_tasks_G[i].RunMe > 0) {
			SCH_tasks_G[i].RunMe--;
			(*SCH_tasks_G[i].pTask)();

			if(SCH_tasks_G[i].Period == 0) {
				SCH_Delete_Task(i);
			}
		}
	}
}

void SCH_Delete_Task (uint32_t ID) {
	for (uint32_t i = ID; i < current_index_task; i++) {
		if (i == (current_index_task - 1)) {
			SCH_tasks_G[i].pTask = 0x0000;
			SCH_tasks_G[i]. Delay = 0;
			SCH_tasks_G[i]. Period = 0;
			SCH_tasks_G[i].RunMe = 0;
			SCH_tasks_G[i].TaskID = 0;
		}
		else {
		SCH_tasks_G[i].pTask = SCH_tasks_G[i + 1].pTask;
		SCH_tasks_G[i]. Delay = SCH_tasks_G[i + 1].Delay;
		SCH_tasks_G[i]. Period = SCH_tasks_G[i + 1].Period;
		SCH_tasks_G[i].RunMe = SCH_tasks_G[i + 1].RunMe;
		SCH_tasks_G[i].TaskID = SCH_tasks_G[i + 1].TaskID;
		}
	}
	--current_index_task;
}
